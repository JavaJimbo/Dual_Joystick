

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Apr 08 20:12:58 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18LF2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29  0000                     
    30                           ; Version 1.41
    31                           ; Generated 25/01/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18LF2520 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	mediumconst
    66  007DEE                     __pmediumconst:
    67                           	opt stack 0
    68  007DEE  00                 	db	0
    69  007DEF                     _crc_tab16:
    70                           	opt stack 0
    71  007DEF  0000               	dw	0
    72  007DF1  C0C1               	dw	49345
    73  007DF3  C181               	dw	49537
    74  007DF5  0140               	dw	320
    75  007DF7  C301               	dw	49921
    76  007DF9  03C0               	dw	960
    77  007DFB  0280               	dw	640
    78  007DFD  C241               	dw	49729
    79  007DFF  C601               	dw	50689
    80  007E01  06C0               	dw	1728
    81  007E03  0780               	dw	1920
    82  007E05  C741               	dw	51009
    83  007E07  0500               	dw	1280
    84  007E09  C5C1               	dw	50625
    85  007E0B  C481               	dw	50305
    86  007E0D  0440               	dw	1088
    87  007E0F  CC01               	dw	52225
    88  007E11  0CC0               	dw	3264
    89  007E13  0D80               	dw	3456
    90  007E15  CD41               	dw	52545
    91  007E17  0F00               	dw	3840
    92  007E19  CFC1               	dw	53185
    93  007E1B  CE81               	dw	52865
    94  007E1D  0E40               	dw	3648
    95  007E1F  0A00               	dw	2560
    96  007E21  CAC1               	dw	51905
    97  007E23  CB81               	dw	52097
    98  007E25  0B40               	dw	2880
    99  007E27  C901               	dw	51457
   100  007E29  09C0               	dw	2496
   101  007E2B  0880               	dw	2176
   102  007E2D  C841               	dw	51265
   103  007E2F  D801               	dw	55297
   104  007E31  18C0               	dw	6336
   105  007E33  1980               	dw	6528
   106  007E35  D941               	dw	55617
   107  007E37  1B00               	dw	6912
   108  007E39  DBC1               	dw	56257
   109  007E3B  DA81               	dw	55937
   110  007E3D  1A40               	dw	6720
   111  007E3F  1E00               	dw	7680
   112  007E41  DEC1               	dw	57025
   113  007E43  DF81               	dw	57217
   114  007E45  1F40               	dw	8000
   115  007E47  DD01               	dw	56577
   116  007E49  1DC0               	dw	7616
   117  007E4B  1C80               	dw	7296
   118  007E4D  DC41               	dw	56385
   119  007E4F  1400               	dw	5120
   120  007E51  D4C1               	dw	54465
   121  007E53  D581               	dw	54657
   122  007E55  1540               	dw	5440
   123  007E57  D701               	dw	55041
   124  007E59  17C0               	dw	6080
   125  007E5B  1680               	dw	5760
   126  007E5D  D641               	dw	54849
   127  007E5F  D201               	dw	53761
   128  007E61  12C0               	dw	4800
   129  007E63  1380               	dw	4992
   130  007E65  D341               	dw	54081
   131  007E67  1100               	dw	4352
   132  007E69  D1C1               	dw	53697
   133  007E6B  D081               	dw	53377
   134  007E6D  1040               	dw	4160
   135  007E6F  F001               	dw	61441
   136  007E71  30C0               	dw	12480
   137  007E73  3180               	dw	12672
   138  007E75  F141               	dw	61761
   139  007E77  3300               	dw	13056
   140  007E79  F3C1               	dw	62401
   141  007E7B  F281               	dw	62081
   142  007E7D  3240               	dw	12864
   143  007E7F  3600               	dw	13824
   144  007E81  F6C1               	dw	63169
   145  007E83  F781               	dw	63361
   146  007E85  3740               	dw	14144
   147  007E87  F501               	dw	62721
   148  007E89  35C0               	dw	13760
   149  007E8B  3480               	dw	13440
   150  007E8D  F441               	dw	62529
   151  007E8F  3C00               	dw	15360
   152  007E91  FCC1               	dw	64705
   153  007E93  FD81               	dw	64897
   154  007E95  3D40               	dw	15680
   155  007E97  FF01               	dw	65281
   156  007E99  3FC0               	dw	16320
   157  007E9B  3E80               	dw	16000
   158  007E9D  FE41               	dw	65089
   159  007E9F  FA01               	dw	64001
   160  007EA1  3AC0               	dw	15040
   161  007EA3  3B80               	dw	15232
   162  007EA5  FB41               	dw	64321
   163  007EA7  3900               	dw	14592
   164  007EA9  F9C1               	dw	63937
   165  007EAB  F881               	dw	63617
   166  007EAD  3840               	dw	14400
   167  007EAF  2800               	dw	10240
   168  007EB1  E8C1               	dw	59585
   169  007EB3  E981               	dw	59777
   170  007EB5  2940               	dw	10560
   171  007EB7  EB01               	dw	60161
   172  007EB9  2BC0               	dw	11200
   173  007EBB  2A80               	dw	10880
   174  007EBD  EA41               	dw	59969
   175  007EBF  EE01               	dw	60929
   176  007EC1  2EC0               	dw	11968
   177  007EC3  2F80               	dw	12160
   178  007EC5  EF41               	dw	61249
   179  007EC7  2D00               	dw	11520
   180  007EC9  EDC1               	dw	60865
   181  007ECB  EC81               	dw	60545
   182  007ECD  2C40               	dw	11328
   183  007ECF  E401               	dw	58369
   184  007ED1  24C0               	dw	9408
   185  007ED3  2580               	dw	9600
   186  007ED5  E541               	dw	58689
   187  007ED7  2700               	dw	9984
   188  007ED9  E7C1               	dw	59329
   189  007EDB  E681               	dw	59009
   190  007EDD  2640               	dw	9792
   191  007EDF  2200               	dw	8704
   192  007EE1  E2C1               	dw	58049
   193  007EE3  E381               	dw	58241
   194  007EE5  2340               	dw	9024
   195  007EE7  E101               	dw	57601
   196  007EE9  21C0               	dw	8640
   197  007EEB  2080               	dw	8320
   198  007EED  E041               	dw	57409
   199  007EEF  A001               	dw	40961
   200  007EF1  60C0               	dw	24768
   201  007EF3  6180               	dw	24960
   202  007EF5  A141               	dw	41281
   203  007EF7  6300               	dw	25344
   204  007EF9  A3C1               	dw	41921
   205  007EFB  A281               	dw	41601
   206  007EFD  6240               	dw	25152
   207  007EFF  6600               	dw	26112
   208  007F01  A6C1               	dw	42689
   209  007F03  A781               	dw	42881
   210  007F05  6740               	dw	26432
   211  007F07  A501               	dw	42241
   212  007F09  65C0               	dw	26048
   213  007F0B  6480               	dw	25728
   214  007F0D  A441               	dw	42049
   215  007F0F  6C00               	dw	27648
   216  007F11  ACC1               	dw	44225
   217  007F13  AD81               	dw	44417
   218  007F15  6D40               	dw	27968
   219  007F17  AF01               	dw	44801
   220  007F19  6FC0               	dw	28608
   221  007F1B  6E80               	dw	28288
   222  007F1D  AE41               	dw	44609
   223  007F1F  AA01               	dw	43521
   224  007F21  6AC0               	dw	27328
   225  007F23  6B80               	dw	27520
   226  007F25  AB41               	dw	43841
   227  007F27  6900               	dw	26880
   228  007F29  A9C1               	dw	43457
   229  007F2B  A881               	dw	43137
   230  007F2D  6840               	dw	26688
   231  007F2F  7800               	dw	30720
   232  007F31  B8C1               	dw	47297
   233  007F33  B981               	dw	47489
   234  007F35  7940               	dw	31040
   235  007F37  BB01               	dw	47873
   236  007F39  7BC0               	dw	31680
   237  007F3B  7A80               	dw	31360
   238  007F3D  BA41               	dw	47681
   239  007F3F  BE01               	dw	48641
   240  007F41  7EC0               	dw	32448
   241  007F43  7F80               	dw	32640
   242  007F45  BF41               	dw	48961
   243  007F47  7D00               	dw	32000
   244  007F49  BDC1               	dw	48577
   245  007F4B  BC81               	dw	48257
   246  007F4D  7C40               	dw	31808
   247  007F4F  B401               	dw	46081
   248  007F51  74C0               	dw	29888
   249  007F53  7580               	dw	30080
   250  007F55  B541               	dw	46401
   251  007F57  7700               	dw	30464
   252  007F59  B7C1               	dw	47041
   253  007F5B  B681               	dw	46721
   254  007F5D  7640               	dw	30272
   255  007F5F  7200               	dw	29184
   256  007F61  B2C1               	dw	45761
   257  007F63  B381               	dw	45953
   258  007F65  7340               	dw	29504
   259  007F67  B101               	dw	45313
   260  007F69  71C0               	dw	29120
   261  007F6B  7080               	dw	28800
   262  007F6D  B041               	dw	45121
   263  007F6F  5000               	dw	20480
   264  007F71  90C1               	dw	37057
   265  007F73  9181               	dw	37249
   266  007F75  5140               	dw	20800
   267  007F77  9301               	dw	37633
   268  007F79  53C0               	dw	21440
   269  007F7B  5280               	dw	21120
   270  007F7D  9241               	dw	37441
   271  007F7F  9601               	dw	38401
   272  007F81  56C0               	dw	22208
   273  007F83  5780               	dw	22400
   274  007F85  9741               	dw	38721
   275  007F87  5500               	dw	21760
   276  007F89  95C1               	dw	38337
   277  007F8B  9481               	dw	38017
   278  007F8D  5440               	dw	21568
   279  007F8F  9C01               	dw	39937
   280  007F91  5CC0               	dw	23744
   281  007F93  5D80               	dw	23936
   282  007F95  9D41               	dw	40257
   283  007F97  5F00               	dw	24320
   284  007F99  9FC1               	dw	40897
   285  007F9B  9E81               	dw	40577
   286  007F9D  5E40               	dw	24128
   287  007F9F  5A00               	dw	23040
   288  007FA1  9AC1               	dw	39617
   289  007FA3  9B81               	dw	39809
   290  007FA5  5B40               	dw	23360
   291  007FA7  9901               	dw	39169
   292  007FA9  59C0               	dw	22976
   293  007FAB  5880               	dw	22656
   294  007FAD  9841               	dw	38977
   295  007FAF  8801               	dw	34817
   296  007FB1  48C0               	dw	18624
   297  007FB3  4980               	dw	18816
   298  007FB5  8941               	dw	35137
   299  007FB7  4B00               	dw	19200
   300  007FB9  8BC1               	dw	35777
   301  007FBB  8A81               	dw	35457
   302  007FBD  4A40               	dw	19008
   303  007FBF  4E00               	dw	19968
   304  007FC1  8EC1               	dw	36545
   305  007FC3  8F81               	dw	36737
   306  007FC5  4F40               	dw	20288
   307  007FC7  8D01               	dw	36097
   308  007FC9  4DC0               	dw	19904
   309  007FCB  4C80               	dw	19584
   310  007FCD  8C41               	dw	35905
   311  007FCF  4400               	dw	17408
   312  007FD1  84C1               	dw	33985
   313  007FD3  8581               	dw	34177
   314  007FD5  4540               	dw	17728
   315  007FD7  8701               	dw	34561
   316  007FD9  47C0               	dw	18368
   317  007FDB  4680               	dw	18048
   318  007FDD  8641               	dw	34369
   319  007FDF  8201               	dw	33281
   320  007FE1  42C0               	dw	17088
   321  007FE3  4380               	dw	17280
   322  007FE5  8341               	dw	33601
   323  007FE7  4100               	dw	16640
   324  007FE9  81C1               	dw	33217
   325  007FEB  8081               	dw	32897
   326  007FED  4040               	dw	16448
   327  007FEF                     __end_of_crc_tab16:
   328                           	opt stack 0
   329  007FEF                     readJoySticks@F2971:
   330                           	opt stack 0
   331  007FEF  0096               	dw	150
   332  007FF1  00C8               	dw	200
   333  007FF3  00C8               	dw	200
   334  007FF5  00C8               	dw	200
   335  007FF7                     __end_ofreadJoySticks@F2971:
   336                           	opt stack 0
   337  007FF7                     readJoySticks@F2969:
   338                           	opt stack 0
   339  007FF7  01C2               	dw	450
   340  007FF9  0190               	dw	400
   341  007FFB  01AE               	dw	430
   342  007FFD  0190               	dw	400
   343  007FFF                     __end_ofreadJoySticks@F2969:
   344                           	opt stack 0
   345  0000                     _ADRESL	set	4035
   346  0000                     _ADRESH	set	4036
   347  0000                     _ADCON0bits	set	4034
   348  0000                     _TXREG	set	4013
   349  0000                     _PIR1bits	set	3998
   350  0000                     _PORTB	set	3969
   351  0000                     _INTCON2	set	4081
   352  0000                     _INTCON	set	4082
   353  0000                     _T2CONbits	set	4042
   354  0000                     _T2CON	set	4042
   355  0000                     _PR2	set	4043
   356  0000                     _BAUDCONbits	set	4024
   357  0000                     _PIE1bits	set	3997
   358  0000                     _RCSTAbits	set	4011
   359  0000                     _SPBRG	set	4015
   360  0000                     _TXSTAbits	set	4012
   361  0000                     _TRISC	set	3988
   362  0000                     _INTCON2bits	set	4081
   363  0000                     _TRISB	set	3987
   364  0000                     _PORTAbits	set	3968
   365  0000                     _TRISA	set	3986
   366  0000                     _ADCON2bits	set	4032
   367  0000                     _ADCON2	set	4032
   368  0000                     _ADCON1bits	set	4033
   369  0000                     _ADCON0	set	4034
   370  0000                     _INTCONbits	set	4082
   371  0000                     _PORTBbits	set	3969
   372  0000                     _TMR2IF	set	31985
   373                           
   374                           ; #config settings
   375  007FFF  00                 	db	0	; dummy byte at the end
   376  0000                     
   377                           	psect	cinit
   378  00060C                     __pcinit:
   379                           	opt stack 0
   380  00060C                     start_initialization:
   381                           	opt stack 0
   382  00060C                     __initialization:
   383                           	opt stack 0
   384                           
   385                           ; Clear objects allocated to BIGRAM (1024 bytes)
   386  00060C  EE01  F080         	lfsr	0,__pbssBIGRAM
   387  000610  EE14 F000          	lfsr	1,1024
   388  000614                     clear_0:
   389  000614  6AEE               	clrf	postinc0,c
   390  000616  50E5               	movf	postdec1,w,c
   391  000618  50E1               	movf	fsr1l,w,c
   392  00061A  E1FC               	bnz	clear_0
   393  00061C  50E2               	movf	fsr1h,w,c
   394  00061E  E1FA               	bnz	clear_0
   395                           
   396                           ; Clear objects allocated to BANK1 (128 bytes)
   397  000620  EE01  F000         	lfsr	0,__pbssBANK1
   398  000624  0E80               	movlw	128
   399  000626                     clear_1:
   400  000626  6AEE               	clrf	postinc0,c
   401  000628  06E8               	decf	wreg,f,c
   402  00062A  E1FD               	bnz	clear_1
   403                           
   404                           ; Clear objects allocated to BANK0 (96 bytes)
   405  00062C  EE00  F080         	lfsr	0,__pbssBANK0
   406  000630  0E60               	movlw	96
   407  000632                     clear_2:
   408  000632  6AEE               	clrf	postinc0,c
   409  000634  06E8               	decf	wreg,f,c
   410  000636  E1FD               	bnz	clear_2
   411                           
   412                           ; Clear objects allocated to COMRAM (14 bytes)
   413  000638  EE00  F053         	lfsr	0,__pbssCOMRAM
   414  00063C  0E0E               	movlw	14
   415  00063E                     clear_3:
   416  00063E  6AEE               	clrf	postinc0,c
   417  000640  06E8               	decf	wreg,f,c
   418  000642  E1FD               	bnz	clear_3
   419  000644                     end_of_initialization:
   420                           	opt stack 0
   421  000644                     __end_of__initialization:
   422                           	opt stack 0
   423  000644  9061               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   424  000646  9261               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   425  000648  0E00               	movlw	low (__Lmediumconst shr (0+16))
   426  00064A  6EF8               	movwf	tblptru,c
   427  00064C  0100               	movlb	0
   428  00064E  EF12  F001         	goto	_main	;jump to C main() function
   429                           tblptru	equ	0xFF8
   430                           postinc0	equ	0xFEE
   431                           wreg	equ	0xFE8
   432                           postdec1	equ	0xFE5
   433                           fsr1h	equ	0xFE2
   434                           fsr1l	equ	0xFE1
   435                           
   436                           	psect	bssCOMRAM
   437  000053                     __pbssCOMRAM:
   438                           	opt stack 0
   439  000053                     _ADresult:
   440                           	opt stack 0
   441  000053                     	ds	8
   442  00005B                     isr@Timer2Counter:
   443                           	opt stack 0
   444  00005B                     	ds	2
   445  00005D                     readJoySticks@ADchannel:
   446                           	opt stack 0
   447  00005D                     	ds	1
   448  00005E                     _Timer2flag:
   449                           	opt stack 0
   450  00005E                     	ds	1
   451  00005F                     _pushFlag:
   452                           	opt stack 0
   453  00005F                     	ds	1
   454  000060                     _PORTBreg:
   455                           	opt stack 0
   456  000060                     	ds	1
   457                           tblptru	equ	0xFF8
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1h	equ	0xFE2
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	bssBANK0
   465  000080                     __pbssBANK0:
   466                           	opt stack 0
   467  000080                     _commandBuffer:
   468                           	opt stack 0
   469  000080                     	ds	64
   470  0000C0                     _arrPacket:
   471                           	opt stack 0
   472  0000C0                     	ds	32
   473                           tblptru	equ	0xFF8
   474                           postinc0	equ	0xFEE
   475                           wreg	equ	0xFE8
   476                           postdec1	equ	0xFE5
   477                           fsr1h	equ	0xFE2
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	bssBANK1
   481  000100                     __pbssBANK1:
   482                           	opt stack 0
   483  000100                     _testBuffer:
   484                           	opt stack 0
   485  000100                     	ds	128
   486                           tblptru	equ	0xFF8
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1h	equ	0xFE2
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	bssBIGRAM
   494  000180                     __pbssBIGRAM:
   495                           	opt stack 0
   496  000180                     _arrDataPacket:
   497                           	opt stack 0
   498  000180                     	ds	1024
   499                           tblptru	equ	0xFF8
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           postdec1	equ	0xFE5
   503                           fsr1h	equ	0xFE2
   504                           fsr1l	equ	0xFE1
   505                           
   506                           	psect	cstackCOMRAM
   507  000001                     __pcstackCOMRAM:
   508                           	opt stack 0
   509  000001                     ??_isr:
   510  000001                     
   511                           ; 1 bytes @ 0x0
   512  000001                     	ds	14
   513  00000F                     ??_ADsetChannel:
   514  00000F                     ?_ADconvertAndRead:
   515                           	opt stack 0
   516  00000F                     ?_update_crc_16:
   517                           	opt stack 0
   518  00000F                     ?___wmul:
   519                           	opt stack 0
   520  00000F                     putch@TxByte:
   521                           	opt stack 0
   522  00000F                     insertByte@ptrBuffer:
   523                           	opt stack 0
   524  00000F                     DelayMs@count:
   525                           	opt stack 0
   526  00000F                     update_crc_16@crc:
   527                           	opt stack 0
   528  00000F                     ___wmul@multiplier:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0xE
   532  00000F                     	ds	1
   533  000010                     ADsetChannel@channel:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0xF
   537  000010                     	ds	1
   538  000011                     ??_ADconvertAndRead:
   539  000011                     DelayMs@i:
   540                           	opt stack 0
   541  000011                     update_crc_16@nextVal:
   542                           	opt stack 0
   543  000011                     insertByte@index:
   544                           	opt stack 0
   545  000011                     ___wmul@multiplicand:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x10
   549  000011                     	ds	1
   550  000012                     ??_update_crc_16:
   551  000012                     DelayMs@downCount:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x11
   555  000012                     	ds	1
   556  000013                     ??_insertByte:
   557  000013                     ADconvertAndRead@ADvalue:
   558                           	opt stack 0
   559  000013                     ___wmul@product:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x12
   563  000013                     	ds	1
   564  000014                     insertByte@dataByte:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x13
   568  000014                     	ds	1
   569  000015                     ?___lwdiv:
   570                           	opt stack 0
   571  000015                     ADconvertAndRead@highByte:
   572                           	opt stack 0
   573  000015                     BuildPacket@ptrCommandData:
   574                           	opt stack 0
   575  000015                     ___lwdiv@dividend:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x14
   579  000015                     	ds	2
   580  000017                     BuildPacket@ptrPacket:
   581                           	opt stack 0
   582  000017                     ___lwdiv@divisor:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x16
   586  000017                     	ds	1
   587  000018                     update_crc_16@tmp:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x17
   591  000018                     	ds	1
   592  000019                     BuildPacket@dataLength:
   593                           	opt stack 0
   594  000019                     ___lwdiv@quotient:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x18
   598  000019                     	ds	1
   599  00001A                     BuildPacket@i:
   600                           	opt stack 0
   601  00001A                     update_crc_16@shortVal:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x19
   605  00001A                     	ds	1
   606  00001B                     BuildPacket@packetIndex:
   607                           	opt stack 0
   608  00001B                     ___lwdiv@counter:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x1A
   612  00001B                     	ds	1
   613  00001C                     ??_readJoySticks:
   614  00001C                     ?_CRCcalculate:
   615                           	opt stack 0
   616  00001C                     CRCcalculate@message:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x1B
   620  00001C                     	ds	2
   621  00001E                     CRCcalculate@nBytes:
   622                           	opt stack 0
   623  00001E                     readJoySticks@ADoffset:
   624                           	opt stack 0
   625                           
   626                           ; 8 bytes @ 0x1D
   627  00001E                     	ds	1
   628  00001F                     CRCcalculate@CRCresult:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x1E
   632  00001F                     	ds	2
   633  000021                     CRCcalculate@i:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x20
   637  000021                     	ds	5
   638  000026                     readJoySticks@ADspan:
   639                           	opt stack 0
   640                           
   641                           ; 8 bytes @ 0x25
   642  000026                     	ds	8
   643  00002E                     readJoySticks@offset:
   644                           	opt stack 0
   645                           
   646                           ; 2 bytes @ 0x2D
   647  00002E                     	ds	2
   648  000030                     readJoySticks@ADrawReading:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x2F
   652  000030                     	ds	2
   653  000032                     readJoySticks@span:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x31
   657  000032                     	ds	2
   658  000034                     readJoySticks@joyStickReading:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x33
   662  000034                     	ds	2
   663  000036                     main@arrTransmitData:
   664                           	opt stack 0
   665                           
   666                           ; 16 bytes @ 0x35
   667  000036                     	ds	16
   668  000046                     main@intLeftJoystickY:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x45
   672  000046                     	ds	2
   673  000048                     main@intLeftJoystickX:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x47
   677  000048                     	ds	2
   678  00004A                     main@intRightJoystickY:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x49
   682  00004A                     	ds	2
   683  00004C                     main@intRightJoystickX:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x4B
   687  00004C                     	ds	2
   688  00004E                     main@packetLength:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x4D
   692  00004E                     	ds	1
   693  00004F                     main@i:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x4E
   697  00004F                     	ds	1
   698  000050                     main@LEDcounter:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x4F
   702  000050                     	ds	1
   703  000051                     main@convert:
   704                           	opt stack 0
   705                           
   706                           ; 2 bytes @ 0x50
   707  000051                     	ds	2
   708                           tblptru	equ	0xFF8
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           postdec1	equ	0xFE5
   712                           fsr1h	equ	0xFE2
   713                           fsr1l	equ	0xFE1
   714                           
   715 ;;
   716 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   717 ;;
   718 ;; *************** function _main *****************
   719 ;; Defined at:
   720 ;;		line 78 in file "../main.c"
   721 ;; Parameters:    Size  Location     Type
   722 ;;		None
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  arrTransmitD   16   53[COMRAM] unsigned char [16]
   725 ;;  convert         2   80[COMRAM] struct convertType
   726 ;;  intRightJoys    2   75[COMRAM] short 
   727 ;;  intRightJoys    2   73[COMRAM] short 
   728 ;;  intLeftJoyst    2   71[COMRAM] short 
   729 ;;  intLeftJoyst    2   69[COMRAM] short 
   730 ;;  LEDcounter      1   79[COMRAM] unsigned char 
   731 ;;  i               1   78[COMRAM] unsigned char 
   732 ;;  packetLength    1   77[COMRAM] unsigned char 
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   742 ;;      Params:         0       0       0       0       0       0       0
   743 ;;      Locals:        29       0       0       0       0       0       0
   744 ;;      Temps:          0       0       0       0       0       0       0
   745 ;;      Totals:        29       0       0       0       0       0       0
   746 ;;Total ram usage:       29 bytes
   747 ;; Hardware stack levels required when called:    3
   748 ;; This function calls:
   749 ;;		_BuildPacket
   750 ;;		_CRCcalculate
   751 ;;		_DelayMs
   752 ;;		_init
   753 ;;		_putch
   754 ;;		_readJoySticks
   755 ;; This function is called by:
   756 ;;		Startup code after reset
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           	psect	text0
   761  000224                     __ptext0:
   762                           	opt stack 0
   763  000224                     _main:
   764                           	opt stack 28
   765                           
   766                           ;main.c: 79: short intLeftJoystickY, intLeftJoystickX, intRightJoystickY, intRightJoysti
      +                          ckX;
   767                           ;main.c: 80: unsigned char arrTransmitData[16];
   768                           ;main.c: 96: unsigned char packetLength, i;
   769                           ;main.c: 97: unsigned char LEDcounter = 0;
   770                           
   771                           ;incstack = 0
   772  000224  0E00               	movlw	0
   773  000226  6E50               	movwf	main@LEDcounter,c
   774                           
   775                           ;main.c: 98: union convertType {
   776                           ;main.c: 99: unsigned char byte[2];
   777                           ;main.c: 100: int integer;
   778                           ;main.c: 101: } convert;
   779                           ;main.c: 104: init();
   780  000228  EC49  F002         	call	_init	;wreg free
   781                           
   782                           ;main.c: 105: DelayMs(200);
   783  00022C  0E00               	movlw	0
   784  00022E  6E10               	movwf	DelayMs@count+1,c
   785  000230  0EC8               	movlw	200
   786  000232  6E0F               	movwf	DelayMs@count,c
   787  000234  EC42  F003         	call	_DelayMs	;wreg free
   788                           
   789                           ;main.c: 106: PORTBbits.RB0 = PORTBbits.RB1 = PORTBbits.RB2 = 1;
   790  000238  8481               	bsf	3969,2,c	;volatile
   791  00023A  8281               	bsf	3969,1,c	;volatile
   792  00023C  8081               	bsf	3969,0,c	;volatile
   793  00023E                     l1578:
   794                           
   795                           ;main.c: 110: {
   796                           ;main.c: 111: if (Timer2flag)
   797  00023E  505E               	movf	_Timer2flag,w,c
   798  000240  B4D8               	btfsc	status,2,c
   799  000242  D7FD               	goto	l1578
   800                           
   801                           ;main.c: 112: {
   802                           ;main.c: 113: Timer2flag = 0;
   803  000244  0E00               	movlw	0
   804  000246  6E5E               	movwf	_Timer2flag,c
   805                           
   806                           ;main.c: 114: LEDcounter++;
   807  000248  2A50               	incf	main@LEDcounter,f,c
   808                           
   809                           ;main.c: 115: if (LEDcounter == 4)
   810  00024A  0E04               	movlw	4
   811  00024C  1850               	xorwf	main@LEDcounter,w,c
   812  00024E  A4D8               	btfss	status,2,c
   813  000250  D003               	goto	l1588
   814                           
   815                           ;main.c: 116: {
   816                           ;main.c: 117: PORTBbits.RB0 = 1;
   817  000252  8081               	bsf	3969,0,c	;volatile
   818                           
   819                           ;main.c: 118: PORTBbits.RB1 = 0;
   820  000254  9281               	bcf	3969,1,c	;volatile
   821  000256  D006               	goto	L1
   822  000258                     l1588:
   823                           
   824                           ;main.c: 121: else if (LEDcounter == 8)
   825  000258  0E08               	movlw	8
   826  00025A  1850               	xorwf	main@LEDcounter,w,c
   827  00025C  A4D8               	btfss	status,2,c
   828  00025E  D004               	goto	l1592
   829                           
   830                           ;main.c: 122: {
   831                           ;main.c: 123: PORTBbits.RB0 = 0;
   832  000260  9081               	bcf	3969,0,c	;volatile
   833                           
   834                           ;main.c: 124: PORTBbits.RB1 = 1;
   835  000262  8281               	bsf	3969,1,c	;volatile
   836  000264                     L1:
   837                           
   838                           ;main.c: 125: PORTBbits.RB2 = 0;
   839  000264  9481               	bcf	3969,2,c	;volatile
   840                           
   841                           ;main.c: 126: }
   842  000266  D008               	goto	l1598
   843  000268                     l1592:
   844                           
   845                           ;main.c: 127: else if (LEDcounter >= 12)
   846  000268  0E0B               	movlw	11
   847  00026A  6450               	cpfsgt	main@LEDcounter,c
   848  00026C  D005               	goto	l1598
   849                           
   850                           ;main.c: 128: {
   851                           ;main.c: 129: PORTBbits.RB0 = 0;
   852  00026E  9081               	bcf	3969,0,c	;volatile
   853                           
   854                           ;main.c: 130: PORTBbits.RB1 = 0;
   855  000270  9281               	bcf	3969,1,c	;volatile
   856                           
   857                           ;main.c: 131: PORTBbits.RB2 = 1;
   858  000272  8481               	bsf	3969,2,c	;volatile
   859                           
   860                           ;main.c: 132: LEDcounter = 0;
   861  000274  0E00               	movlw	0
   862  000276  6E50               	movwf	main@LEDcounter,c
   863  000278                     l1598:
   864                           
   865                           ;main.c: 133: }
   866                           ;main.c: 135: readJoySticks();
   867  000278  EC5E  F000         	call	_readJoySticks	;wreg free
   868                           
   869                           ;main.c: 137: intLeftJoystickX = ((short) ADresult[1]) - 127;
   870  00027C  0E81               	movlw	129
   871  00027E  2455               	addwf	_ADresult+2,w,c
   872  000280  6E48               	movwf	main@intLeftJoystickX,c
   873  000282  0EFF               	movlw	255
   874  000284  2056               	addwfc	_ADresult+3,w,c
   875  000286  6E49               	movwf	main@intLeftJoystickX+1,c
   876                           
   877                           ;main.c: 138: intLeftJoystickY = ((short) ADresult[0]) - 127;
   878  000288  0E81               	movlw	129
   879  00028A  2453               	addwf	_ADresult,w,c
   880  00028C  6E46               	movwf	main@intLeftJoystickY,c
   881  00028E  0EFF               	movlw	255
   882  000290  2054               	addwfc	_ADresult+1,w,c
   883  000292  6E47               	movwf	main@intLeftJoystickY+1,c
   884                           
   885                           ;main.c: 139: intRightJoystickX = ((short) ADresult[3]) - 127;
   886  000294  0E81               	movlw	129
   887  000296  2459               	addwf	_ADresult+6,w,c
   888  000298  6E4C               	movwf	main@intRightJoystickX,c
   889  00029A  0EFF               	movlw	255
   890  00029C  205A               	addwfc	_ADresult+7,w,c
   891  00029E  6E4D               	movwf	main@intRightJoystickX+1,c
   892                           
   893                           ;main.c: 140: intRightJoystickY = ((short) ADresult[2]) - 127;
   894  0002A0  0E81               	movlw	129
   895  0002A2  2457               	addwf	_ADresult+4,w,c
   896  0002A4  6E4A               	movwf	main@intRightJoystickY,c
   897  0002A6  0EFF               	movlw	255
   898  0002A8  2058               	addwfc	_ADresult+5,w,c
   899  0002AA  6E4B               	movwf	main@intRightJoystickY+1,c
   900                           
   901                           ;main.c: 142: convert.integer = intLeftJoystickX;
   902  0002AC  C048  F051         	movff	main@intLeftJoystickX,main@convert
   903  0002B0  C049  F052         	movff	main@intLeftJoystickX+1,main@convert+1
   904                           
   905                           ;main.c: 143: arrTransmitData[3] = convert.byte[0];
   906  0002B4  C051  F039         	movff	main@convert,main@arrTransmitData+3
   907                           
   908                           ;main.c: 144: arrTransmitData[4] = convert.byte[1];
   909  0002B8  C052  F03A         	movff	main@convert+1,main@arrTransmitData+4
   910                           
   911                           ;main.c: 146: convert.integer = intLeftJoystickY;
   912  0002BC  C046  F051         	movff	main@intLeftJoystickY,main@convert
   913  0002C0  C047  F052         	movff	main@intLeftJoystickY+1,main@convert+1
   914                           
   915                           ;main.c: 147: arrTransmitData[5] = convert.byte[0];
   916  0002C4  C051  F03B         	movff	main@convert,main@arrTransmitData+5
   917                           
   918                           ;main.c: 148: arrTransmitData[6] = convert.byte[1];
   919  0002C8  C052  F03C         	movff	main@convert+1,main@arrTransmitData+6
   920                           
   921                           ;main.c: 150: convert.integer = intRightJoystickX;
   922  0002CC  C04C  F051         	movff	main@intRightJoystickX,main@convert
   923  0002D0  C04D  F052         	movff	main@intRightJoystickX+1,main@convert+1
   924                           
   925                           ;main.c: 151: arrTransmitData[7] = convert.byte[0];
   926  0002D4  C051  F03D         	movff	main@convert,main@arrTransmitData+7
   927                           
   928                           ;main.c: 152: arrTransmitData[8] = convert.byte[1];
   929  0002D8  C052  F03E         	movff	main@convert+1,main@arrTransmitData+8
   930                           
   931                           ;main.c: 154: convert.integer = intRightJoystickY;
   932  0002DC  C04A  F051         	movff	main@intRightJoystickY,main@convert
   933  0002E0  C04B  F052         	movff	main@intRightJoystickY+1,main@convert+1
   934                           
   935                           ;main.c: 155: arrTransmitData[9] = convert.byte[0];
   936  0002E4  C051  F03F         	movff	main@convert,main@arrTransmitData+9
   937                           
   938                           ;main.c: 156: arrTransmitData[10] = convert.byte[1];
   939  0002E8  C052  F040         	movff	main@convert+1,main@arrTransmitData+10
   940                           
   941                           ;main.c: 158: arrTransmitData[0] = 0;
   942  0002EC  0E00               	movlw	0
   943  0002EE  6E36               	movwf	main@arrTransmitData,c
   944                           
   945                           ;main.c: 159: arrTransmitData[1] = 145;
   946  0002F0  0E91               	movlw	145
   947  0002F2  6E37               	movwf	main@arrTransmitData+1,c
   948                           
   949                           ;main.c: 160: arrTransmitData[2] = 13;
   950  0002F4  0E0D               	movlw	13
   951  0002F6  6E38               	movwf	main@arrTransmitData+2,c
   952                           
   953                           ;main.c: 162: convert.integer = CRCcalculate(arrTransmitData, arrTransmitData[2]-2);
   954  0002F8  0E36               	movlw	low main@arrTransmitData
   955  0002FA  6E1C               	movwf	CRCcalculate@message,c
   956  0002FC  0E00               	movlw	high main@arrTransmitData
   957  0002FE  6E1D               	movwf	CRCcalculate@message+1,c
   958  000300  5038               	movf	main@arrTransmitData+2,w,c
   959  000302  0FFE               	addlw	254
   960  000304  6E1E               	movwf	CRCcalculate@nBytes,c
   961  000306  ECE1  F002         	call	_CRCcalculate	;wreg free
   962  00030A  C01C  F051         	movff	?_CRCcalculate,main@convert
   963  00030E  C01D  F052         	movff	?_CRCcalculate+1,main@convert+1
   964                           
   965                           ;main.c: 163: arrTransmitData[11] = convert.byte[0];
   966  000312  C051  F041         	movff	main@convert,main@arrTransmitData+11
   967                           
   968                           ;main.c: 164: arrTransmitData[12] = convert.byte[1];
   969  000316  C052  F042         	movff	main@convert+1,main@arrTransmitData+12
   970                           
   971                           ;main.c: 165: packetLength = BuildPacket(arrTransmitData[2], arrTransmitData, arrPacket)
      +                          ;
   972  00031A  0E36               	movlw	low main@arrTransmitData
   973  00031C  6E15               	movwf	BuildPacket@ptrCommandData,c
   974  00031E  0E00               	movlw	high main@arrTransmitData
   975  000320  6E16               	movwf	BuildPacket@ptrCommandData+1,c
   976  000322  0EC0               	movlw	low _arrPacket
   977  000324  6E17               	movwf	BuildPacket@ptrPacket,c
   978  000326  0E00               	movlw	high _arrPacket
   979  000328  6E18               	movwf	BuildPacket@ptrPacket+1,c
   980  00032A  5038               	movf	main@arrTransmitData+2,w,c
   981  00032C  EC09  F002         	call	_BuildPacket
   982  000330  6E4E               	movwf	main@packetLength,c
   983                           
   984                           ;main.c: 166: if (packetLength < 32) for (i = 0; i < packetLength; i++) putch(arrPacket[
      +                          i]);
   985  000332  0E20               	movlw	32
   986  000334  604E               	cpfslt	main@packetLength,c
   987  000336  D783               	goto	l1578
   988  000338  0E00               	movlw	0
   989  00033A  6E4F               	movwf	main@i,c
   990  00033C  D00C               	goto	l1652
   991  00033E                     l1648:
   992  00033E  504F               	movf	main@i,w,c
   993  000340  0D01               	mullw	1
   994  000342  0EC0               	movlw	low _arrPacket
   995  000344  24F3               	addwf	prodl,w,c
   996  000346  6ED9               	movwf	fsr2l,c
   997  000348  0E00               	movlw	high _arrPacket
   998  00034A  20F4               	addwfc	prodh,w,c
   999  00034C  6EDA               	movwf	fsr2h,c
  1000  00034E  50DF               	movf	indf2,w,c
  1001  000350  EC76  F003         	call	_putch
  1002  000354  2A4F               	incf	main@i,f,c
  1003  000356                     l1652:
  1004  000356  504E               	movf	main@packetLength,w,c
  1005  000358  5C4F               	subwf	main@i,w,c
  1006  00035A  B0D8               	btfsc	status,0,c
  1007  00035C  D770               	goto	l1578
  1008  00035E  D7EF               	goto	l1648
  1009  000360                     __end_of_main:
  1010                           	opt stack 0
  1011                           tblptru	equ	0xFF8
  1012                           prodh	equ	0xFF4
  1013                           prodl	equ	0xFF3
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           postdec1	equ	0xFE5
  1017                           fsr1h	equ	0xFE2
  1018                           fsr1l	equ	0xFE1
  1019                           indf2	equ	0xFDF
  1020                           fsr2h	equ	0xFDA
  1021                           fsr2l	equ	0xFD9
  1022                           status	equ	0xFD8
  1023                           
  1024 ;; *************** function _readJoySticks *****************
  1025 ;; Defined at:
  1026 ;;		line 294 in file "../main.c"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;		None
  1029 ;; Auto vars:     Size  Location     Type
  1030 ;;  ADspan          8   37[COMRAM] const unsigned short [4]
  1031 ;;  ADoffset        8   29[COMRAM] const unsigned short [4]
  1032 ;;  joyStickRead    2   51[COMRAM] unsigned short 
  1033 ;;  span            2   49[COMRAM] unsigned short 
  1034 ;;  ADrawReading    2   47[COMRAM] short 
  1035 ;;  offset          2   45[COMRAM] unsigned short 
  1036 ;; Return value:  Size  Location     Type
  1037 ;;                  1    wreg      void 
  1038 ;; Registers used:
  1039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1040 ;; Tracked objects:
  1041 ;;		On entry : 0/0
  1042 ;;		On exit  : 0/0
  1043 ;;		Unchanged: 0/0
  1044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1045 ;;      Params:         0       0       0       0       0       0       0
  1046 ;;      Locals:        24       0       0       0       0       0       0
  1047 ;;      Temps:          2       0       0       0       0       0       0
  1048 ;;      Totals:        26       0       0       0       0       0       0
  1049 ;;Total ram usage:       26 bytes
  1050 ;; Hardware stack levels used:    1
  1051 ;; Hardware stack levels required when called:    2
  1052 ;; This function calls:
  1053 ;;		_ADconvertAndRead
  1054 ;;		_ADsetChannel
  1055 ;;		___lwdiv
  1056 ;;		___wmul
  1057 ;; This function is called by:
  1058 ;;		_main
  1059 ;; This function uses a non-reentrant model
  1060 ;;
  1061                           
  1062                           	psect	text1
  1063  0000BC                     __ptext1:
  1064                           	opt stack 0
  1065  0000BC                     _readJoySticks:
  1066                           	opt stack 28
  1067                           
  1068                           ;main.c: 295: static unsigned char ADchannel = 0;
  1069                           ;main.c: 296: const unsigned short ADoffset[] = {450, 400, 430, 400};
  1070                           
  1071                           ;incstack = 0
  1072  0000BC  0EF7               	movlw	low readJoySticks@F2969
  1073  0000BE  6EF6               	movwf	tblptrl,c
  1074  0000C0                     	if	1	;There is more than 1 active tblptr byte
  1075  0000C0  0E7F               	movlw	high readJoySticks@F2969
  1076  0000C2  6EF7               	movwf	tblptrh,c
  1077  0000C4                     	endif
  1078  0000C4                     	if	0	;There are less than 3 active tblptr bytes
  1079  0000C4                     	endif
  1080  0000C4  EE20  F01E         	lfsr	2,readJoySticks@ADoffset
  1081  0000C8  0E07               	movlw	7
  1082  0000CA                     u700:
  1083  0000CA  0009               	tblrd		*+
  1084  0000CC  CFF5 FFDE          	movff	tablat,postinc2
  1085  0000D0  06E8               	decf	wreg,f,c
  1086  0000D2  E2FB               	bc	u700
  1087                           
  1088                           ;main.c: 297: const unsigned short ADspan[] = {150, 200, 200, 200};
  1089  0000D4  0EEF               	movlw	low readJoySticks@F2971
  1090  0000D6  6EF6               	movwf	tblptrl,c
  1091  0000D8                     	if	1	;There is more than 1 active tblptr byte
  1092  0000D8  0E7F               	movlw	high readJoySticks@F2971
  1093  0000DA  6EF7               	movwf	tblptrh,c
  1094  0000DC                     	endif
  1095  0000DC                     	if	0	;There are less than 3 active tblptr bytes
  1096  0000DC                     	endif
  1097  0000DC  EE20  F026         	lfsr	2,readJoySticks@ADspan
  1098  0000E0  0E07               	movlw	7
  1099  0000E2                     u710:
  1100  0000E2  0009               	tblrd		*+
  1101  0000E4  CFF5 FFDE          	movff	tablat,postinc2
  1102  0000E8  06E8               	decf	wreg,f,c
  1103  0000EA  E2FB               	bc	u710
  1104                           
  1105                           ;main.c: 298: unsigned short joyStickReading, offset, span;
  1106                           ;main.c: 299: short ADrawReading;
  1107                           ;main.c: 301: ADrawReading = ADconvertAndRead();
  1108  0000EC  EC29  F003         	call	_ADconvertAndRead	;wreg free
  1109  0000F0  C00F  F030         	movff	?_ADconvertAndRead,readJoySticks@ADrawReading
  1110  0000F4  C010  F031         	movff	?_ADconvertAndRead+1,readJoySticks@ADrawReading+1
  1111                           
  1112                           ;main.c: 303: if (ADchannel == 0 || ADchannel == 2) joyStickReading = 1023 - ADrawReadin
      +                          g;
  1113  0000F8  505D               	movf	readJoySticks@ADchannel,w,c
  1114  0000FA  B4D8               	btfsc	status,2,c
  1115  0000FC  D004               	goto	l1494
  1116  0000FE  0E02               	movlw	2
  1117  000100  185D               	xorwf	readJoySticks@ADchannel,w,c
  1118  000102  A4D8               	btfss	status,2,c
  1119  000104  D00F               	goto	l134
  1120  000106                     l1494:
  1121  000106  C030  F01C         	movff	readJoySticks@ADrawReading,??_readJoySticks
  1122  00010A  C031  F01D         	movff	readJoySticks@ADrawReading+1,??_readJoySticks+1
  1123  00010E  1E1C               	comf	??_readJoySticks,f,c
  1124  000110  1E1D               	comf	??_readJoySticks+1,f,c
  1125  000112  4A1C               	infsnz	??_readJoySticks,f,c
  1126  000114  2A1D               	incf	??_readJoySticks+1,f,c
  1127  000116  0EFF               	movlw	255
  1128  000118  241C               	addwf	??_readJoySticks,w,c
  1129  00011A  6E34               	movwf	readJoySticks@joyStickReading,c
  1130  00011C  0E03               	movlw	3
  1131  00011E  201D               	addwfc	??_readJoySticks+1,w,c
  1132  000120  6E35               	movwf	readJoySticks@joyStickReading+1,c
  1133  000122  D004               	goto	l1496
  1134  000124                     l134:
  1135                           
  1136                           ;main.c: 304: else joyStickReading = ADrawReading;
  1137  000124  C030  F034         	movff	readJoySticks@ADrawReading,readJoySticks@joyStickReading
  1138  000128  C031  F035         	movff	readJoySticks@ADrawReading+1,readJoySticks@joyStickReading+1
  1139  00012C                     l1496:
  1140                           
  1141                           ;main.c: 306: offset = ADoffset[ADchannel];
  1142  00012C  505D               	movf	readJoySticks@ADchannel,w,c
  1143  00012E  0D02               	mullw	2
  1144  000130  0E1E               	movlw	low readJoySticks@ADoffset
  1145  000132  24F3               	addwf	prodl,w,c
  1146  000134  6ED9               	movwf	fsr2l,c
  1147  000136  0E00               	movlw	high readJoySticks@ADoffset
  1148  000138  20F4               	addwfc	prodh,w,c
  1149  00013A  6EDA               	movwf	fsr2h,c
  1150  00013C  CFDE F02E          	movff	postinc2,readJoySticks@offset
  1151  000140  CFDD F02F          	movff	postdec2,readJoySticks@offset+1
  1152                           
  1153                           ;main.c: 307: span = ADspan[ADchannel];
  1154  000144  505D               	movf	readJoySticks@ADchannel,w,c
  1155  000146  0D02               	mullw	2
  1156  000148  0E26               	movlw	low readJoySticks@ADspan
  1157  00014A  24F3               	addwf	prodl,w,c
  1158  00014C  6ED9               	movwf	fsr2l,c
  1159  00014E  0E00               	movlw	high readJoySticks@ADspan
  1160  000150  20F4               	addwfc	prodh,w,c
  1161  000152  6EDA               	movwf	fsr2h,c
  1162  000154  CFDE F032          	movff	postinc2,readJoySticks@span
  1163  000158  CFDD F033          	movff	postdec2,readJoySticks@span+1
  1164                           
  1165                           ;main.c: 308: if (joyStickReading < offset) joyStickReading = 0;
  1166  00015C  502E               	movf	readJoySticks@offset,w,c
  1167  00015E  5C34               	subwf	readJoySticks@joyStickReading,w,c
  1168  000160  502F               	movf	readJoySticks@offset+1,w,c
  1169  000162  5835               	subwfb	readJoySticks@joyStickReading+1,w,c
  1170  000164  B0D8               	btfsc	status,0,c
  1171  000166  D005               	goto	l1502
  1172  000168  0E00               	movlw	0
  1173  00016A  6E35               	movwf	readJoySticks@joyStickReading+1,c
  1174  00016C  0E00               	movlw	0
  1175  00016E  6E34               	movwf	readJoySticks@joyStickReading,c
  1176  000170  D00E               	goto	l139
  1177  000172                     l1502:
  1178                           
  1179                           ;main.c: 309: else joyStickReading = joyStickReading - offset;
  1180  000172  C02E  F01C         	movff	readJoySticks@offset,??_readJoySticks
  1181  000176  C02F  F01D         	movff	readJoySticks@offset+1,??_readJoySticks+1
  1182  00017A  1E1C               	comf	??_readJoySticks,f,c
  1183  00017C  1E1D               	comf	??_readJoySticks+1,f,c
  1184  00017E  4A1C               	infsnz	??_readJoySticks,f,c
  1185  000180  2A1D               	incf	??_readJoySticks+1,f,c
  1186  000182  5034               	movf	readJoySticks@joyStickReading,w,c
  1187  000184  241C               	addwf	??_readJoySticks,w,c
  1188  000186  6E34               	movwf	readJoySticks@joyStickReading,c
  1189  000188  5035               	movf	readJoySticks@joyStickReading+1,w,c
  1190  00018A  201D               	addwfc	??_readJoySticks+1,w,c
  1191  00018C  6E35               	movwf	readJoySticks@joyStickReading+1,c
  1192  00018E                     l139:
  1193                           
  1194                           ;main.c: 310: if (joyStickReading > span) joyStickReading = span;
  1195  00018E  5034               	movf	readJoySticks@joyStickReading,w,c
  1196  000190  5C32               	subwf	readJoySticks@span,w,c
  1197  000192  5035               	movf	readJoySticks@joyStickReading+1,w,c
  1198  000194  5833               	subwfb	readJoySticks@span+1,w,c
  1199  000196  B0D8               	btfsc	status,0,c
  1200  000198  D004               	goto	l1506
  1201  00019A  C032  F034         	movff	readJoySticks@span,readJoySticks@joyStickReading
  1202  00019E  C033  F035         	movff	readJoySticks@span+1,readJoySticks@joyStickReading+1
  1203  0001A2                     l1506:
  1204                           
  1205                           ;main.c: 312: ADresult[ADchannel] = (joyStickReading * 255) / span;
  1206  0001A2  C034  F00F         	movff	readJoySticks@joyStickReading,___wmul@multiplier
  1207  0001A6  C035  F010         	movff	readJoySticks@joyStickReading+1,___wmul@multiplier+1
  1208  0001AA  0E00               	movlw	0
  1209  0001AC  6E12               	movwf	___wmul@multiplicand+1,c
  1210  0001AE  6811               	setf	___wmul@multiplicand,c
  1211  0001B0  EC59  F003         	call	___wmul	;wreg free
  1212  0001B4  C00F  F015         	movff	?___wmul,___lwdiv@dividend
  1213  0001B8  C010  F016         	movff	?___wmul+1,___lwdiv@dividend+1
  1214  0001BC  C032  F017         	movff	readJoySticks@span,___lwdiv@divisor
  1215  0001C0  C033  F018         	movff	readJoySticks@span+1,___lwdiv@divisor+1
  1216  0001C4  ECB8  F002         	call	___lwdiv	;wreg free
  1217  0001C8  505D               	movf	readJoySticks@ADchannel,w,c
  1218  0001CA  0D02               	mullw	2
  1219  0001CC  0E53               	movlw	low _ADresult
  1220  0001CE  24F3               	addwf	prodl,w,c
  1221  0001D0  6ED9               	movwf	fsr2l,c
  1222  0001D2  0E00               	movlw	high _ADresult
  1223  0001D4  20F4               	addwfc	prodh,w,c
  1224  0001D6  6EDA               	movwf	fsr2h,c
  1225  0001D8  C015  FFDE         	movff	?___lwdiv,postinc2
  1226  0001DC  C016  FFDD         	movff	?___lwdiv+1,postdec2
  1227                           
  1228                           ;main.c: 313: if (ADresult[ADchannel] > 255) ADresult[ADchannel] = 255;
  1229  0001E0  505D               	movf	readJoySticks@ADchannel,w,c
  1230  0001E2  0D02               	mullw	2
  1231  0001E4  0E53               	movlw	low _ADresult
  1232  0001E6  24F3               	addwf	prodl,w,c
  1233  0001E8  6ED9               	movwf	fsr2l,c
  1234  0001EA  0E00               	movlw	high _ADresult
  1235  0001EC  20F4               	addwfc	prodh,w,c
  1236  0001EE  6EDA               	movwf	fsr2h,c
  1237  0001F0  52DE               	movf	postinc2,f,c
  1238  0001F2  04DE               	decf	postinc2,w,c
  1239  0001F4  A0D8               	btfss	status,0,c
  1240  0001F6  D00C               	goto	l1512
  1241  0001F8  505D               	movf	readJoySticks@ADchannel,w,c
  1242  0001FA  0D02               	mullw	2
  1243  0001FC  0E53               	movlw	low _ADresult
  1244  0001FE  24F3               	addwf	prodl,w,c
  1245  000200  6ED9               	movwf	fsr2l,c
  1246  000202  0E00               	movlw	high _ADresult
  1247  000204  20F4               	addwfc	prodh,w,c
  1248  000206  6EDA               	movwf	fsr2h,c
  1249  000208  0EFF               	movlw	255
  1250  00020A  6EDE               	movwf	postinc2,c
  1251  00020C  0E00               	movlw	0
  1252  00020E  6EDD               	movwf	postdec2,c
  1253  000210                     l1512:
  1254                           
  1255                           ;main.c: 315: ADchannel++;
  1256  000210  2A5D               	incf	readJoySticks@ADchannel,f,c
  1257                           
  1258                           ;main.c: 316: if (ADchannel >= 4) ADchannel = 0;
  1259  000212  0E03               	movlw	3
  1260  000214  645D               	cpfsgt	readJoySticks@ADchannel,c
  1261  000216  D002               	goto	l1518
  1262  000218  0E00               	movlw	0
  1263  00021A  6E5D               	movwf	readJoySticks@ADchannel,c
  1264  00021C                     l1518:
  1265                           
  1266                           ;main.c: 317: ADsetChannel(ADchannel);
  1267  00021C  505D               	movf	readJoySticks@ADchannel,w,c
  1268  00021E  EC6C  F003         	call	_ADsetChannel
  1269  000222  0012               	return		;funcret
  1270  000224                     __end_of_readJoySticks:
  1271                           	opt stack 0
  1272                           tblptru	equ	0xFF8
  1273                           tblptrh	equ	0xFF7
  1274                           tblptrl	equ	0xFF6
  1275                           tablat	equ	0xFF5
  1276                           prodh	equ	0xFF4
  1277                           prodl	equ	0xFF3
  1278                           postinc0	equ	0xFEE
  1279                           wreg	equ	0xFE8
  1280                           postdec1	equ	0xFE5
  1281                           fsr1h	equ	0xFE2
  1282                           fsr1l	equ	0xFE1
  1283                           indf2	equ	0xFDF
  1284                           postinc2	equ	0xFDE
  1285                           postdec2	equ	0xFDD
  1286                           fsr2h	equ	0xFDA
  1287                           fsr2l	equ	0xFD9
  1288                           status	equ	0xFD8
  1289                           
  1290 ;; *************** function ___wmul *****************
  1291 ;; Defined at:
  1292 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1293 ;; Parameters:    Size  Location     Type
  1294 ;;  multiplier      2   14[COMRAM] unsigned int 
  1295 ;;  multiplicand    2   16[COMRAM] unsigned int 
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;  product         2   18[COMRAM] unsigned int 
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  2   14[COMRAM] unsigned int 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2, status,0, prodl, prodh
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1307 ;;      Params:         4       0       0       0       0       0       0
  1308 ;;      Locals:         2       0       0       0       0       0       0
  1309 ;;      Temps:          0       0       0       0       0       0       0
  1310 ;;      Totals:         6       0       0       0       0       0       0
  1311 ;;Total ram usage:        6 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; Hardware stack levels required when called:    1
  1314 ;; This function calls:
  1315 ;;		Nothing
  1316 ;; This function is called by:
  1317 ;;		_readJoySticks
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text2
  1322  0006B2                     __ptext2:
  1323                           	opt stack 0
  1324  0006B2                     ___wmul:
  1325                           	opt stack 28
  1326                           
  1327                           ;incstack = 0
  1328  0006B2  500F               	movf	___wmul@multiplier,w,c
  1329  0006B4  0211               	mulwf	___wmul@multiplicand,c
  1330  0006B6  CFF3 F013          	movff	prodl,___wmul@product
  1331  0006BA  CFF4 F014          	movff	prodh,___wmul@product+1
  1332  0006BE  500F               	movf	___wmul@multiplier,w,c
  1333  0006C0  0212               	mulwf	___wmul@multiplicand+1,c
  1334  0006C2  50F3               	movf	prodl,w,c
  1335  0006C4  2614               	addwf	___wmul@product+1,f,c
  1336  0006C6  5010               	movf	___wmul@multiplier+1,w,c
  1337  0006C8  0211               	mulwf	___wmul@multiplicand,c
  1338  0006CA  50F3               	movf	prodl,w,c
  1339  0006CC  2614               	addwf	___wmul@product+1,f,c
  1340  0006CE  C013  F00F         	movff	___wmul@product,?___wmul
  1341  0006D2  C014  F010         	movff	___wmul@product+1,?___wmul+1
  1342  0006D6  0012               	return	
  1343  0006D8                     __end_of___wmul:
  1344                           	opt stack 0
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           prodh	equ	0xFF4
  1350                           prodl	equ	0xFF3
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1h	equ	0xFE2
  1355                           fsr1l	equ	0xFE1
  1356                           indf2	equ	0xFDF
  1357                           postinc2	equ	0xFDE
  1358                           postdec2	equ	0xFDD
  1359                           fsr2h	equ	0xFDA
  1360                           fsr2l	equ	0xFD9
  1361                           status	equ	0xFD8
  1362                           
  1363 ;; *************** function ___lwdiv *****************
  1364 ;; Defined at:
  1365 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  dividend        2   20[COMRAM] unsigned int 
  1368 ;;  divisor         2   22[COMRAM] unsigned int 
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  quotient        2   24[COMRAM] unsigned int 
  1371 ;;  counter         1   26[COMRAM] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  2   20[COMRAM] unsigned int 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1381 ;;      Params:         4       0       0       0       0       0       0
  1382 ;;      Locals:         3       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0
  1384 ;;      Totals:         7       0       0       0       0       0       0
  1385 ;;Total ram usage:        7 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    1
  1388 ;; This function calls:
  1389 ;;		Nothing
  1390 ;; This function is called by:
  1391 ;;		_readJoySticks
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text3
  1396  000570                     __ptext3:
  1397                           	opt stack 0
  1398  000570                     ___lwdiv:
  1399                           	opt stack 28
  1400                           
  1401                           ;incstack = 0
  1402  000570  0E00               	movlw	0
  1403  000572  6E1A               	movwf	___lwdiv@quotient+1,c
  1404  000574  0E00               	movlw	0
  1405  000576  6E19               	movwf	___lwdiv@quotient,c
  1406  000578  5017               	movf	___lwdiv@divisor,w,c
  1407  00057A  1018               	iorwf	___lwdiv@divisor+1,w,c
  1408  00057C  B4D8               	btfsc	status,2,c
  1409  00057E  D01C               	goto	l631
  1410  000580  0E01               	movlw	1
  1411  000582  6E1B               	movwf	___lwdiv@counter,c
  1412  000584  D004               	goto	l1374
  1413  000586                     l1372:
  1414  000586  90D8               	bcf	status,0,c
  1415  000588  3617               	rlcf	___lwdiv@divisor,f,c
  1416  00058A  3618               	rlcf	___lwdiv@divisor+1,f,c
  1417  00058C  2A1B               	incf	___lwdiv@counter,f,c
  1418  00058E                     l1374:
  1419  00058E  AE18               	btfss	___lwdiv@divisor+1,7,c
  1420  000590  D7FA               	goto	l1372
  1421  000592                     l1376:
  1422  000592  90D8               	bcf	status,0,c
  1423  000594  3619               	rlcf	___lwdiv@quotient,f,c
  1424  000596  361A               	rlcf	___lwdiv@quotient+1,f,c
  1425  000598  5017               	movf	___lwdiv@divisor,w,c
  1426  00059A  5C15               	subwf	___lwdiv@dividend,w,c
  1427  00059C  5018               	movf	___lwdiv@divisor+1,w,c
  1428  00059E  5816               	subwfb	___lwdiv@dividend+1,w,c
  1429  0005A0  A0D8               	btfss	status,0,c
  1430  0005A2  D005               	goto	l1384
  1431  0005A4  5017               	movf	___lwdiv@divisor,w,c
  1432  0005A6  5E15               	subwf	___lwdiv@dividend,f,c
  1433  0005A8  5018               	movf	___lwdiv@divisor+1,w,c
  1434  0005AA  5A16               	subwfb	___lwdiv@dividend+1,f,c
  1435  0005AC  8019               	bsf	___lwdiv@quotient,0,c
  1436  0005AE                     l1384:
  1437  0005AE  90D8               	bcf	status,0,c
  1438  0005B0  3218               	rrcf	___lwdiv@divisor+1,f,c
  1439  0005B2  3217               	rrcf	___lwdiv@divisor,f,c
  1440  0005B4  2E1B               	decfsz	___lwdiv@counter,f,c
  1441  0005B6  D7ED               	goto	l1376
  1442  0005B8                     l631:
  1443  0005B8  C019  F015         	movff	___lwdiv@quotient,?___lwdiv
  1444  0005BC  C01A  F016         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1445  0005C0  0012               	return		;funcret
  1446  0005C2                     __end_of___lwdiv:
  1447                           	opt stack 0
  1448                           tblptru	equ	0xFF8
  1449                           tblptrh	equ	0xFF7
  1450                           tblptrl	equ	0xFF6
  1451                           tablat	equ	0xFF5
  1452                           prodh	equ	0xFF4
  1453                           prodl	equ	0xFF3
  1454                           postinc0	equ	0xFEE
  1455                           wreg	equ	0xFE8
  1456                           postdec1	equ	0xFE5
  1457                           fsr1h	equ	0xFE2
  1458                           fsr1l	equ	0xFE1
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           postdec2	equ	0xFDD
  1462                           fsr2h	equ	0xFDA
  1463                           fsr2l	equ	0xFD9
  1464                           status	equ	0xFD8
  1465                           
  1466 ;; *************** function _ADsetChannel *****************
  1467 ;; Defined at:
  1468 ;;		line 279 in file "../main.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;  channel         1    wreg     unsigned char 
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;  channel         1   15[COMRAM] unsigned char 
  1473 ;; Return value:  Size  Location     Type
  1474 ;;                  1    wreg      void 
  1475 ;; Registers used:
  1476 ;;		wreg, status,2, status,0
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1482 ;;      Params:         0       0       0       0       0       0       0
  1483 ;;      Locals:         1       0       0       0       0       0       0
  1484 ;;      Temps:          1       0       0       0       0       0       0
  1485 ;;      Totals:         2       0       0       0       0       0       0
  1486 ;;Total ram usage:        2 bytes
  1487 ;; Hardware stack levels used:    1
  1488 ;; Hardware stack levels required when called:    1
  1489 ;; This function calls:
  1490 ;;		Nothing
  1491 ;; This function is called by:
  1492 ;;		_readJoySticks
  1493 ;; This function uses a non-reentrant model
  1494 ;;
  1495                           
  1496                           	psect	text4
  1497  0006D8                     __ptext4:
  1498                           	opt stack 0
  1499  0006D8                     _ADsetChannel:
  1500                           	opt stack 28
  1501                           
  1502                           ;incstack = 0
  1503                           ;ADsetChannel@channel stored from wreg
  1504  0006D8  6E10               	movwf	ADsetChannel@channel,c
  1505                           
  1506                           ;main.c: 280: ADCON0 = (channel << 2) + 0x01;
  1507  0006DA  C010  F00F         	movff	ADsetChannel@channel,??_ADsetChannel
  1508  0006DE  90D8               	bcf	status,0,c
  1509  0006E0  360F               	rlcf	??_ADsetChannel,f,c
  1510  0006E2  90D8               	bcf	status,0,c
  1511  0006E4  360F               	rlcf	??_ADsetChannel,f,c
  1512  0006E6  280F               	incf	??_ADsetChannel,w,c
  1513  0006E8  6EC2               	movwf	4034,c	;volatile
  1514  0006EA  0012               	return		;funcret
  1515  0006EC                     __end_of_ADsetChannel:
  1516                           	opt stack 0
  1517                           tblptru	equ	0xFF8
  1518                           tblptrh	equ	0xFF7
  1519                           tblptrl	equ	0xFF6
  1520                           tablat	equ	0xFF5
  1521                           prodh	equ	0xFF4
  1522                           prodl	equ	0xFF3
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           postdec1	equ	0xFE5
  1526                           fsr1h	equ	0xFE2
  1527                           fsr1l	equ	0xFE1
  1528                           indf2	equ	0xFDF
  1529                           postinc2	equ	0xFDE
  1530                           postdec2	equ	0xFDD
  1531                           fsr2h	equ	0xFDA
  1532                           fsr2l	equ	0xFD9
  1533                           status	equ	0xFD8
  1534                           
  1535 ;; *************** function _ADconvertAndRead *****************
  1536 ;; Defined at:
  1537 ;;		line 283 in file "../main.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;		None
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  highByte        2   20[COMRAM] unsigned short 
  1542 ;;  ADvalue         2   18[COMRAM] short 
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  2   14[COMRAM] short 
  1545 ;; Registers used:
  1546 ;;		wreg, status,2, status,0
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1552 ;;      Params:         2       0       0       0       0       0       0
  1553 ;;      Locals:         4       0       0       0       0       0       0
  1554 ;;      Temps:          2       0       0       0       0       0       0
  1555 ;;      Totals:         8       0       0       0       0       0       0
  1556 ;;Total ram usage:        8 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    1
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		_readJoySticks
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text5
  1567  000652                     __ptext5:
  1568                           	opt stack 0
  1569  000652                     _ADconvertAndRead:
  1570                           	opt stack 28
  1571                           
  1572                           ;main.c: 284: unsigned short highByte;
  1573                           ;main.c: 285: short ADvalue;
  1574                           ;main.c: 286: ADCON0bits.GO_DONE = 1;
  1575                           
  1576                           ;incstack = 0
  1577  000652  82C2               	bsf	4034,1,c	;volatile
  1578  000654                     l122:
  1579  000654  B2C2               	btfsc	4034,1,c	;volatile
  1580  000656  D7FE               	goto	l122
  1581                           
  1582                           ;main.c: 288: highByte = (unsigned short) ADRESH;
  1583  000658  CFC4 F015          	movff	4036,ADconvertAndRead@highByte	;volatile
  1584  00065C  6A16               	clrf	ADconvertAndRead@highByte+1,c
  1585                           
  1586                           ;main.c: 289: highByte = (highByte << 8) & 0b001100000000;
  1587  00065E  5015               	movf	ADconvertAndRead@highByte,w,c
  1588  000660  6E12               	movwf	(??_ADconvertAndRead+1)& (0+255),c
  1589  000662  6A11               	clrf	??_ADconvertAndRead& (0+255),c
  1590  000664  0E00               	movlw	0
  1591  000666  1411               	andwf	??_ADconvertAndRead,w,c
  1592  000668  6E15               	movwf	ADconvertAndRead@highByte,c
  1593  00066A  0E03               	movlw	3
  1594  00066C  1412               	andwf	??_ADconvertAndRead+1,w,c
  1595  00066E  6E16               	movwf	ADconvertAndRead@highByte+1,c
  1596                           
  1597                           ;main.c: 290: ADvalue = (short) (highByte | ADRESL);
  1598  000670  5015               	movf	ADconvertAndRead@highByte,w,c
  1599  000672  10C3               	iorwf	4035,w,c	;volatile
  1600  000674  6E13               	movwf	ADconvertAndRead@ADvalue,c
  1601  000676  5016               	movf	ADconvertAndRead@highByte+1,w,c
  1602  000678  6E14               	movwf	ADconvertAndRead@ADvalue+1,c
  1603                           
  1604                           ;main.c: 291: return (ADvalue);
  1605  00067A  C013  F00F         	movff	ADconvertAndRead@ADvalue,?_ADconvertAndRead
  1606  00067E  C014  F010         	movff	ADconvertAndRead@ADvalue+1,?_ADconvertAndRead+1
  1607  000682  0012               	return	
  1608  000684                     __end_of_ADconvertAndRead:
  1609                           	opt stack 0
  1610                           tblptru	equ	0xFF8
  1611                           tblptrh	equ	0xFF7
  1612                           tblptrl	equ	0xFF6
  1613                           tablat	equ	0xFF5
  1614                           prodh	equ	0xFF4
  1615                           prodl	equ	0xFF3
  1616                           postinc0	equ	0xFEE
  1617                           wreg	equ	0xFE8
  1618                           postdec1	equ	0xFE5
  1619                           fsr1h	equ	0xFE2
  1620                           fsr1l	equ	0xFE1
  1621                           indf2	equ	0xFDF
  1622                           postinc2	equ	0xFDE
  1623                           postdec2	equ	0xFDD
  1624                           fsr2h	equ	0xFDA
  1625                           fsr2l	equ	0xFD9
  1626                           status	equ	0xFD8
  1627                           
  1628 ;; *************** function _putch *****************
  1629 ;; Defined at:
  1630 ;;		line 271 in file "../main.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  TxByte          1    wreg     unsigned char 
  1633 ;; Auto vars:     Size  Location     Type
  1634 ;;  TxByte          1   14[COMRAM] unsigned char 
  1635 ;; Return value:  Size  Location     Type
  1636 ;;                  1    wreg      void 
  1637 ;; Registers used:
  1638 ;;		wreg
  1639 ;; Tracked objects:
  1640 ;;		On entry : 0/0
  1641 ;;		On exit  : 0/0
  1642 ;;		Unchanged: 0/0
  1643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1644 ;;      Params:         0       0       0       0       0       0       0
  1645 ;;      Locals:         1       0       0       0       0       0       0
  1646 ;;      Temps:          0       0       0       0       0       0       0
  1647 ;;      Totals:         1       0       0       0       0       0       0
  1648 ;;Total ram usage:        1 bytes
  1649 ;; Hardware stack levels used:    1
  1650 ;; Hardware stack levels required when called:    1
  1651 ;; This function calls:
  1652 ;;		Nothing
  1653 ;; This function is called by:
  1654 ;;		_main
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text6
  1659  0006EC                     __ptext6:
  1660                           	opt stack 0
  1661  0006EC                     _putch:
  1662                           	opt stack 29
  1663                           
  1664                           ;incstack = 0
  1665                           ;putch@TxByte stored from wreg
  1666  0006EC  6E0F               	movwf	putch@TxByte,c
  1667  0006EE                     l113:
  1668  0006EE  A89E               	btfss	3998,4,c	;volatile
  1669  0006F0  D7FE               	goto	l113
  1670                           
  1671                           ;main.c: 273: TXREG = TxByte;
  1672  0006F2  C00F  FFAD         	movff	putch@TxByte,4013	;volatile
  1673  0006F6  0012               	return	
  1674  0006F8                     __end_of_putch:
  1675                           	opt stack 0
  1676                           tblptru	equ	0xFF8
  1677                           tblptrh	equ	0xFF7
  1678                           tblptrl	equ	0xFF6
  1679                           tablat	equ	0xFF5
  1680                           prodh	equ	0xFF4
  1681                           prodl	equ	0xFF3
  1682                           postinc0	equ	0xFEE
  1683                           wreg	equ	0xFE8
  1684                           postdec1	equ	0xFE5
  1685                           fsr1h	equ	0xFE2
  1686                           fsr1l	equ	0xFE1
  1687                           indf2	equ	0xFDF
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _init *****************
  1695 ;; Defined at:
  1696 ;;		line 171 in file "../main.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;		None
  1701 ;; Return value:  Size  Location     Type
  1702 ;;                  1    wreg      void 
  1703 ;; Registers used:
  1704 ;;		wreg, status,2
  1705 ;; Tracked objects:
  1706 ;;		On entry : 0/0
  1707 ;;		On exit  : 0/0
  1708 ;;		Unchanged: 0/0
  1709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1710 ;;      Params:         0       0       0       0       0       0       0
  1711 ;;      Locals:         0       0       0       0       0       0       0
  1712 ;;      Temps:          0       0       0       0       0       0       0
  1713 ;;      Totals:         0       0       0       0       0       0       0
  1714 ;;Total ram usage:        0 bytes
  1715 ;; Hardware stack levels used:    1
  1716 ;; Hardware stack levels required when called:    1
  1717 ;; This function calls:
  1718 ;;		Nothing
  1719 ;; This function is called by:
  1720 ;;		_main
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           	psect	text7
  1725  000492                     __ptext7:
  1726                           	opt stack 0
  1727  000492                     _init:
  1728                           	opt stack 29
  1729                           
  1730                           ;main.c: 172: INTCONbits.GIE = 0;
  1731                           
  1732                           ;incstack = 0
  1733  000492  9EF2               	bcf	intcon,7,c	;volatile
  1734                           
  1735                           ;main.c: 175: ADCON0 = 0b00000000;
  1736  000494  0E00               	movlw	0
  1737  000496  6EC2               	movwf	4034,c	;volatile
  1738                           
  1739                           ;main.c: 178: ADCON1bits.VCFG0 = 0;
  1740  000498  98C1               	bcf	4033,4,c	;volatile
  1741                           
  1742                           ;main.c: 179: ADCON1bits.VCFG1 = 0;
  1743  00049A  9AC1               	bcf	4033,5,c	;volatile
  1744                           
  1745                           ;main.c: 180: ADCON1bits.PCFG3 = 1;
  1746  00049C  86C1               	bsf	4033,3,c	;volatile
  1747                           
  1748                           ;main.c: 181: ADCON1bits.PCFG2 = 0;
  1749  00049E  94C1               	bcf	4033,2,c	;volatile
  1750                           
  1751                           ;main.c: 182: ADCON1bits.PCFG1 = 1;
  1752  0004A0  82C1               	bsf	4033,1,c	;volatile
  1753                           
  1754                           ;main.c: 183: ADCON1bits.PCFG0 = 1;
  1755  0004A2  80C1               	bsf	4033,0,c	;volatile
  1756                           
  1757                           ;main.c: 185: ADCON2 = 0;
  1758  0004A4  0E00               	movlw	0
  1759  0004A6  6EC0               	movwf	4032,c	;volatile
  1760                           
  1761                           ;main.c: 186: ADCON2bits.ADFM = 1;
  1762  0004A8  8EC0               	bsf	4032,7,c	;volatile
  1763                           
  1764                           ;main.c: 188: ADCON2bits.ACQT2 = 1;
  1765  0004AA  8AC0               	bsf	4032,5,c	;volatile
  1766                           
  1767                           ;main.c: 189: ADCON2bits.ACQT1 = 1;
  1768  0004AC  88C0               	bsf	4032,4,c	;volatile
  1769                           
  1770                           ;main.c: 190: ADCON2bits.ACQT0 = 1;
  1771  0004AE  86C0               	bsf	4032,3,c	;volatile
  1772                           
  1773                           ;main.c: 192: ADCON2bits.ADCS2 = 1;
  1774  0004B0  84C0               	bsf	4032,2,c	;volatile
  1775                           
  1776                           ;main.c: 193: ADCON2bits.ADCS1 = 1;
  1777  0004B2  82C0               	bsf	4032,1,c	;volatile
  1778                           
  1779                           ;main.c: 194: ADCON2bits.ADCS0 = 1;
  1780  0004B4  80C0               	bsf	4032,0,c	;volatile
  1781                           
  1782                           ;main.c: 195: TRISA = 0b11011111;
  1783  0004B6  0EDF               	movlw	223
  1784  0004B8  6E92               	movwf	3986,c	;volatile
  1785                           
  1786                           ;main.c: 196: PORTAbits.RA5 = 1;
  1787  0004BA  8A80               	bsf	3968,5,c	;volatile
  1788                           
  1789                           ;main.c: 199: TRISB = 0b11111000;
  1790  0004BC  0EF8               	movlw	248
  1791  0004BE  6E93               	movwf	3987,c	;volatile
  1792                           
  1793                           ;main.c: 200: INTCON2bits.RBPU = 0;
  1794  0004C0  9EF1               	bcf	intcon2,7,c	;volatile
  1795                           
  1796                           ;main.c: 201: TRISC = 0b10111111;
  1797  0004C2  0EBF               	movlw	191
  1798  0004C4  6E94               	movwf	3988,c	;volatile
  1799                           
  1800                           ;main.c: 204: TXSTAbits.BRGH = 1;
  1801  0004C6  84AC               	bsf	4012,2,c	;volatile
  1802                           
  1803                           ;main.c: 205: SPBRG = 19;
  1804  0004C8  0E13               	movlw	19
  1805  0004CA  6EAF               	movwf	4015,c	;volatile
  1806                           
  1807                           ;main.c: 206: TXSTAbits.SYNC = 0;
  1808  0004CC  98AC               	bcf	4012,4,c	;volatile
  1809                           
  1810                           ;main.c: 207: RCSTAbits.SPEN = 1;
  1811  0004CE  8EAB               	bsf	4011,7,c	;volatile
  1812                           
  1813                           ;main.c: 208: RCSTAbits.CREN = 1;
  1814  0004D0  88AB               	bsf	4011,4,c	;volatile
  1815                           
  1816                           ;main.c: 209: RCSTAbits.SREN = 0;
  1817  0004D2  9AAB               	bcf	4011,5,c	;volatile
  1818                           
  1819                           ;main.c: 210: PIE1bits.TXIE = 0;
  1820  0004D4  989D               	bcf	3997,4,c	;volatile
  1821                           
  1822                           ;main.c: 211: PIE1bits.RCIE = 0;
  1823  0004D6  9A9D               	bcf	3997,5,c	;volatile
  1824                           
  1825                           ;main.c: 212: TXSTAbits.TX9 = 0;
  1826  0004D8  9CAC               	bcf	4012,6,c	;volatile
  1827                           
  1828                           ;main.c: 213: RCSTAbits.RX9 = 0;
  1829  0004DA  9CAB               	bcf	4011,6,c	;volatile
  1830                           
  1831                           ;main.c: 214: TXSTAbits.TXEN = 1;
  1832  0004DC  8AAC               	bsf	4012,5,c	;volatile
  1833                           
  1834                           ;main.c: 215: BAUDCONbits.TXCKP = 0;
  1835  0004DE  98B8               	bcf	4024,4,c	;volatile
  1836                           
  1837                           ;main.c: 216: BAUDCONbits.RXDTP = 0;
  1838  0004E0  9AB8               	bcf	4024,5,c	;volatile
  1839                           
  1840                           ;main.c: 219: PR2 = 72;
  1841  0004E2  0E48               	movlw	72
  1842  0004E4  6ECB               	movwf	4043,c	;volatile
  1843                           
  1844                           ;main.c: 220: T2CON = 0x00;
  1845  0004E6  0E00               	movlw	0
  1846  0004E8  6ECA               	movwf	4042,c	;volatile
  1847                           
  1848                           ;main.c: 221: T2CONbits.T2CKPS1 = 0;
  1849  0004EA  92CA               	bcf	4042,1,c	;volatile
  1850                           
  1851                           ;main.c: 222: T2CONbits.T2CKPS0 = 1;
  1852  0004EC  80CA               	bsf	4042,0,c	;volatile
  1853                           
  1854                           ;main.c: 223: T2CONbits.T2OUTPS3 = 1;
  1855  0004EE  8CCA               	bsf	4042,6,c	;volatile
  1856                           
  1857                           ;main.c: 224: T2CONbits.T2OUTPS2 = 1;
  1858  0004F0  8ACA               	bsf	4042,5,c	;volatile
  1859                           
  1860                           ;main.c: 225: T2CONbits.T2OUTPS1 = 1;
  1861  0004F2  88CA               	bsf	4042,4,c	;volatile
  1862                           
  1863                           ;main.c: 226: T2CONbits.T2OUTPS0 = 1;
  1864  0004F4  86CA               	bsf	4042,3,c	;volatile
  1865                           
  1866                           ;main.c: 227: T2CONbits.TMR2ON = 1;
  1867  0004F6  84CA               	bsf	4042,2,c	;volatile
  1868                           
  1869                           ;main.c: 230: INTCON = 0x00;
  1870  0004F8  0E00               	movlw	0
  1871  0004FA  6EF2               	movwf	intcon,c	;volatile
  1872                           
  1873                           ;main.c: 231: INTCONbits.INT0IE = 0;
  1874  0004FC  98F2               	bcf	intcon,4,c	;volatile
  1875                           
  1876                           ;main.c: 232: INTCONbits.RBIE = 0;
  1877  0004FE  96F2               	bcf	intcon,3,c	;volatile
  1878                           
  1879                           ;main.c: 233: PIE1bits.TMR2IE = 1;
  1880  000500  829D               	bsf	3997,1,c	;volatile
  1881                           
  1882                           ;main.c: 234: INTCONbits.PEIE = 1;
  1883  000502  8CF2               	bsf	intcon,6,c	;volatile
  1884                           
  1885                           ;main.c: 236: INTCON2 = 0x00;
  1886  000504  0E00               	movlw	0
  1887  000506  6EF1               	movwf	intcon2,c	;volatile
  1888                           
  1889                           ;main.c: 237: INTCON2bits.RBPU = 0;
  1890  000508  9EF1               	bcf	intcon2,7,c	;volatile
  1891                           
  1892                           ;main.c: 238: INTCON2bits.INTEDG0 = 0;
  1893  00050A  9CF1               	bcf	intcon2,6,c	;volatile
  1894                           
  1895                           ;main.c: 239: INTCONbits.GIE = 1;
  1896  00050C  8EF2               	bsf	intcon,7,c	;volatile
  1897  00050E  0012               	return		;funcret
  1898  000510                     __end_of_init:
  1899                           	opt stack 0
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           prodh	equ	0xFF4
  1905                           prodl	equ	0xFF3
  1906                           intcon	equ	0xFF2
  1907                           intcon2	equ	0xFF1
  1908                           postinc0	equ	0xFEE
  1909                           wreg	equ	0xFE8
  1910                           postdec1	equ	0xFE5
  1911                           fsr1h	equ	0xFE2
  1912                           fsr1l	equ	0xFE1
  1913                           indf2	equ	0xFDF
  1914                           postinc2	equ	0xFDE
  1915                           postdec2	equ	0xFDD
  1916                           fsr2h	equ	0xFDA
  1917                           fsr2l	equ	0xFD9
  1918                           status	equ	0xFD8
  1919                           
  1920 ;; *************** function _DelayMs *****************
  1921 ;; Defined at:
  1922 ;;		line 13 in file "../delay.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;  count           2   14[COMRAM] unsigned short 
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  downCount       1   17[COMRAM] unsigned char 
  1927 ;;  i               1   16[COMRAM] unsigned char 
  1928 ;; Return value:  Size  Location     Type
  1929 ;;                  1    wreg      void 
  1930 ;; Registers used:
  1931 ;;		wreg, status,2, status,0
  1932 ;; Tracked objects:
  1933 ;;		On entry : 0/0
  1934 ;;		On exit  : 0/0
  1935 ;;		Unchanged: 0/0
  1936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1937 ;;      Params:         2       0       0       0       0       0       0
  1938 ;;      Locals:         2       0       0       0       0       0       0
  1939 ;;      Temps:          0       0       0       0       0       0       0
  1940 ;;      Totals:         4       0       0       0       0       0       0
  1941 ;;Total ram usage:        4 bytes
  1942 ;; Hardware stack levels used:    1
  1943 ;; Hardware stack levels required when called:    1
  1944 ;; This function calls:
  1945 ;;		Nothing
  1946 ;; This function is called by:
  1947 ;;		_main
  1948 ;; This function uses a non-reentrant model
  1949 ;;
  1950                           
  1951                           	psect	text8
  1952  000684                     __ptext8:
  1953                           	opt stack 0
  1954  000684                     _DelayMs:
  1955                           	opt stack 29
  1956                           
  1957                           ;delay.c: 14: unsigned char i;
  1958                           ;delay.c: 15: while (count--) {
  1959                           
  1960                           ;incstack = 0
  1961  000684  D00D               	goto	l1484
  1962  000686                     l1476:
  1963                           
  1964                           ;delay.c: 16: i=100;
  1965  000686  0E64               	movlw	100
  1966  000688  6E11               	movwf	DelayMs@i,c
  1967                           
  1968                           ;delay.c: 17: while(i--) {
  1969  00068A  D006               	goto	l1482
  1970  00068C                     l1478:
  1971                           
  1972                           ;delay.c: 18: { unsigned char downCount; downCount = 4; while(downCount--);};
  1973  00068C  0E04               	movlw	4
  1974  00068E  6E12               	movwf	DelayMs@downCount,c
  1975  000690                     l1480:
  1976  000690  0612               	decf	DelayMs@downCount,f,c
  1977  000692  2812               	incf	DelayMs@downCount,w,c
  1978  000694  A4D8               	btfss	status,2,c
  1979  000696  D7FC               	goto	l1480
  1980  000698                     l1482:
  1981  000698  0611               	decf	DelayMs@i,f,c
  1982  00069A  2811               	incf	DelayMs@i,w,c
  1983  00069C  A4D8               	btfss	status,2,c
  1984  00069E  D7F6               	goto	l1478
  1985  0006A0                     l1484:
  1986  0006A0  060F               	decf	DelayMs@count,f,c
  1987  0006A2  A0D8               	btfss	status,0,c
  1988  0006A4  0610               	decf	DelayMs@count+1,f,c
  1989  0006A6  280F               	incf	DelayMs@count,w,c
  1990  0006A8  E1EE               	bnz	l1476
  1991  0006AA  2810               	incf	DelayMs@count+1,w,c
  1992  0006AC  B4D8               	btfsc	status,2,c
  1993  0006AE  0012               	return	
  1994  0006B0  D7EA               	goto	l1476
  1995  0006B2                     __end_of_DelayMs:
  1996                           	opt stack 0
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           prodh	equ	0xFF4
  2002                           prodl	equ	0xFF3
  2003                           intcon	equ	0xFF2
  2004                           intcon2	equ	0xFF1
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           postdec1	equ	0xFE5
  2008                           fsr1h	equ	0xFE2
  2009                           fsr1l	equ	0xFE1
  2010                           indf2	equ	0xFDF
  2011                           postinc2	equ	0xFDE
  2012                           postdec2	equ	0xFDD
  2013                           fsr2h	equ	0xFDA
  2014                           fsr2l	equ	0xFD9
  2015                           status	equ	0xFD8
  2016                           
  2017 ;; *************** function _CRCcalculate *****************
  2018 ;; Defined at:
  2019 ;;		line 112 in file "../CRC Check.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  message         2   27[COMRAM] PTR unsigned char 
  2022 ;;		 -> main@arrTransmitData(16), 
  2023 ;;  nBytes          1   29[COMRAM] unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  CRCresult       2   30[COMRAM] unsigned short 
  2026 ;;  i               1   32[COMRAM] unsigned char 
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  2   27[COMRAM] unsigned short 
  2029 ;; Registers used:
  2030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2036 ;;      Params:         3       0       0       0       0       0       0
  2037 ;;      Locals:         3       0       0       0       0       0       0
  2038 ;;      Temps:          0       0       0       0       0       0       0
  2039 ;;      Totals:         6       0       0       0       0       0       0
  2040 ;;Total ram usage:        6 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:    2
  2043 ;; This function calls:
  2044 ;;		_update_crc_16
  2045 ;; This function is called by:
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text9
  2051  0005C2                     __ptext9:
  2052                           	opt stack 0
  2053  0005C2                     _CRCcalculate:
  2054                           	opt stack 28
  2055                           
  2056                           ;CRC Check.c: 113: unsigned short CRCresult=0xFFFF;
  2057                           
  2058                           ;incstack = 0
  2059  0005C2  681F               	setf	CRCcalculate@CRCresult,c
  2060  0005C4  6820               	setf	CRCcalculate@CRCresult+1,c
  2061                           
  2062                           ;CRC Check.c: 114: unsigned char i;
  2063                           ;CRC Check.c: 118: CRCresult=0xFFFF;
  2064  0005C6  681F               	setf	CRCcalculate@CRCresult,c
  2065  0005C8  6820               	setf	CRCcalculate@CRCresult+1,c
  2066                           
  2067                           ;CRC Check.c: 120: for (i=0; i<nBytes; i++)
  2068  0005CA  0E00               	movlw	0
  2069  0005CC  6E21               	movwf	CRCcalculate@i,c
  2070  0005CE  D015               	goto	l1528
  2071  0005D0                     l1524:
  2072                           
  2073                           ;CRC Check.c: 121: CRCresult=update_crc_16 (CRCresult, message[i]);
  2074  0005D0  C01F  F00F         	movff	CRCcalculate@CRCresult,update_crc_16@crc
  2075  0005D4  C020  F010         	movff	CRCcalculate@CRCresult+1,update_crc_16@crc+1
  2076  0005D8  5021               	movf	CRCcalculate@i,w,c
  2077  0005DA  0D01               	mullw	1
  2078  0005DC  50F3               	movf	prodl,w,c
  2079  0005DE  241C               	addwf	CRCcalculate@message,w,c
  2080  0005E0  6ED9               	movwf	fsr2l,c
  2081  0005E2  50F4               	movf	prodh,w,c
  2082  0005E4  201D               	addwfc	CRCcalculate@message+1,w,c
  2083  0005E6  6EDA               	movwf	fsr2h,c
  2084  0005E8  50DF               	movf	indf2,w,c
  2085  0005EA  6E11               	movwf	update_crc_16@nextVal,c
  2086  0005EC  EC88  F002         	call	_update_crc_16	;wreg free
  2087  0005F0  C00F  F01F         	movff	?_update_crc_16,CRCcalculate@CRCresult
  2088  0005F4  C010  F020         	movff	?_update_crc_16+1,CRCcalculate@CRCresult+1
  2089  0005F8  2A21               	incf	CRCcalculate@i,f,c
  2090  0005FA                     l1528:
  2091  0005FA  501E               	movf	CRCcalculate@nBytes,w,c
  2092  0005FC  5C21               	subwf	CRCcalculate@i,w,c
  2093  0005FE  A0D8               	btfss	status,0,c
  2094  000600  D7E7               	goto	l1524
  2095                           
  2096                           ;CRC Check.c: 123: return(CRCresult);
  2097  000602  C01F  F01C         	movff	CRCcalculate@CRCresult,?_CRCcalculate
  2098  000606  C020  F01D         	movff	CRCcalculate@CRCresult+1,?_CRCcalculate+1
  2099  00060A  0012               	return		;funcret
  2100  00060C                     __end_of_CRCcalculate:
  2101                           	opt stack 0
  2102                           tblptru	equ	0xFF8
  2103                           tblptrh	equ	0xFF7
  2104                           tblptrl	equ	0xFF6
  2105                           tablat	equ	0xFF5
  2106                           prodh	equ	0xFF4
  2107                           prodl	equ	0xFF3
  2108                           intcon	equ	0xFF2
  2109                           intcon2	equ	0xFF1
  2110                           postinc0	equ	0xFEE
  2111                           wreg	equ	0xFE8
  2112                           postdec1	equ	0xFE5
  2113                           fsr1h	equ	0xFE2
  2114                           fsr1l	equ	0xFE1
  2115                           indf2	equ	0xFDF
  2116                           postinc2	equ	0xFDE
  2117                           postdec2	equ	0xFDD
  2118                           fsr2h	equ	0xFDA
  2119                           fsr2l	equ	0xFD9
  2120                           status	equ	0xFD8
  2121                           
  2122 ;; *************** function _update_crc_16 *****************
  2123 ;; Defined at:
  2124 ;;		line 96 in file "../CRC Check.c"
  2125 ;; Parameters:    Size  Location     Type
  2126 ;;  crc             2   14[COMRAM] unsigned short 
  2127 ;;  nextVal         1   16[COMRAM] unsigned char 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  shortVal        2   25[COMRAM] unsigned short 
  2130 ;;  tmp             2   23[COMRAM] unsigned short 
  2131 ;; Return value:  Size  Location     Type
  2132 ;;                  2   14[COMRAM] unsigned short 
  2133 ;; Registers used:
  2134 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  2135 ;; Tracked objects:
  2136 ;;		On entry : 0/0
  2137 ;;		On exit  : 0/0
  2138 ;;		Unchanged: 0/0
  2139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2140 ;;      Params:         3       0       0       0       0       0       0
  2141 ;;      Locals:         4       0       0       0       0       0       0
  2142 ;;      Temps:          6       0       0       0       0       0       0
  2143 ;;      Totals:        13       0       0       0       0       0       0
  2144 ;;Total ram usage:       13 bytes
  2145 ;; Hardware stack levels used:    1
  2146 ;; Hardware stack levels required when called:    1
  2147 ;; This function calls:
  2148 ;;		Nothing
  2149 ;; This function is called by:
  2150 ;;		_CRCcalculate
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           	psect	text10
  2155  000510                     __ptext10:
  2156                           	opt stack 0
  2157  000510                     _update_crc_16:
  2158                           	opt stack 28
  2159                           
  2160                           ;CRC Check.c: 97: unsigned short tmp, shortVal;
  2161                           ;CRC Check.c: 99: shortVal = 0x00ff & (unsigned short) nextVal;
  2162                           
  2163                           ;incstack = 0
  2164  000510  C011  F01A         	movff	update_crc_16@nextVal,update_crc_16@shortVal
  2165  000514  6A1B               	clrf	update_crc_16@shortVal+1,c
  2166                           
  2167                           ;CRC Check.c: 100: tmp = crc^shortVal;
  2168  000516  501A               	movf	update_crc_16@shortVal,w,c
  2169  000518  180F               	xorwf	update_crc_16@crc,w,c
  2170  00051A  6E18               	movwf	update_crc_16@tmp,c
  2171  00051C  501B               	movf	update_crc_16@shortVal+1,w,c
  2172  00051E  1810               	xorwf	update_crc_16@crc+1,w,c
  2173  000520  6E19               	movwf	update_crc_16@tmp+1,c
  2174                           
  2175                           ;CRC Check.c: 101: crc = (crc >> 8) ^ crc_tab16 [tmp&0xff];
  2176  000522  0EFF               	movlw	255
  2177  000524  1418               	andwf	update_crc_16@tmp,w,c
  2178  000526  6E12               	movwf	??_update_crc_16& (0+255),c
  2179  000528  0E00               	movlw	0
  2180  00052A  1419               	andwf	update_crc_16@tmp+1,w,c
  2181  00052C  6E13               	movwf	(??_update_crc_16+1)& (0+255),c
  2182  00052E  90D8               	bcf	status,0,c
  2183  000530  3612               	rlcf	??_update_crc_16,f,c
  2184  000532  3613               	rlcf	??_update_crc_16+1,f,c
  2185  000534  0EEF               	movlw	low _crc_tab16
  2186  000536  2412               	addwf	??_update_crc_16,w,c
  2187  000538  6EF6               	movwf	tblptrl,c
  2188  00053A  0E7D               	movlw	high _crc_tab16
  2189  00053C  2013               	addwfc	??_update_crc_16+1,w,c
  2190  00053E  6EF7               	movwf	tblptrh,c
  2191  000540                     	if	0	;There are less than 3 active tblptr bytes
  2192  000540                     	endif
  2193  000540  0009               	tblrd		*+
  2194  000542  CFF5 F014          	movff	tablat,??_update_crc_16+2
  2195  000546  0009               	tblrd		*+
  2196  000548  CFF5 F015          	movff	tablat,??_update_crc_16+3
  2197  00054C  C00F  F016         	movff	update_crc_16@crc,??_update_crc_16+4
  2198  000550  C010  F017         	movff	update_crc_16@crc+1,??_update_crc_16+5
  2199  000554  C017  F016         	movff	??_update_crc_16+5,??_update_crc_16+4
  2200  000558  6A17               	clrf	??_update_crc_16+5,c
  2201  00055A  5014               	movf	??_update_crc_16+2,w,c
  2202  00055C  1816               	xorwf	??_update_crc_16+4,w,c
  2203  00055E  6E0F               	movwf	update_crc_16@crc,c
  2204  000560  5015               	movf	??_update_crc_16+3,w,c
  2205  000562  1817               	xorwf	??_update_crc_16+5,w,c
  2206  000564  6E10               	movwf	update_crc_16@crc+1,c
  2207                           
  2208                           ;CRC Check.c: 102: return crc;
  2209  000566  C00F  F00F         	movff	update_crc_16@crc,?_update_crc_16
  2210  00056A  C010  F010         	movff	update_crc_16@crc+1,?_update_crc_16+1
  2211  00056E  0012               	return	
  2212  000570                     __end_of_update_crc_16:
  2213                           	opt stack 0
  2214                           tblptru	equ	0xFF8
  2215                           tblptrh	equ	0xFF7
  2216                           tblptrl	equ	0xFF6
  2217                           tablat	equ	0xFF5
  2218                           prodh	equ	0xFF4
  2219                           prodl	equ	0xFF3
  2220                           intcon	equ	0xFF2
  2221                           intcon2	equ	0xFF1
  2222                           postinc0	equ	0xFEE
  2223                           wreg	equ	0xFE8
  2224                           postdec1	equ	0xFE5
  2225                           fsr1h	equ	0xFE2
  2226                           fsr1l	equ	0xFE1
  2227                           indf2	equ	0xFDF
  2228                           postinc2	equ	0xFDE
  2229                           postdec2	equ	0xFDD
  2230                           fsr2h	equ	0xFDA
  2231                           fsr2l	equ	0xFD9
  2232                           status	equ	0xFD8
  2233                           
  2234 ;; *************** function _BuildPacket *****************
  2235 ;; Defined at:
  2236 ;;		line 335 in file "../main.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  dataLength      1    wreg     unsigned char 
  2239 ;;  ptrCommandDa    2   20[COMRAM] PTR unsigned char 
  2240 ;;		 -> main@arrTransmitData(16), 
  2241 ;;  ptrPacket       2   22[COMRAM] PTR unsigned char 
  2242 ;;		 -> arrPacket(32), 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  dataLength      1   24[COMRAM] unsigned char 
  2245 ;;  packetIndex     1   26[COMRAM] unsigned char 
  2246 ;;  i               1   25[COMRAM] unsigned char 
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      unsigned char 
  2249 ;; Registers used:
  2250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2256 ;;      Params:         4       0       0       0       0       0       0
  2257 ;;      Locals:         3       0       0       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0       0       0
  2259 ;;      Totals:         7       0       0       0       0       0       0
  2260 ;;Total ram usage:        7 bytes
  2261 ;; Hardware stack levels used:    1
  2262 ;; Hardware stack levels required when called:    2
  2263 ;; This function calls:
  2264 ;;		_insertByte
  2265 ;; This function is called by:
  2266 ;;		_main
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text11
  2271  000412                     __ptext11:
  2272                           	opt stack 0
  2273  000412                     _BuildPacket:
  2274                           	opt stack 28
  2275                           
  2276                           ;incstack = 0
  2277                           ;BuildPacket@dataLength stored from wreg
  2278  000412  6E19               	movwf	BuildPacket@dataLength,c
  2279                           
  2280                           ;main.c: 337: unsigned char packetIndex = 0, i;
  2281  000414  0E00               	movlw	0
  2282  000416  6E1B               	movwf	BuildPacket@packetIndex,c
  2283                           
  2284                           ;main.c: 339: if (dataLength <= 32) {
  2285  000418  0E21               	movlw	33
  2286  00041A  6019               	cpfslt	BuildPacket@dataLength,c
  2287  00041C  D038               	goto	l1560
  2288                           
  2289                           ;main.c: 340: ptrPacket[packetIndex++] = 36;
  2290  00041E  501B               	movf	BuildPacket@packetIndex,w,c
  2291  000420  0D01               	mullw	1
  2292  000422  50F3               	movf	prodl,w,c
  2293  000424  2417               	addwf	BuildPacket@ptrPacket,w,c
  2294  000426  6ED9               	movwf	fsr2l,c
  2295  000428  50F4               	movf	prodh,w,c
  2296  00042A  2018               	addwfc	BuildPacket@ptrPacket+1,w,c
  2297  00042C  6EDA               	movwf	fsr2h,c
  2298  00042E  0E24               	movlw	36
  2299  000430  6EDF               	movwf	indf2,c
  2300  000432  2A1B               	incf	BuildPacket@packetIndex,f,c
  2301                           
  2302                           ;main.c: 341: for (i = 0; i < dataLength; i++)
  2303  000434  0E00               	movlw	0
  2304  000436  6E1A               	movwf	BuildPacket@i,c
  2305  000438  D019               	goto	l1548
  2306  00043A                     l1540:
  2307                           
  2308                           ;main.c: 342: if (!insertByte(ptrCommandData[i], ptrPacket, &packetIndex)) return(0);
  2309  00043A  C017  F00F         	movff	BuildPacket@ptrPacket,insertByte@ptrBuffer
  2310  00043E  C018  F010         	movff	BuildPacket@ptrPacket+1,insertByte@ptrBuffer+1
  2311  000442  0E1B               	movlw	low BuildPacket@packetIndex
  2312  000444  6E11               	movwf	insertByte@index,c
  2313  000446  0E00               	movlw	high BuildPacket@packetIndex
  2314  000448  6E12               	movwf	insertByte@index+1,c
  2315  00044A  501A               	movf	BuildPacket@i,w,c
  2316  00044C  0D01               	mullw	1
  2317  00044E  50F3               	movf	prodl,w,c
  2318  000450  2415               	addwf	BuildPacket@ptrCommandData,w,c
  2319  000452  6ED9               	movwf	fsr2l,c
  2320  000454  50F4               	movf	prodh,w,c
  2321  000456  2016               	addwfc	BuildPacket@ptrCommandData+1,w,c
  2322  000458  6EDA               	movwf	fsr2h,c
  2323  00045A  50DF               	movf	indf2,w,c
  2324  00045C  ECB0  F001         	call	_insertByte
  2325  000460  0900               	iorlw	0
  2326  000462  A4D8               	btfss	status,2,c
  2327  000464  D002               	goto	l1546
  2328  000466  0E00               	movlw	0
  2329  000468  0012               	return	
  2330  00046A                     l1546:
  2331  00046A  2A1A               	incf	BuildPacket@i,f,c
  2332  00046C                     l1548:
  2333  00046C  5019               	movf	BuildPacket@dataLength,w,c
  2334  00046E  5C1A               	subwf	BuildPacket@i,w,c
  2335  000470  A0D8               	btfss	status,0,c
  2336  000472  D7E3               	goto	l1540
  2337                           
  2338                           ;main.c: 343: ptrPacket[packetIndex++] = 13;
  2339  000474  501B               	movf	BuildPacket@packetIndex,w,c
  2340  000476  0D01               	mullw	1
  2341  000478  50F3               	movf	prodl,w,c
  2342  00047A  2417               	addwf	BuildPacket@ptrPacket,w,c
  2343  00047C  6ED9               	movwf	fsr2l,c
  2344  00047E  50F4               	movf	prodh,w,c
  2345  000480  2018               	addwfc	BuildPacket@ptrPacket+1,w,c
  2346  000482  6EDA               	movwf	fsr2h,c
  2347  000484  0E0D               	movlw	13
  2348  000486  6EDF               	movwf	indf2,c
  2349  000488  2A1B               	incf	BuildPacket@packetIndex,f,c
  2350                           
  2351                           ;main.c: 344: return (packetIndex);
  2352  00048A  501B               	movf	BuildPacket@packetIndex,w,c
  2353                           
  2354                           ;main.c: 345: } else return (0);
  2355  00048C  0012               	return	
  2356  00048E                     l1560:
  2357  00048E  0E00               	movlw	0
  2358  000490  0012               	return	
  2359  000492                     __end_of_BuildPacket:
  2360                           	opt stack 0
  2361                           tblptru	equ	0xFF8
  2362                           tblptrh	equ	0xFF7
  2363                           tblptrl	equ	0xFF6
  2364                           tablat	equ	0xFF5
  2365                           prodh	equ	0xFF4
  2366                           prodl	equ	0xFF3
  2367                           intcon	equ	0xFF2
  2368                           intcon2	equ	0xFF1
  2369                           postinc0	equ	0xFEE
  2370                           wreg	equ	0xFE8
  2371                           postdec1	equ	0xFE5
  2372                           fsr1h	equ	0xFE2
  2373                           fsr1l	equ	0xFE1
  2374                           indf2	equ	0xFDF
  2375                           postinc2	equ	0xFDE
  2376                           postdec2	equ	0xFDD
  2377                           fsr2h	equ	0xFDA
  2378                           fsr2l	equ	0xFD9
  2379                           status	equ	0xFD8
  2380                           
  2381 ;; *************** function _insertByte *****************
  2382 ;; Defined at:
  2383 ;;		line 321 in file "../main.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  dataByte        1    wreg     unsigned char 
  2386 ;;  ptrBuffer       2   14[COMRAM] PTR unsigned char 
  2387 ;;		 -> arrPacket(32), 
  2388 ;;  index           2   16[COMRAM] PTR unsigned char 
  2389 ;;		 -> BuildPacket@packetIndex(1), 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  dataByte        1   19[COMRAM] unsigned char 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      unsigned char 
  2394 ;; Registers used:
  2395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2401 ;;      Params:         4       0       0       0       0       0       0
  2402 ;;      Locals:         1       0       0       0       0       0       0
  2403 ;;      Temps:          1       0       0       0       0       0       0
  2404 ;;      Totals:         6       0       0       0       0       0       0
  2405 ;;Total ram usage:        6 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    1
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_BuildPacket
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text12
  2416  000360                     __ptext12:
  2417                           	opt stack 0
  2418  000360                     _insertByte:
  2419                           	opt stack 28
  2420                           
  2421                           ;incstack = 0
  2422                           ;insertByte@dataByte stored from wreg
  2423  000360  6E14               	movwf	insertByte@dataByte,c
  2424                           
  2425                           ;main.c: 323: if (*index >= 32) return (0);
  2426  000362  C011  FFD9         	movff	insertByte@index,fsr2l
  2427  000366  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2428  00036A  0E1F               	movlw	31
  2429  00036C  64DF               	cpfsgt	indf2,c
  2430  00036E  D002               	goto	l1326
  2431  000370  0E00               	movlw	0
  2432  000372  0012               	return	
  2433  000374                     l1326:
  2434                           
  2435                           ;main.c: 324: if (dataByte == 36 || dataByte == 16 || dataByte == 13) {
  2436  000374  0E24               	movlw	36
  2437  000376  1814               	xorwf	insertByte@dataByte,w,c
  2438  000378  B4D8               	btfsc	status,2,c
  2439  00037A  D008               	goto	l1332
  2440  00037C  0E10               	movlw	16
  2441  00037E  1814               	xorwf	insertByte@dataByte,w,c
  2442  000380  B4D8               	btfsc	status,2,c
  2443  000382  D004               	goto	l1332
  2444  000384  0E0D               	movlw	13
  2445  000386  1814               	xorwf	insertByte@dataByte,w,c
  2446  000388  A4D8               	btfss	status,2,c
  2447  00038A  D01C               	goto	l1336
  2448  00038C                     l1332:
  2449                           
  2450                           ;main.c: 325: ptrBuffer[*index] = 16;
  2451  00038C  C011  FFD9         	movff	insertByte@index,fsr2l
  2452  000390  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2453  000394  50DF               	movf	indf2,w,c
  2454  000396  6E13               	movwf	??_insertByte& (0+255),c
  2455  000398  5013               	movf	??_insertByte,w,c
  2456  00039A  0D01               	mullw	1
  2457  00039C  50F3               	movf	prodl,w,c
  2458  00039E  240F               	addwf	insertByte@ptrBuffer,w,c
  2459  0003A0  6ED9               	movwf	fsr2l,c
  2460  0003A2  50F4               	movf	prodh,w,c
  2461  0003A4  2010               	addwfc	insertByte@ptrBuffer+1,w,c
  2462  0003A6  6EDA               	movwf	fsr2h,c
  2463  0003A8  0E10               	movlw	16
  2464  0003AA  6EDF               	movwf	indf2,c
  2465                           
  2466                           ;main.c: 326: *index = *index + 1;
  2467  0003AC  C011  FFD9         	movff	insertByte@index,fsr2l
  2468  0003B0  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2469  0003B4  50DF               	movf	indf2,w,c
  2470  0003B6  6E13               	movwf	??_insertByte& (0+255),c
  2471  0003B8  2813               	incf	??_insertByte,w,c
  2472  0003BA  C011  FFD9         	movff	insertByte@index,fsr2l
  2473  0003BE  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2474  0003C2  6EDF               	movwf	indf2,c
  2475  0003C4                     l1336:
  2476                           
  2477                           ;main.c: 327: }
  2478                           ;main.c: 328: if (*index >= 32) return (0);
  2479  0003C4  C011  FFD9         	movff	insertByte@index,fsr2l
  2480  0003C8  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2481  0003CC  0E1F               	movlw	31
  2482  0003CE  64DF               	cpfsgt	indf2,c
  2483  0003D0  D002               	goto	l1342
  2484  0003D2  0E00               	movlw	0
  2485  0003D4  0012               	return	
  2486  0003D6                     l1342:
  2487                           
  2488                           ;main.c: 329: ptrBuffer[*index] = dataByte;
  2489  0003D6  C011  FFD9         	movff	insertByte@index,fsr2l
  2490  0003DA  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2491  0003DE  50DF               	movf	indf2,w,c
  2492  0003E0  6E13               	movwf	??_insertByte& (0+255),c
  2493  0003E2  5013               	movf	??_insertByte,w,c
  2494  0003E4  0D01               	mullw	1
  2495  0003E6  50F3               	movf	prodl,w,c
  2496  0003E8  240F               	addwf	insertByte@ptrBuffer,w,c
  2497  0003EA  6ED9               	movwf	fsr2l,c
  2498  0003EC  50F4               	movf	prodh,w,c
  2499  0003EE  2010               	addwfc	insertByte@ptrBuffer+1,w,c
  2500  0003F0  6EDA               	movwf	fsr2h,c
  2501  0003F2  C014  FFDF         	movff	insertByte@dataByte,indf2
  2502                           
  2503                           ;main.c: 330: *index = *index + 1;
  2504  0003F6  C011  FFD9         	movff	insertByte@index,fsr2l
  2505  0003FA  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2506  0003FE  50DF               	movf	indf2,w,c
  2507  000400  6E13               	movwf	??_insertByte& (0+255),c
  2508  000402  2813               	incf	??_insertByte,w,c
  2509  000404  C011  FFD9         	movff	insertByte@index,fsr2l
  2510  000408  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2511  00040C  6EDF               	movwf	indf2,c
  2512                           
  2513                           ;main.c: 331: return (!0);
  2514  00040E  0E01               	movlw	1
  2515  000410  0012               	return	
  2516  000412                     __end_of_insertByte:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           prodh	equ	0xFF4
  2523                           prodl	equ	0xFF3
  2524                           intcon	equ	0xFF2
  2525                           intcon2	equ	0xFF1
  2526                           postinc0	equ	0xFEE
  2527                           wreg	equ	0xFE8
  2528                           postdec1	equ	0xFE5
  2529                           fsr1h	equ	0xFE2
  2530                           fsr1l	equ	0xFE1
  2531                           indf2	equ	0xFDF
  2532                           postinc2	equ	0xFDE
  2533                           postdec2	equ	0xFDD
  2534                           fsr2h	equ	0xFDA
  2535                           fsr2l	equ	0xFD9
  2536                           status	equ	0xFD8
  2537                           
  2538 ;; *************** function _isr *****************
  2539 ;; Defined at:
  2540 ;;		line 244 in file "../main.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;		None
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;		None
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, status,2, status,0
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2554 ;;      Params:         0       0       0       0       0       0       0
  2555 ;;      Locals:         0       0       0       0       0       0       0
  2556 ;;      Temps:         14       0       0       0       0       0       0
  2557 ;;      Totals:        14       0       0       0       0       0       0
  2558 ;;Total ram usage:       14 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; This function calls:
  2561 ;;		Nothing
  2562 ;; This function is called by:
  2563 ;;		Interrupt level 2
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	intcode
  2568  000008                     __pintcode:
  2569                           	opt stack 0
  2570  000008                     _isr:
  2571                           	opt stack 28
  2572                           
  2573                           ;incstack = 0
  2574  000008  8261               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2575  00000A  CFFA F001          	movff	pclath,??_isr
  2576  00000E  CFFB F002          	movff	pclatu,??_isr+1
  2577  000012  CFE9 F003          	movff	fsr0l,??_isr+2
  2578  000016  CFEA F004          	movff	fsr0h,??_isr+3
  2579  00001A  CFE1 F005          	movff	fsr1l,??_isr+4
  2580  00001E  CFE2 F006          	movff	fsr1h,??_isr+5
  2581  000022  CFD9 F007          	movff	fsr2l,??_isr+6
  2582  000026  CFDA F008          	movff	fsr2h,??_isr+7
  2583  00002A  CFF3 F009          	movff	prodl,??_isr+8
  2584  00002E  CFF4 F00A          	movff	prodh,??_isr+9
  2585  000032  CFF6 F00B          	movff	tblptrl,??_isr+10
  2586  000036  CFF7 F00C          	movff	tblptrh,??_isr+11
  2587  00003A  CFF8 F00D          	movff	tblptru,??_isr+12
  2588  00003E  CFF5 F00E          	movff	tablat,??_isr+13
  2589                           
  2590                           ;main.c: 245: static int Timer2Counter = 0;
  2591                           ;main.c: 247: if (INTCONbits.INT0IF)
  2592  000042  A2F2               	btfss	intcon,1,c	;volatile
  2593  000044  D003               	goto	i2l1210
  2594                           
  2595                           ;main.c: 248: {
  2596                           ;main.c: 249: INTCONbits.INT0IF = 0;
  2597  000046  92F2               	bcf	intcon,1,c	;volatile
  2598                           
  2599                           ;main.c: 250: pushFlag = !0;
  2600  000048  0E01               	movlw	1
  2601  00004A  6E5F               	movwf	_pushFlag,c
  2602  00004C                     i2l1210:
  2603                           
  2604                           ;main.c: 251: }
  2605                           ;main.c: 253: if (INTCONbits.RBIF)
  2606  00004C  A0F2               	btfss	intcon,0,c	;volatile
  2607  00004E  D003               	goto	i2l107
  2608                           
  2609                           ;main.c: 254: {
  2610                           ;main.c: 255: PORTBreg = PORTB;
  2611  000050  CF81 F060          	movff	3969,_PORTBreg	;volatile
  2612                           
  2613                           ;main.c: 256: INTCONbits.RBIF = 0;
  2614  000054  90F2               	bcf	intcon,0,c	;volatile
  2615  000056                     i2l107:
  2616                           
  2617                           ;main.c: 257: }
  2618                           ;main.c: 259: if (TMR2IF)
  2619  000056  A29E               	btfss	3998,1,c	;volatile
  2620  000058  D011               	goto	i2l110
  2621                           
  2622                           ;main.c: 260: {
  2623                           ;main.c: 261: TMR2IF = 0;
  2624  00005A  929E               	bcf	3998,1,c	;volatile
  2625                           
  2626                           ;main.c: 262: Timer2Counter++;
  2627  00005C  4A5B               	infsnz	isr@Timer2Counter,f,c
  2628  00005E  2A5C               	incf	isr@Timer2Counter+1,f,c
  2629                           
  2630                           ;main.c: 263: if (Timer2Counter >= 100)
  2631  000060  BE5C               	btfsc	isr@Timer2Counter+1,7,c
  2632  000062  D00C               	goto	i2l110
  2633  000064  505C               	movf	isr@Timer2Counter+1,w,c
  2634  000066  E104               	bnz	i2u38_40
  2635  000068  0E64               	movlw	100
  2636  00006A  5C5B               	subwf	isr@Timer2Counter,w,c
  2637  00006C  A0D8               	btfss	status,0,c
  2638  00006E  D006               	goto	i2l110
  2639  000070                     i2u38_40:
  2640                           
  2641                           ;main.c: 264: {
  2642                           ;main.c: 265: Timer2Counter = 0;
  2643  000070  0E00               	movlw	0
  2644  000072  6E5C               	movwf	isr@Timer2Counter+1,c
  2645  000074  0E00               	movlw	0
  2646  000076  6E5B               	movwf	isr@Timer2Counter,c
  2647                           
  2648                           ;main.c: 266: Timer2flag = !0;
  2649  000078  0E01               	movlw	1
  2650  00007A  6E5E               	movwf	_Timer2flag,c
  2651  00007C                     i2l110:
  2652  00007C  C00E  FFF5         	movff	??_isr+13,tablat
  2653  000080  C00D  FFF8         	movff	??_isr+12,tblptru
  2654  000084  C00C  FFF7         	movff	??_isr+11,tblptrh
  2655  000088  C00B  FFF6         	movff	??_isr+10,tblptrl
  2656  00008C  C00A  FFF4         	movff	??_isr+9,prodh
  2657  000090  C009  FFF3         	movff	??_isr+8,prodl
  2658  000094  C008  FFDA         	movff	??_isr+7,fsr2h
  2659  000098  C007  FFD9         	movff	??_isr+6,fsr2l
  2660  00009C  C006  FFE2         	movff	??_isr+5,fsr1h
  2661  0000A0  C005  FFE1         	movff	??_isr+4,fsr1l
  2662  0000A4  C004  FFEA         	movff	??_isr+3,fsr0h
  2663  0000A8  C003  FFE9         	movff	??_isr+2,fsr0l
  2664  0000AC  C002  FFFB         	movff	??_isr+1,pclatu
  2665  0000B0  C001  FFFA         	movff	??_isr,pclath
  2666  0000B4  9261               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2667  0000B6  0011               	retfie		f
  2668  0000B8                     __end_of_isr:
  2669                           	opt stack 0
  2670                           pclatu	equ	0xFFB
  2671                           pclath	equ	0xFFA
  2672                           tblptru	equ	0xFF8
  2673                           tblptrh	equ	0xFF7
  2674                           tblptrl	equ	0xFF6
  2675                           tablat	equ	0xFF5
  2676                           prodh	equ	0xFF4
  2677                           prodl	equ	0xFF3
  2678                           intcon	equ	0xFF2
  2679                           intcon2	equ	0xFF1
  2680                           postinc0	equ	0xFEE
  2681                           fsr0h	equ	0xFEA
  2682                           fsr0l	equ	0xFE9
  2683                           wreg	equ	0xFE8
  2684                           postdec1	equ	0xFE5
  2685                           fsr1h	equ	0xFE2
  2686                           fsr1l	equ	0xFE1
  2687                           indf2	equ	0xFDF
  2688                           postinc2	equ	0xFDE
  2689                           postdec2	equ	0xFDD
  2690                           fsr2h	equ	0xFDA
  2691                           fsr2l	equ	0xFD9
  2692                           status	equ	0xFD8
  2693                           pclatu	equ	0xFFB
  2694                           pclath	equ	0xFFA
  2695                           tblptru	equ	0xFF8
  2696                           tblptrh	equ	0xFF7
  2697                           tblptrl	equ	0xFF6
  2698                           tablat	equ	0xFF5
  2699                           prodh	equ	0xFF4
  2700                           prodl	equ	0xFF3
  2701                           intcon	equ	0xFF2
  2702                           intcon2	equ	0xFF1
  2703                           postinc0	equ	0xFEE
  2704                           fsr0h	equ	0xFEA
  2705                           fsr0l	equ	0xFE9
  2706                           wreg	equ	0xFE8
  2707                           postdec1	equ	0xFE5
  2708                           fsr1h	equ	0xFE2
  2709                           fsr1l	equ	0xFE1
  2710                           indf2	equ	0xFDF
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           fsr2h	equ	0xFDA
  2714                           fsr2l	equ	0xFD9
  2715                           status	equ	0xFD8
  2716                           
  2717                           	psect	rparam
  2718  0000                     pclatu	equ	0xFFB
  2719                           pclath	equ	0xFFA
  2720                           tblptru	equ	0xFF8
  2721                           tblptrh	equ	0xFF7
  2722                           tblptrl	equ	0xFF6
  2723                           tablat	equ	0xFF5
  2724                           prodh	equ	0xFF4
  2725                           prodl	equ	0xFF3
  2726                           intcon	equ	0xFF2
  2727                           intcon2	equ	0xFF1
  2728                           postinc0	equ	0xFEE
  2729                           fsr0h	equ	0xFEA
  2730                           fsr0l	equ	0xFE9
  2731                           wreg	equ	0xFE8
  2732                           postdec1	equ	0xFE5
  2733                           fsr1h	equ	0xFE2
  2734                           fsr1l	equ	0xFE1
  2735                           indf2	equ	0xFDF
  2736                           postinc2	equ	0xFDE
  2737                           postdec2	equ	0xFDD
  2738                           fsr2h	equ	0xFDA
  2739                           fsr2l	equ	0xFD9
  2740                           status	equ	0xFD8
  2741                           
  2742                           	psect	temp
  2743  000061                     btemp:
  2744                           	opt stack 0
  2745  000061                     	ds	1
  2746  0000                     int$flags	set	btemp
  2747                           pclatu	equ	0xFFB
  2748                           pclath	equ	0xFFA
  2749                           tblptru	equ	0xFF8
  2750                           tblptrh	equ	0xFF7
  2751                           tblptrl	equ	0xFF6
  2752                           tablat	equ	0xFF5
  2753                           prodh	equ	0xFF4
  2754                           prodl	equ	0xFF3
  2755                           intcon	equ	0xFF2
  2756                           intcon2	equ	0xFF1
  2757                           postinc0	equ	0xFEE
  2758                           fsr0h	equ	0xFEA
  2759                           fsr0l	equ	0xFE9
  2760                           wreg	equ	0xFE8
  2761                           postdec1	equ	0xFE5
  2762                           fsr1h	equ	0xFE2
  2763                           fsr1l	equ	0xFE1
  2764                           indf2	equ	0xFDF
  2765                           postinc2	equ	0xFDE
  2766                           postdec2	equ	0xFDD
  2767                           fsr2h	equ	0xFDA
  2768                           fsr2l	equ	0xFD9
  2769                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    528
    Data        0
    BSS         1262
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     82      96
    BANK0           128      0      96
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    CRCcalculate@message	PTR unsigned char  size(2) Largest target is 16
		 -> main@arrTransmitData(COMRAM[16]), 

    BuildPacket@ptrCommandData	PTR unsigned char  size(2) Largest target is 16
		 -> main@arrTransmitData(COMRAM[16]), 

    BuildPacket@ptrPacket	PTR unsigned char  size(2) Largest target is 32
		 -> arrPacket(BANK0[32]), 

    insertByte@ptrBuffer	PTR unsigned char  size(2) Largest target is 32
		 -> arrPacket(BANK0[32]), 

    insertByte@index	PTR unsigned char  size(2) Largest target is 1
		 -> BuildPacket@packetIndex(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_readJoySticks
    _readJoySticks->___lwdiv
    ___lwdiv->___wmul
    _CRCcalculate->_update_crc_16
    _BuildPacket->_insertByte

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0    3354
                                             53 COMRAM    29    29      0
                        _BuildPacket
                       _CRCcalculate
                            _DelayMs
                               _init
                              _putch
                      _readJoySticks
 ---------------------------------------------------------------------------------
 (1) _readJoySticks                                       26    26      0     966
                                             27 COMRAM    26    26      0
                   _ADconvertAndRead
                       _ADsetChannel
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             20 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADsetChannel                                         2     2      0      22
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADconvertAndRead                                     8     6      2      69
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayMs                                              4     2      2     132
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CRCcalculate                                         6     3      3     528
                                             27 COMRAM     6     3      3
                      _update_crc_16
 ---------------------------------------------------------------------------------
 (2) _update_crc_16                                       13    10      3     263
                                             14 COMRAM    13    10      3
 ---------------------------------------------------------------------------------
 (1) _BuildPacket                                          7     3      4     843
                                             20 COMRAM     7     3      4
                         _insertByte
 ---------------------------------------------------------------------------------
 (2) _insertByte                                           6     2      4     436
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BuildPacket
     _insertByte
   _CRCcalculate
     _update_crc_16
   _DelayMs
   _init
   _putch
   _readJoySticks
     _ADconvertAndRead
     _ADsetChannel
     ___lwdiv
       ___wmul (ARG)
     ___wmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     400      17       66.7%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      80       7       50.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      60       5       75.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     52      60       1       76.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     140      15        0.0%
DATA                 0      0     540       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Apr 08 20:12:58 2018

               _update_crc_16 0510           ___wmul@multiplicand 0011                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                 __CFG_OSC$HS 000000                           l113 06EE                           l122 0654  
                         l134 0124                           l139 018E                           l631 05B8  
                         _PR2 000FCB                           u700 00CA                           u710 00E2  
                         _isr 0008                           prod 000FF3                           wreg 000FE8  
       readJoySticks@ADoffset 001E                 ?_CRCcalculate 001C                  __CFG_LVP$OFF 000000  
                __CFG_WDT$OFF 000000                          l1332 038C                          l1342 03D6  
                        l1326 0374                          l1502 0172                          l1336 03C4  
                        l1512 0210                          l1506 01A2                          l1540 043A  
                        l1524 05D0                          l1372 0586                          l1374 058E  
                        l1518 021C                          l1560 048E                          l1528 05FA  
                        l1480 0690                          l1384 05AE                          l1376 0592  
                        l1546 046A                          l1482 0698                          l1548 046C  
                        l1476 0686                          l1484 06A0                          l1652 0356  
                        l1478 068C                          l1494 0106                          l1496 012C  
                        l1648 033E                          l1592 0268                          l1578 023E  
                        l1588 0258                          l1598 0278                          ?_isr 0001  
                 main@convert 0051                  __CFG_PWRT$ON 000000                          _main 0224  
                        _init 0492                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0061  
      readJoySticks@ADchannel 005D                          prodh 000FF4                          prodl 000FF3  
                        start 00B8                 __CFG_IESO$OFF 000000               __end_of_DelayMs 06B2  
               __CFG_MCLRE$ON 000000                ?_update_crc_16 000F                  ___param_bank 000000  
                       ??_isr 0001           __end_of_BuildPacket 0492                         ?_main 0001  
                       ?_init 0001                         _T2CON 000FCA                __CFG_DEBUG$OFF 000000  
             __end_of___lwdiv 05C2                         i2l110 007C                         i2l107 0056  
                       _SPBRG 000FAF                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TXREG 000FAD  
              __CFG_FCMEN$OFF 000000                ??_CRCcalculate 001F                         _putch 06EC  
                       main@i 004F                __CFG_BOREN$OFF 000000                         pclath 000FFA  
                       tablat 000FF5                         status 000FD8  readJoySticks@joyStickReading 0034  
             __initialization 060C                  __end_of_main 0360                  __end_of_init 0510  
   readJoySticks@ADrawReading 0030                 ?_ADsetChannel 0001                        ??_main 0036  
                      ??_init 000F                 __activetblptr 000002        __size_of_readJoySticks 0168  
                      _ADCON0 000FC2                        _ADCON2 000FC0                        _ADRESH 000FC4  
                      _ADRESL 000FC3                        ?_putch 0001                        i2l1210 004C  
                      _INTCON 000FF2                     ??_DelayMs 0011      __end_of_ADconvertAndRead 0684  
                      _TMR2IF 007CF1               ??_update_crc_16 0012                   _BuildPacket 0412  
              __CFG_XINST$OFF 000000                    _Timer2flag 005E                ??_ADsetChannel 000F  
                      ___wmul 06B2                     ??___lwdiv 0019                        clear_0 0614  
                      clear_1 0626                        clear_2 0632                        clear_3 063E  
        main@intLeftJoystickX 0048          main@intLeftJoystickY 0046              update_crc_16@crc 000F  
            update_crc_16@tmp 0018                  __mediumconst 7DEE                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8                    __accesstop 0080  
     __end_of__initialization 0644               __CFG_PBADEN$OFF 000000                 ___rparam_used 000001  
              __pcstackCOMRAM 0001                 _readJoySticks 00BC          __end_of_CRCcalculate 060C  
               __end_of_putch 06F8                 CRCcalculate@i 0021                       ??_putch 000F  
            isr@Timer2Counter 005B                    __pbssBANK0 0080                    __pbssBANK1 0100  
       CRCcalculate@CRCresult 001F            CRCcalculate@nBytes 001E            insertByte@dataByte 0014  
              ?_readJoySticks 0001                       ?___wmul 000F           main@arrTransmitData 0036  
                     _INTCON2 000FF1                       i2u38_40 0070          __end_of_ADsetChannel 06EC  
                     _DelayMs 0684             __end_of_crc_tab16 7FEF                       __Hparam 0000  
                     __Lparam 0000               __size_of___wmul 0026                       ___lwdiv 0570  
             __CFG_STVREN$OFF 000000                       __pcinit 060C                       __ramtop 0600  
             insertByte@index 0011                       __ptext0 0224                       __ptext1 00BC  
                     __ptext2 06B2                       __ptext3 0570                       __ptext4 06D8  
                     __ptext5 0652                       __ptext6 06EC                       __ptext7 0492  
                     __ptext8 0684                       __ptext9 05C2                     _T2CONbits 000FCA  
                __size_of_isr 00B0                    _insertByte 0360          end_of_initialization 0644  
               __Lmediumconst 7DEE             ?_ADconvertAndRead 000F              main@packetLength 004E  
       __size_of_CRCcalculate 004A               ??_readJoySticks 001C            ??_ADconvertAndRead 0011  
                ?_BuildPacket 0015                     _RCSTAbits 000FAB                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                  _testBuffer 0100          update_crc_16@nextVal 0011                     _PORTAbits 000F80  
                   _PORTBbits 000F81           ADsetChannel@channel 0010                  _CRCcalculate 05C2  
                   _TXSTAbits 000FAC         main@intRightJoystickX 004C         main@intRightJoystickY 004A  
       __end_of_update_crc_16 0570          BuildPacket@ptrPacket 0017                __end_of___wmul 06D8  
                 _BAUDCONbits 000FB8                  DelayMs@count 000F                   ?_insertByte 000F  
                 putch@TxByte 000F         __size_of_ADsetChannel 0014           start_initialization 060C  
                 __end_of_isr 00B8    __end_ofreadJoySticks@F2971 7FF7    __end_ofreadJoySticks@F2969 7FFF  
    ADconvertAndRead@highByte 0015                      ??___wmul 0013                  _ADsetChannel 06D8  
            __CFG_LPT1OSC$OFF 000000                   __pbssBIGRAM 0180                   __pbssCOMRAM 0053  
         CRCcalculate@message 001C                      ?_DelayMs 000F                 _arrDataPacket 0180  
            ___lwdiv@dividend 0015           __size_of_insertByte 00B2             __CFG_CCP2MX$PORTC 000000  
                   __pintcode 0008                     _arrPacket 00C0                 __pmediumconst 7DEE  
        __size_of_BuildPacket 0080                     _crc_tab16 7DEF                      ?___lwdiv 0015  
            ___lwdiv@quotient 0019                __size_of_putch 000C           insertByte@ptrBuffer 000F  
   BuildPacket@ptrCommandData 0015                ___wmul@product 0013                      DelayMs@i 0011  
                    _PIE1bits 000F9D                      _ADresult 0053                      _PIR1bits 000F9E  
                    _PORTBreg 0060       ADconvertAndRead@ADvalue 0013     __size_of_ADconvertAndRead 0032  
                  _ADCON0bits 000FC2                    _ADCON1bits 000FC1                    _ADCON2bits 000FC0  
           ___wmul@multiplier 000F           readJoySticks@ADspan 0026                   _INTCON2bits 000FF1  
            __size_of_DelayMs 002E           readJoySticks@offset 002E                      __Hrparam 0000  
       __end_of_readJoySticks 0224                      __Lrparam 0000              __size_of___lwdiv 0052  
                ??_insertByte 0013               ___lwdiv@divisor 0017               ___lwdiv@counter 001B  
                    __ptext10 0510                      __ptext11 0412                      __ptext12 0360  
               __size_of_main 013C                 __size_of_init 007E            __end_of_insertByte 0412  
          readJoySticks@F2971 7FEF            readJoySticks@F2969 7FF7                      int$flags 0061  
                    _pushFlag 005F                main@LEDcounter 0050                    _INTCONbits 000FF2  
       BuildPacket@dataLength 0019        __size_of_update_crc_16 0060                      intlevel2 0000  
                BuildPacket@i 001A                 _commandBuffer 0080              DelayMs@downCount 0012  
           readJoySticks@span 0032              _ADconvertAndRead 0652         update_crc_16@shortVal 001A  
      BuildPacket@packetIndex 001B                 ??_BuildPacket 0019  
