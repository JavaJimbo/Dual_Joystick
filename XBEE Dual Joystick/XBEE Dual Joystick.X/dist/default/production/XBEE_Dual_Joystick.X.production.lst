

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Apr 06 13:08:32 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18LF2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    25                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    28  0000                     
    29                           ; Version 1.41
    30                           ; Generated 25/01/2017 GMT
    31                           ; 
    32                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18LF2520 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     
    64                           	psect	mediumconst
    65  007DEE                     __pmediumconst:
    66                           	opt stack 0
    67  007DEE  00                 	db	0
    68  007DEF                     _crc_tab16:
    69                           	opt stack 0
    70  007DEF  0000               	dw	0
    71  007DF1  C0C1               	dw	49345
    72  007DF3  C181               	dw	49537
    73  007DF5  0140               	dw	320
    74  007DF7  C301               	dw	49921
    75  007DF9  03C0               	dw	960
    76  007DFB  0280               	dw	640
    77  007DFD  C241               	dw	49729
    78  007DFF  C601               	dw	50689
    79  007E01  06C0               	dw	1728
    80  007E03  0780               	dw	1920
    81  007E05  C741               	dw	51009
    82  007E07  0500               	dw	1280
    83  007E09  C5C1               	dw	50625
    84  007E0B  C481               	dw	50305
    85  007E0D  0440               	dw	1088
    86  007E0F  CC01               	dw	52225
    87  007E11  0CC0               	dw	3264
    88  007E13  0D80               	dw	3456
    89  007E15  CD41               	dw	52545
    90  007E17  0F00               	dw	3840
    91  007E19  CFC1               	dw	53185
    92  007E1B  CE81               	dw	52865
    93  007E1D  0E40               	dw	3648
    94  007E1F  0A00               	dw	2560
    95  007E21  CAC1               	dw	51905
    96  007E23  CB81               	dw	52097
    97  007E25  0B40               	dw	2880
    98  007E27  C901               	dw	51457
    99  007E29  09C0               	dw	2496
   100  007E2B  0880               	dw	2176
   101  007E2D  C841               	dw	51265
   102  007E2F  D801               	dw	55297
   103  007E31  18C0               	dw	6336
   104  007E33  1980               	dw	6528
   105  007E35  D941               	dw	55617
   106  007E37  1B00               	dw	6912
   107  007E39  DBC1               	dw	56257
   108  007E3B  DA81               	dw	55937
   109  007E3D  1A40               	dw	6720
   110  007E3F  1E00               	dw	7680
   111  007E41  DEC1               	dw	57025
   112  007E43  DF81               	dw	57217
   113  007E45  1F40               	dw	8000
   114  007E47  DD01               	dw	56577
   115  007E49  1DC0               	dw	7616
   116  007E4B  1C80               	dw	7296
   117  007E4D  DC41               	dw	56385
   118  007E4F  1400               	dw	5120
   119  007E51  D4C1               	dw	54465
   120  007E53  D581               	dw	54657
   121  007E55  1540               	dw	5440
   122  007E57  D701               	dw	55041
   123  007E59  17C0               	dw	6080
   124  007E5B  1680               	dw	5760
   125  007E5D  D641               	dw	54849
   126  007E5F  D201               	dw	53761
   127  007E61  12C0               	dw	4800
   128  007E63  1380               	dw	4992
   129  007E65  D341               	dw	54081
   130  007E67  1100               	dw	4352
   131  007E69  D1C1               	dw	53697
   132  007E6B  D081               	dw	53377
   133  007E6D  1040               	dw	4160
   134  007E6F  F001               	dw	61441
   135  007E71  30C0               	dw	12480
   136  007E73  3180               	dw	12672
   137  007E75  F141               	dw	61761
   138  007E77  3300               	dw	13056
   139  007E79  F3C1               	dw	62401
   140  007E7B  F281               	dw	62081
   141  007E7D  3240               	dw	12864
   142  007E7F  3600               	dw	13824
   143  007E81  F6C1               	dw	63169
   144  007E83  F781               	dw	63361
   145  007E85  3740               	dw	14144
   146  007E87  F501               	dw	62721
   147  007E89  35C0               	dw	13760
   148  007E8B  3480               	dw	13440
   149  007E8D  F441               	dw	62529
   150  007E8F  3C00               	dw	15360
   151  007E91  FCC1               	dw	64705
   152  007E93  FD81               	dw	64897
   153  007E95  3D40               	dw	15680
   154  007E97  FF01               	dw	65281
   155  007E99  3FC0               	dw	16320
   156  007E9B  3E80               	dw	16000
   157  007E9D  FE41               	dw	65089
   158  007E9F  FA01               	dw	64001
   159  007EA1  3AC0               	dw	15040
   160  007EA3  3B80               	dw	15232
   161  007EA5  FB41               	dw	64321
   162  007EA7  3900               	dw	14592
   163  007EA9  F9C1               	dw	63937
   164  007EAB  F881               	dw	63617
   165  007EAD  3840               	dw	14400
   166  007EAF  2800               	dw	10240
   167  007EB1  E8C1               	dw	59585
   168  007EB3  E981               	dw	59777
   169  007EB5  2940               	dw	10560
   170  007EB7  EB01               	dw	60161
   171  007EB9  2BC0               	dw	11200
   172  007EBB  2A80               	dw	10880
   173  007EBD  EA41               	dw	59969
   174  007EBF  EE01               	dw	60929
   175  007EC1  2EC0               	dw	11968
   176  007EC3  2F80               	dw	12160
   177  007EC5  EF41               	dw	61249
   178  007EC7  2D00               	dw	11520
   179  007EC9  EDC1               	dw	60865
   180  007ECB  EC81               	dw	60545
   181  007ECD  2C40               	dw	11328
   182  007ECF  E401               	dw	58369
   183  007ED1  24C0               	dw	9408
   184  007ED3  2580               	dw	9600
   185  007ED5  E541               	dw	58689
   186  007ED7  2700               	dw	9984
   187  007ED9  E7C1               	dw	59329
   188  007EDB  E681               	dw	59009
   189  007EDD  2640               	dw	9792
   190  007EDF  2200               	dw	8704
   191  007EE1  E2C1               	dw	58049
   192  007EE3  E381               	dw	58241
   193  007EE5  2340               	dw	9024
   194  007EE7  E101               	dw	57601
   195  007EE9  21C0               	dw	8640
   196  007EEB  2080               	dw	8320
   197  007EED  E041               	dw	57409
   198  007EEF  A001               	dw	40961
   199  007EF1  60C0               	dw	24768
   200  007EF3  6180               	dw	24960
   201  007EF5  A141               	dw	41281
   202  007EF7  6300               	dw	25344
   203  007EF9  A3C1               	dw	41921
   204  007EFB  A281               	dw	41601
   205  007EFD  6240               	dw	25152
   206  007EFF  6600               	dw	26112
   207  007F01  A6C1               	dw	42689
   208  007F03  A781               	dw	42881
   209  007F05  6740               	dw	26432
   210  007F07  A501               	dw	42241
   211  007F09  65C0               	dw	26048
   212  007F0B  6480               	dw	25728
   213  007F0D  A441               	dw	42049
   214  007F0F  6C00               	dw	27648
   215  007F11  ACC1               	dw	44225
   216  007F13  AD81               	dw	44417
   217  007F15  6D40               	dw	27968
   218  007F17  AF01               	dw	44801
   219  007F19  6FC0               	dw	28608
   220  007F1B  6E80               	dw	28288
   221  007F1D  AE41               	dw	44609
   222  007F1F  AA01               	dw	43521
   223  007F21  6AC0               	dw	27328
   224  007F23  6B80               	dw	27520
   225  007F25  AB41               	dw	43841
   226  007F27  6900               	dw	26880
   227  007F29  A9C1               	dw	43457
   228  007F2B  A881               	dw	43137
   229  007F2D  6840               	dw	26688
   230  007F2F  7800               	dw	30720
   231  007F31  B8C1               	dw	47297
   232  007F33  B981               	dw	47489
   233  007F35  7940               	dw	31040
   234  007F37  BB01               	dw	47873
   235  007F39  7BC0               	dw	31680
   236  007F3B  7A80               	dw	31360
   237  007F3D  BA41               	dw	47681
   238  007F3F  BE01               	dw	48641
   239  007F41  7EC0               	dw	32448
   240  007F43  7F80               	dw	32640
   241  007F45  BF41               	dw	48961
   242  007F47  7D00               	dw	32000
   243  007F49  BDC1               	dw	48577
   244  007F4B  BC81               	dw	48257
   245  007F4D  7C40               	dw	31808
   246  007F4F  B401               	dw	46081
   247  007F51  74C0               	dw	29888
   248  007F53  7580               	dw	30080
   249  007F55  B541               	dw	46401
   250  007F57  7700               	dw	30464
   251  007F59  B7C1               	dw	47041
   252  007F5B  B681               	dw	46721
   253  007F5D  7640               	dw	30272
   254  007F5F  7200               	dw	29184
   255  007F61  B2C1               	dw	45761
   256  007F63  B381               	dw	45953
   257  007F65  7340               	dw	29504
   258  007F67  B101               	dw	45313
   259  007F69  71C0               	dw	29120
   260  007F6B  7080               	dw	28800
   261  007F6D  B041               	dw	45121
   262  007F6F  5000               	dw	20480
   263  007F71  90C1               	dw	37057
   264  007F73  9181               	dw	37249
   265  007F75  5140               	dw	20800
   266  007F77  9301               	dw	37633
   267  007F79  53C0               	dw	21440
   268  007F7B  5280               	dw	21120
   269  007F7D  9241               	dw	37441
   270  007F7F  9601               	dw	38401
   271  007F81  56C0               	dw	22208
   272  007F83  5780               	dw	22400
   273  007F85  9741               	dw	38721
   274  007F87  5500               	dw	21760
   275  007F89  95C1               	dw	38337
   276  007F8B  9481               	dw	38017
   277  007F8D  5440               	dw	21568
   278  007F8F  9C01               	dw	39937
   279  007F91  5CC0               	dw	23744
   280  007F93  5D80               	dw	23936
   281  007F95  9D41               	dw	40257
   282  007F97  5F00               	dw	24320
   283  007F99  9FC1               	dw	40897
   284  007F9B  9E81               	dw	40577
   285  007F9D  5E40               	dw	24128
   286  007F9F  5A00               	dw	23040
   287  007FA1  9AC1               	dw	39617
   288  007FA3  9B81               	dw	39809
   289  007FA5  5B40               	dw	23360
   290  007FA7  9901               	dw	39169
   291  007FA9  59C0               	dw	22976
   292  007FAB  5880               	dw	22656
   293  007FAD  9841               	dw	38977
   294  007FAF  8801               	dw	34817
   295  007FB1  48C0               	dw	18624
   296  007FB3  4980               	dw	18816
   297  007FB5  8941               	dw	35137
   298  007FB7  4B00               	dw	19200
   299  007FB9  8BC1               	dw	35777
   300  007FBB  8A81               	dw	35457
   301  007FBD  4A40               	dw	19008
   302  007FBF  4E00               	dw	19968
   303  007FC1  8EC1               	dw	36545
   304  007FC3  8F81               	dw	36737
   305  007FC5  4F40               	dw	20288
   306  007FC7  8D01               	dw	36097
   307  007FC9  4DC0               	dw	19904
   308  007FCB  4C80               	dw	19584
   309  007FCD  8C41               	dw	35905
   310  007FCF  4400               	dw	17408
   311  007FD1  84C1               	dw	33985
   312  007FD3  8581               	dw	34177
   313  007FD5  4540               	dw	17728
   314  007FD7  8701               	dw	34561
   315  007FD9  47C0               	dw	18368
   316  007FDB  4680               	dw	18048
   317  007FDD  8641               	dw	34369
   318  007FDF  8201               	dw	33281
   319  007FE1  42C0               	dw	17088
   320  007FE3  4380               	dw	17280
   321  007FE5  8341               	dw	33601
   322  007FE7  4100               	dw	16640
   323  007FE9  81C1               	dw	33217
   324  007FEB  8081               	dw	32897
   325  007FED  4040               	dw	16448
   326  007FEF                     __end_of_crc_tab16:
   327                           	opt stack 0
   328  007FEF                     readJoySticks@F2976:
   329                           	opt stack 0
   330  007FEF  0096               	dw	150
   331  007FF1  00C8               	dw	200
   332  007FF3  00C8               	dw	200
   333  007FF5  00C8               	dw	200
   334  007FF7                     __end_ofreadJoySticks@F2976:
   335                           	opt stack 0
   336  007FF7                     readJoySticks@F2974:
   337                           	opt stack 0
   338  007FF7  01C2               	dw	450
   339  007FF9  0190               	dw	400
   340  007FFB  01AE               	dw	430
   341  007FFD  0190               	dw	400
   342  007FFF                     __end_ofreadJoySticks@F2974:
   343                           	opt stack 0
   344  0000                     _ADRESL	set	4035
   345  0000                     _ADRESH	set	4036
   346  0000                     _ADCON0bits	set	4034
   347  0000                     _TXREG	set	4013
   348  0000                     _PIR1bits	set	3998
   349  0000                     _PORTB	set	3969
   350  0000                     _INTCON2	set	4081
   351  0000                     _INTCON	set	4082
   352  0000                     _T2CONbits	set	4042
   353  0000                     _T2CON	set	4042
   354  0000                     _PR2	set	4043
   355  0000                     _BAUDCONbits	set	4024
   356  0000                     _PIE1bits	set	3997
   357  0000                     _RCSTAbits	set	4011
   358  0000                     _SPBRG	set	4015
   359  0000                     _TXSTAbits	set	4012
   360  0000                     _TRISC	set	3988
   361  0000                     _INTCON2bits	set	4081
   362  0000                     _TRISB	set	3987
   363  0000                     _PORTAbits	set	3968
   364  0000                     _TRISA	set	3986
   365  0000                     _ADCON2bits	set	4032
   366  0000                     _ADCON2	set	4032
   367  0000                     _ADCON1bits	set	4033
   368  0000                     _ADCON0	set	4034
   369  0000                     _INTCONbits	set	4082
   370  0000                     _PORTBbits	set	3969
   371  0000                     _TMR2IF	set	31985
   372                           
   373                           ; #config settings
   374  007FFF  00                 	db	0	; dummy byte at the end
   375  0000                     
   376                           	psect	cinit
   377  0005C6                     __pcinit:
   378                           	opt stack 0
   379  0005C6                     start_initialization:
   380                           	opt stack 0
   381  0005C6                     __initialization:
   382                           	opt stack 0
   383                           
   384                           ; Clear objects allocated to BIGRAM (1024 bytes)
   385  0005C6  EE01  F080         	lfsr	0,__pbssBIGRAM
   386  0005CA  EE14 F000          	lfsr	1,1024
   387  0005CE                     clear_0:
   388  0005CE  6AEE               	clrf	postinc0,c
   389  0005D0  50E5               	movf	postdec1,w,c
   390  0005D2  50E1               	movf	fsr1l,w,c
   391  0005D4  E1FC               	bnz	clear_0
   392  0005D6  50E2               	movf	fsr1h,w,c
   393  0005D8  E1FA               	bnz	clear_0
   394                           
   395                           ; Clear objects allocated to BANK1 (128 bytes)
   396  0005DA  EE01  F000         	lfsr	0,__pbssBANK1
   397  0005DE  0E80               	movlw	128
   398  0005E0                     clear_1:
   399  0005E0  6AEE               	clrf	postinc0,c
   400  0005E2  06E8               	decf	wreg,f,c
   401  0005E4  E1FD               	bnz	clear_1
   402                           
   403                           ; Clear objects allocated to BANK0 (64 bytes)
   404  0005E6  EE00  F080         	lfsr	0,__pbssBANK0
   405  0005EA  0E40               	movlw	64
   406  0005EC                     clear_2:
   407  0005EC  6AEE               	clrf	postinc0,c
   408  0005EE  06E8               	decf	wreg,f,c
   409  0005F0  E1FD               	bnz	clear_2
   410                           
   411                           ; Clear objects allocated to COMRAM (46 bytes)
   412  0005F2  EE00  F036         	lfsr	0,__pbssCOMRAM
   413  0005F6  0E2E               	movlw	46
   414  0005F8                     clear_3:
   415  0005F8  6AEE               	clrf	postinc0,c
   416  0005FA  06E8               	decf	wreg,f,c
   417  0005FC  E1FD               	bnz	clear_3
   418  0005FE                     end_of_initialization:
   419                           	opt stack 0
   420  0005FE                     __end_of__initialization:
   421                           	opt stack 0
   422  0005FE  9064               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   423  000600  9264               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   424  000602  0E00               	movlw	low (__Lmediumconst shr (0+16))
   425  000604  6EF8               	movwf	tblptru,c
   426  000606  0100               	movlb	0
   427  000608  EF12  F001         	goto	_main	;jump to C main() function
   428                           tblptru	equ	0xFF8
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           postdec1	equ	0xFE5
   432                           fsr1h	equ	0xFE2
   433                           fsr1l	equ	0xFE1
   434                           
   435                           	psect	bssCOMRAM
   436  000036                     __pbssCOMRAM:
   437                           	opt stack 0
   438  000036                     _ADresult:
   439                           	opt stack 0
   440  000036                     	ds	8
   441  00003E                     isr@Timer2Counter:
   442                           	opt stack 0
   443  00003E                     	ds	2
   444  000040                     readJoySticks@ADchannel:
   445                           	opt stack 0
   446  000040                     	ds	1
   447  000041                     _Timer2flag:
   448                           	opt stack 0
   449  000041                     	ds	1
   450  000042                     _pushFlag:
   451                           	opt stack 0
   452  000042                     	ds	1
   453  000043                     _PORTBreg:
   454                           	opt stack 0
   455  000043                     	ds	1
   456  000044                     _packet:
   457                           	opt stack 0
   458  000044                     	ds	32
   459                           tblptru	equ	0xFF8
   460                           postinc0	equ	0xFEE
   461                           wreg	equ	0xFE8
   462                           postdec1	equ	0xFE5
   463                           fsr1h	equ	0xFE2
   464                           fsr1l	equ	0xFE1
   465                           
   466                           	psect	bssBANK0
   467  000080                     __pbssBANK0:
   468                           	opt stack 0
   469  000080                     _commandBuffer:
   470                           	opt stack 0
   471  000080                     	ds	64
   472                           tblptru	equ	0xFF8
   473                           postinc0	equ	0xFEE
   474                           wreg	equ	0xFE8
   475                           postdec1	equ	0xFE5
   476                           fsr1h	equ	0xFE2
   477                           fsr1l	equ	0xFE1
   478                           
   479                           	psect	bssBANK1
   480  000100                     __pbssBANK1:
   481                           	opt stack 0
   482  000100                     _testBuffer:
   483                           	opt stack 0
   484  000100                     	ds	128
   485                           tblptru	equ	0xFF8
   486                           postinc0	equ	0xFEE
   487                           wreg	equ	0xFE8
   488                           postdec1	equ	0xFE5
   489                           fsr1h	equ	0xFE2
   490                           fsr1l	equ	0xFE1
   491                           
   492                           	psect	bssBIGRAM
   493  000180                     __pbssBIGRAM:
   494                           	opt stack 0
   495  000180                     _arrDataPacket:
   496                           	opt stack 0
   497  000180                     	ds	1024
   498                           tblptru	equ	0xFF8
   499                           postinc0	equ	0xFEE
   500                           wreg	equ	0xFE8
   501                           postdec1	equ	0xFE5
   502                           fsr1h	equ	0xFE2
   503                           fsr1l	equ	0xFE1
   504                           
   505                           	psect	cstackBANK0
   506  0000C0                     __pcstackBANK0:
   507                           	opt stack 0
   508  0000C0                     main@intLeftJoystickY:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x0
   512  0000C0                     	ds	2
   513  0000C2                     main@intLeftJoystickX:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x2
   517  0000C2                     	ds	2
   518  0000C4                     main@intRightJoystickY:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x4
   522  0000C4                     	ds	2
   523  0000C6                     main@intRightJoystickX:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x6
   527  0000C6                     	ds	2
   528  0000C8                     main@arrJoystickData:
   529                           	opt stack 0
   530                           
   531                           ; 8 bytes @ 0x8
   532  0000C8                     	ds	8
   533  0000D0                     main@packetLength:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x10
   537  0000D0                     	ds	1
   538  0000D1                     main@i:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x11
   542  0000D1                     	ds	1
   543  0000D2                     main@LEDcounter:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x12
   547  0000D2                     	ds	1
   548  0000D3                     main@convert:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x13
   552  0000D3                     	ds	2
   553                           tblptru	equ	0xFF8
   554                           postinc0	equ	0xFEE
   555                           wreg	equ	0xFE8
   556                           postdec1	equ	0xFE5
   557                           fsr1h	equ	0xFE2
   558                           fsr1l	equ	0xFE1
   559                           
   560                           	psect	cstackCOMRAM
   561  000001                     __pcstackCOMRAM:
   562                           	opt stack 0
   563  000001                     ??_isr:
   564  000001                     
   565                           ; 1 bytes @ 0x0
   566  000001                     	ds	14
   567  00000F                     ??_ADsetChannel:
   568  00000F                     ?_ADconvertAndRead:
   569                           	opt stack 0
   570  00000F                     ?___wmul:
   571                           	opt stack 0
   572  00000F                     putch@TxByte:
   573                           	opt stack 0
   574  00000F                     insertByte@ptrBuffer:
   575                           	opt stack 0
   576  00000F                     DelayMs@count:
   577                           	opt stack 0
   578  00000F                     ___wmul@multiplier:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0xE
   582  00000F                     	ds	1
   583  000010                     ADsetChannel@channel:
   584                           	opt stack 0
   585                           
   586                           ; 1 bytes @ 0xF
   587  000010                     	ds	1
   588  000011                     ??_ADconvertAndRead:
   589  000011                     DelayMs@i:
   590                           	opt stack 0
   591  000011                     insertByte@index:
   592                           	opt stack 0
   593  000011                     ___wmul@multiplicand:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x10
   597  000011                     	ds	1
   598  000012                     DelayMs@downCount:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x11
   602  000012                     	ds	1
   603  000013                     ??_insertByte:
   604  000013                     ADconvertAndRead@ADvalue:
   605                           	opt stack 0
   606  000013                     ___wmul@product:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x12
   610  000013                     	ds	1
   611  000014                     insertByte@dataByte:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x13
   615  000014                     	ds	1
   616  000015                     ?___lwdiv:
   617                           	opt stack 0
   618  000015                     BuildPacket@subCommand:
   619                           	opt stack 0
   620  000015                     ADconvertAndRead@highByte:
   621                           	opt stack 0
   622  000015                     ___lwdiv@dividend:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x14
   626  000015                     	ds	1
   627  000016                     BuildPacket@dataLength:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x15
   631  000016                     	ds	1
   632  000017                     BuildPacket@ptrData:
   633                           	opt stack 0
   634  000017                     ___lwdiv@divisor:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x16
   638  000017                     	ds	2
   639  000019                     ___lwdiv@counter:
   640                           	opt stack 0
   641  000019                     BuildPacket@ptrPacket:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x18
   645  000019                     	ds	1
   646  00001A                     ___lwdiv@quotient:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x19
   650  00001A                     	ds	1
   651  00001B                     BuildPacket@command:
   652                           	opt stack 0
   653                           
   654                           ; 1 bytes @ 0x1A
   655  00001B                     	ds	1
   656  00001C                     ??_readJoySticks:
   657  00001C                     BuildPacket@i:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x1B
   661  00001C                     	ds	1
   662  00001D                     BuildPacket@packetIndex:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x1C
   666  00001D                     	ds	1
   667  00001E                     readJoySticks@ADoffset:
   668                           	opt stack 0
   669                           
   670                           ; 8 bytes @ 0x1D
   671  00001E                     	ds	8
   672  000026                     readJoySticks@ADspan:
   673                           	opt stack 0
   674                           
   675                           ; 8 bytes @ 0x25
   676  000026                     	ds	8
   677  00002E                     readJoySticks@offset:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x2D
   681  00002E                     	ds	2
   682  000030                     readJoySticks@ADrawReading:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x2F
   686  000030                     	ds	2
   687  000032                     readJoySticks@span:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x31
   691  000032                     	ds	2
   692  000034                     readJoySticks@joyStickReading:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x33
   696  000034                     	ds	2
   697  000036                     tblptru	equ	0xFF8
   698                           postinc0	equ	0xFEE
   699                           wreg	equ	0xFE8
   700                           postdec1	equ	0xFE5
   701                           fsr1h	equ	0xFE2
   702                           fsr1l	equ	0xFE1
   703                           
   704                           ; 1 bytes @ 0x35
   705 ;;
   706 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   707 ;;
   708 ;; *************** function _main *****************
   709 ;; Defined at:
   710 ;;		line 77 in file "../main.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;		None
   713 ;; Auto vars:     Size  Location     Type
   714 ;;  arrJoystickD    8    8[BANK0 ] unsigned char [8]
   715 ;;  convert         2   19[BANK0 ] struct convertType
   716 ;;  intRightJoys    2    6[BANK0 ] short 
   717 ;;  intRightJoys    2    4[BANK0 ] short 
   718 ;;  intLeftJoyst    2    2[BANK0 ] short 
   719 ;;  intLeftJoyst    2    0[BANK0 ] short 
   720 ;;  LEDcounter      1   18[BANK0 ] unsigned char 
   721 ;;  i               1   17[BANK0 ] unsigned char 
   722 ;;  packetLength    1   16[BANK0 ] unsigned char 
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   732 ;;      Params:         0       0       0       0       0       0       0
   733 ;;      Locals:         0      21       0       0       0       0       0
   734 ;;      Temps:          0       0       0       0       0       0       0
   735 ;;      Totals:         0      21       0       0       0       0       0
   736 ;;Total ram usage:       21 bytes
   737 ;; Hardware stack levels required when called:    3
   738 ;; This function calls:
   739 ;;		_BuildPacket
   740 ;;		_DelayMs
   741 ;;		_init
   742 ;;		_putch
   743 ;;		_readJoySticks
   744 ;; This function is called by:
   745 ;;		Startup code after reset
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text0
   750  000224                     __ptext0:
   751                           	opt stack 0
   752  000224                     _main:
   753                           	opt stack 28
   754                           
   755                           ;main.c: 78: short intLeftJoystickY, intLeftJoystickX, intRightJoystickY, intRightJoysti
      +                          ckX;
   756                           ;main.c: 81: unsigned char arrJoystickData[8];
   757                           ;main.c: 96: unsigned char packetLength, i;
   758                           ;main.c: 97: unsigned char LEDcounter = 0;
   759                           
   760                           ;incstack = 0
   761  000224  0E00               	movlw	0
   762  000226  0100               	movlb	0	; () banked
   763  000228  6FD2               	movwf	main@LEDcounter& (0+255),b
   764                           
   765                           ; BSR set to: 0
   766                           ;main.c: 98: union convertType {
   767                           ;main.c: 99: unsigned char byte[2];
   768                           ;main.c: 100: int integer;
   769                           ;main.c: 101: } convert;
   770                           ;main.c: 103: init();
   771  00022A  EC7B  F002         	call	_init	;wreg free
   772                           
   773                           ;main.c: 104: DelayMs(200);
   774  00022E  0E00               	movlw	0
   775  000230  6E10               	movwf	DelayMs@count+1,c
   776  000232  0EC8               	movlw	200
   777  000234  6E0F               	movwf	DelayMs@count,c
   778  000236  EC1F  F003         	call	_DelayMs	;wreg free
   779                           
   780                           ;main.c: 105: PORTBbits.RB0 = PORTBbits.RB1 = PORTBbits.RB2 = 1;
   781  00023A  8481               	bsf	3969,2,c	;volatile
   782  00023C  8281               	bsf	3969,1,c	;volatile
   783  00023E  8081               	bsf	3969,0,c	;volatile
   784  000240                     l1823:
   785                           
   786                           ;main.c: 107: {
   787                           ;main.c: 108: if (Timer2flag)
   788  000240  5041               	movf	_Timer2flag,w,c
   789  000242  B4D8               	btfsc	status,2,c
   790  000244  D7FD               	goto	l1823
   791                           
   792                           ;main.c: 109: {
   793                           ;main.c: 110: Timer2flag = 0;
   794  000246  0E00               	movlw	0
   795  000248  6E41               	movwf	_Timer2flag,c
   796                           
   797                           ;main.c: 111: LEDcounter++;
   798  00024A  0100               	movlb	0	; () banked
   799  00024C  2BD2               	incf	main@LEDcounter& (0+255),f,b
   800                           
   801                           ; BSR set to: 0
   802                           ;main.c: 112: if (LEDcounter == 4)
   803  00024E  0E04               	movlw	4
   804  000250  0100               	movlb	0	; () banked
   805  000252  19D2               	xorwf	main@LEDcounter& (0+255),w,b
   806  000254  A4D8               	btfss	status,2,c
   807  000256  D003               	goto	l1833
   808                           
   809                           ; BSR set to: 0
   810                           ;main.c: 113: {
   811                           ;main.c: 114: PORTBbits.RB0 = 1;
   812  000258  8081               	bsf	3969,0,c	;volatile
   813                           
   814                           ;main.c: 115: PORTBbits.RB1 = 0;
   815  00025A  9281               	bcf	3969,1,c	;volatile
   816  00025C  D007               	goto	L1
   817  00025E                     l1833:
   818                           
   819                           ; BSR set to: 0
   820                           ;main.c: 118: else if (LEDcounter == 8)
   821  00025E  0E08               	movlw	8
   822  000260  0100               	movlb	0	; () banked
   823  000262  19D2               	xorwf	main@LEDcounter& (0+255),w,b
   824  000264  A4D8               	btfss	status,2,c
   825  000266  D004               	goto	l1837
   826                           
   827                           ; BSR set to: 0
   828                           ;main.c: 119: {
   829                           ;main.c: 120: PORTBbits.RB0 = 0;
   830  000268  9081               	bcf	3969,0,c	;volatile
   831                           
   832                           ;main.c: 121: PORTBbits.RB1 = 1;
   833  00026A  8281               	bsf	3969,1,c	;volatile
   834  00026C                     L1:
   835                           
   836                           ;main.c: 122: PORTBbits.RB2 = 0;
   837  00026C  9481               	bcf	3969,2,c	;volatile
   838                           
   839                           ;main.c: 123: }
   840  00026E  D00A               	goto	l1843
   841  000270                     l1837:
   842                           
   843                           ; BSR set to: 0
   844                           ;main.c: 124: else if (LEDcounter >= 12)
   845  000270  0E0B               	movlw	11
   846  000272  0100               	movlb	0	; () banked
   847  000274  65D2               	cpfsgt	main@LEDcounter& (0+255),b
   848  000276  D006               	goto	l1843
   849                           
   850                           ; BSR set to: 0
   851                           ;main.c: 125: {
   852                           ;main.c: 126: PORTBbits.RB0 = 0;
   853  000278  9081               	bcf	3969,0,c	;volatile
   854                           
   855                           ;main.c: 127: PORTBbits.RB1 = 0;
   856  00027A  9281               	bcf	3969,1,c	;volatile
   857                           
   858                           ;main.c: 128: PORTBbits.RB2 = 1;
   859  00027C  8481               	bsf	3969,2,c	;volatile
   860                           
   861                           ; BSR set to: 0
   862                           ;main.c: 129: LEDcounter = 0;
   863  00027E  0E00               	movlw	0
   864  000280  0100               	movlb	0	; () banked
   865  000282  6FD2               	movwf	main@LEDcounter& (0+255),b
   866  000284                     l1843:
   867                           
   868                           ; BSR set to: 0
   869                           ;main.c: 130: }
   870                           ;main.c: 132: readJoySticks();
   871  000284  EC5E  F000         	call	_readJoySticks	;wreg free
   872                           
   873                           ;main.c: 135: intLeftJoystickX = ((short) ADresult[1]) - 127;
   874  000288  0E81               	movlw	129
   875  00028A  2438               	addwf	_ADresult+2,w,c
   876  00028C  0100               	movlb	0	; () banked
   877  00028E  6FC2               	movwf	main@intLeftJoystickX& (0+255),b
   878  000290  0EFF               	movlw	255
   879  000292  2039               	addwfc	_ADresult+3,w,c
   880  000294  0100               	movlb	0	; () banked
   881  000296  6FC3               	movwf	(main@intLeftJoystickX+1)& (0+255),b
   882                           
   883                           ; BSR set to: 0
   884                           ;main.c: 136: intLeftJoystickY = ((short) ADresult[0]) - 127;
   885  000298  0E81               	movlw	129
   886  00029A  2436               	addwf	_ADresult,w,c
   887  00029C  0100               	movlb	0	; () banked
   888  00029E  6FC0               	movwf	main@intLeftJoystickY& (0+255),b
   889  0002A0  0EFF               	movlw	255
   890  0002A2  2037               	addwfc	_ADresult+1,w,c
   891  0002A4  0100               	movlb	0	; () banked
   892  0002A6  6FC1               	movwf	(main@intLeftJoystickY+1)& (0+255),b
   893                           
   894                           ; BSR set to: 0
   895                           ;main.c: 137: intRightJoystickX = ((short) ADresult[3]) - 127;
   896  0002A8  0E81               	movlw	129
   897  0002AA  243C               	addwf	_ADresult+6,w,c
   898  0002AC  0100               	movlb	0	; () banked
   899  0002AE  6FC6               	movwf	main@intRightJoystickX& (0+255),b
   900  0002B0  0EFF               	movlw	255
   901  0002B2  203D               	addwfc	_ADresult+7,w,c
   902  0002B4  0100               	movlb	0	; () banked
   903  0002B6  6FC7               	movwf	(main@intRightJoystickX+1)& (0+255),b
   904                           
   905                           ; BSR set to: 0
   906                           ;main.c: 138: intRightJoystickY = ((short) ADresult[2]) - 127;
   907  0002B8  0E81               	movlw	129
   908  0002BA  243A               	addwf	_ADresult+4,w,c
   909  0002BC  0100               	movlb	0	; () banked
   910  0002BE  6FC4               	movwf	main@intRightJoystickY& (0+255),b
   911  0002C0  0EFF               	movlw	255
   912  0002C2  203B               	addwfc	_ADresult+5,w,c
   913  0002C4  0100               	movlb	0	; () banked
   914  0002C6  6FC5               	movwf	(main@intRightJoystickY+1)& (0+255),b
   915                           
   916                           ; BSR set to: 0
   917                           ;main.c: 140: convert.integer = intLeftJoystickX;
   918  0002C8  C0C2  F0D3         	movff	main@intLeftJoystickX,main@convert
   919  0002CC  C0C3  F0D4         	movff	main@intLeftJoystickX+1,main@convert+1
   920                           
   921                           ; BSR set to: 0
   922                           ;main.c: 141: arrJoystickData[0] = convert.byte[0];
   923  0002D0  C0D3  F0C8         	movff	main@convert,main@arrJoystickData
   924                           
   925                           ; BSR set to: 0
   926                           ;main.c: 142: arrJoystickData[1] = convert.byte[1];
   927  0002D4  C0D4  F0C9         	movff	main@convert+1,main@arrJoystickData+1
   928                           
   929                           ; BSR set to: 0
   930                           ;main.c: 144: convert.integer = intLeftJoystickY;
   931  0002D8  C0C0  F0D3         	movff	main@intLeftJoystickY,main@convert
   932  0002DC  C0C1  F0D4         	movff	main@intLeftJoystickY+1,main@convert+1
   933                           
   934                           ; BSR set to: 0
   935                           ;main.c: 145: arrJoystickData[2] = convert.byte[0];
   936  0002E0  C0D3  F0CA         	movff	main@convert,main@arrJoystickData+2
   937                           
   938                           ; BSR set to: 0
   939                           ;main.c: 146: arrJoystickData[3] = convert.byte[1];
   940  0002E4  C0D4  F0CB         	movff	main@convert+1,main@arrJoystickData+3
   941                           
   942                           ; BSR set to: 0
   943                           ;main.c: 148: convert.integer = intRightJoystickX;
   944  0002E8  C0C6  F0D3         	movff	main@intRightJoystickX,main@convert
   945  0002EC  C0C7  F0D4         	movff	main@intRightJoystickX+1,main@convert+1
   946                           
   947                           ; BSR set to: 0
   948                           ;main.c: 149: arrJoystickData[4] = convert.byte[0];
   949  0002F0  C0D3  F0CC         	movff	main@convert,main@arrJoystickData+4
   950                           
   951                           ; BSR set to: 0
   952                           ;main.c: 150: arrJoystickData[5] = convert.byte[1];
   953  0002F4  C0D4  F0CD         	movff	main@convert+1,main@arrJoystickData+5
   954                           
   955                           ; BSR set to: 0
   956                           ;main.c: 152: convert.integer = intRightJoystickY;
   957  0002F8  C0C4  F0D3         	movff	main@intRightJoystickY,main@convert
   958  0002FC  C0C5  F0D4         	movff	main@intRightJoystickY+1,main@convert+1
   959                           
   960                           ; BSR set to: 0
   961                           ;main.c: 153: arrJoystickData[6] = convert.byte[0];
   962  000300  C0D3  F0CE         	movff	main@convert,main@arrJoystickData+6
   963                           
   964                           ; BSR set to: 0
   965                           ;main.c: 154: arrJoystickData[7] = convert.byte[1];
   966  000304  C0D4  F0CF         	movff	main@convert+1,main@arrJoystickData+7
   967                           
   968                           ; BSR set to: 0
   969                           ;main.c: 182: packetLength = BuildPacket(0, 145, 8, arrJoystickData, packet);
   970  000308  0E91               	movlw	145
   971  00030A  6E15               	movwf	BuildPacket@subCommand,c
   972  00030C  0E08               	movlw	8
   973  00030E  6E16               	movwf	BuildPacket@dataLength,c
   974  000310  0EC8               	movlw	low main@arrJoystickData
   975  000312  6E17               	movwf	BuildPacket@ptrData,c
   976  000314  0E00               	movlw	high main@arrJoystickData
   977  000316  6E18               	movwf	BuildPacket@ptrData+1,c
   978  000318  0E44               	movlw	low _packet
   979  00031A  6E19               	movwf	BuildPacket@ptrPacket,c
   980  00031C  0E00               	movlw	high _packet
   981  00031E  6E1A               	movwf	BuildPacket@ptrPacket+1,c
   982  000320  0E00               	movlw	0
   983  000322  ECB2  F001         	call	_BuildPacket
   984  000326  0100               	movlb	0	; () banked
   985  000328  6FD0               	movwf	main@packetLength& (0+255),b
   986                           
   987                           ; BSR set to: 0
   988                           ;main.c: 183: if (packetLength < 32) for (i = 0; i < packetLength; i++) putch(packet[i])
      +                          ;
   989  00032A  0E20               	movlw	32
   990  00032C  0100               	movlb	0	; () banked
   991  00032E  61D0               	cpfslt	main@packetLength& (0+255),b
   992  000330  D787               	goto	l1823
   993                           
   994                           ; BSR set to: 0
   995  000332  0E00               	movlw	0
   996  000334  0100               	movlb	0	; () banked
   997  000336  6FD1               	movwf	main@i& (0+255),b
   998  000338  D00E               	goto	l1887
   999  00033A                     l1883:
  1000                           
  1001                           ; BSR set to: 0
  1002  00033A  0100               	movlb	0	; () banked
  1003  00033C  51D1               	movf	main@i& (0+255),w,b
  1004  00033E  0D01               	mullw	1
  1005  000340  0E44               	movlw	low _packet
  1006  000342  24F3               	addwf	prodl,w,c
  1007  000344  6ED9               	movwf	fsr2l,c
  1008  000346  0E00               	movlw	high _packet
  1009  000348  20F4               	addwfc	prodh,w,c
  1010  00034A  6EDA               	movwf	fsr2h,c
  1011  00034C  50DF               	movf	indf2,w,c
  1012  00034E  EC53  F003         	call	_putch
  1013  000352  0100               	movlb	0	; () banked
  1014  000354  2BD1               	incf	main@i& (0+255),f,b
  1015  000356                     l1887:
  1016                           
  1017                           ; BSR set to: 0
  1018  000356  0100               	movlb	0	; () banked
  1019  000358  51D0               	movf	main@packetLength& (0+255),w,b
  1020  00035A  0100               	movlb	0	; () banked
  1021  00035C  5DD1               	subwf	main@i& (0+255),w,b
  1022  00035E  B0D8               	btfsc	status,0,c
  1023  000360  D76F               	goto	l1823
  1024  000362  D7EB               	goto	l1883
  1025  000364                     __end_of_main:
  1026                           	opt stack 0
  1027                           tblptru	equ	0xFF8
  1028                           prodh	equ	0xFF4
  1029                           prodl	equ	0xFF3
  1030                           postinc0	equ	0xFEE
  1031                           wreg	equ	0xFE8
  1032                           postdec1	equ	0xFE5
  1033                           fsr1h	equ	0xFE2
  1034                           fsr1l	equ	0xFE1
  1035                           indf2	equ	0xFDF
  1036                           fsr2h	equ	0xFDA
  1037                           fsr2l	equ	0xFD9
  1038                           status	equ	0xFD8
  1039                           
  1040 ;; *************** function _readJoySticks *****************
  1041 ;; Defined at:
  1042 ;;		line 311 in file "../main.c"
  1043 ;; Parameters:    Size  Location     Type
  1044 ;;		None
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;  ADspan          8   37[COMRAM] const unsigned short [4]
  1047 ;;  ADoffset        8   29[COMRAM] const unsigned short [4]
  1048 ;;  joyStickRead    2   51[COMRAM] unsigned short 
  1049 ;;  span            2   49[COMRAM] unsigned short 
  1050 ;;  ADrawReading    2   47[COMRAM] short 
  1051 ;;  offset          2   45[COMRAM] unsigned short 
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1061 ;;      Params:         0       0       0       0       0       0       0
  1062 ;;      Locals:        24       0       0       0       0       0       0
  1063 ;;      Temps:          2       0       0       0       0       0       0
  1064 ;;      Totals:        26       0       0       0       0       0       0
  1065 ;;Total ram usage:       26 bytes
  1066 ;; Hardware stack levels used:    1
  1067 ;; Hardware stack levels required when called:    2
  1068 ;; This function calls:
  1069 ;;		_ADconvertAndRead
  1070 ;;		_ADsetChannel
  1071 ;;		___lwdiv
  1072 ;;		___wmul
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           	psect	text1
  1079  0000BC                     __ptext1:
  1080                           	opt stack 0
  1081  0000BC                     _readJoySticks:
  1082                           	opt stack 28
  1083                           
  1084                           ;main.c: 312: static unsigned char ADchannel = 0;
  1085                           ;main.c: 313: const unsigned short ADoffset[] = {450, 400, 430, 400};
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;incstack = 0
  1089  0000BC  0EF7               	movlw	low readJoySticks@F2974
  1090  0000BE  6EF6               	movwf	tblptrl,c
  1091  0000C0                     	if	1	;There is more than 1 active tblptr byte
  1092  0000C0  0E7F               	movlw	high readJoySticks@F2974
  1093  0000C2  6EF7               	movwf	tblptrh,c
  1094  0000C4                     	endif
  1095  0000C4                     	if	0	;There are less than 3 active tblptr bytes
  1096  0000C4                     	endif
  1097  0000C4  EE20  F01E         	lfsr	2,readJoySticks@ADoffset
  1098  0000C8  0E07               	movlw	7
  1099  0000CA                     u1050:
  1100  0000CA  0009               	tblrd		*+
  1101  0000CC  CFF5 FFDE          	movff	tablat,postinc2
  1102  0000D0  06E8               	decf	wreg,f,c
  1103  0000D2  E2FB               	bc	u1050
  1104                           
  1105                           ;main.c: 314: const unsigned short ADspan[] = {150, 200, 200, 200};
  1106  0000D4  0EEF               	movlw	low readJoySticks@F2976
  1107  0000D6  6EF6               	movwf	tblptrl,c
  1108  0000D8                     	if	1	;There is more than 1 active tblptr byte
  1109  0000D8  0E7F               	movlw	high readJoySticks@F2976
  1110  0000DA  6EF7               	movwf	tblptrh,c
  1111  0000DC                     	endif
  1112  0000DC                     	if	0	;There are less than 3 active tblptr bytes
  1113  0000DC                     	endif
  1114  0000DC  EE20  F026         	lfsr	2,readJoySticks@ADspan
  1115  0000E0  0E07               	movlw	7
  1116  0000E2                     u1060:
  1117  0000E2  0009               	tblrd		*+
  1118  0000E4  CFF5 FFDE          	movff	tablat,postinc2
  1119  0000E8  06E8               	decf	wreg,f,c
  1120  0000EA  E2FB               	bc	u1060
  1121                           
  1122                           ;main.c: 315: unsigned short joyStickReading, offset, span;
  1123                           ;main.c: 316: short ADrawReading;
  1124                           ;main.c: 318: ADrawReading = ADconvertAndRead();
  1125  0000EC  EC06  F003         	call	_ADconvertAndRead	;wreg free
  1126  0000F0  C00F  F030         	movff	?_ADconvertAndRead,readJoySticks@ADrawReading
  1127  0000F4  C010  F031         	movff	?_ADconvertAndRead+1,readJoySticks@ADrawReading+1
  1128                           
  1129                           ;main.c: 320: if (ADchannel == 0 || ADchannel == 2) joyStickReading = 1023 - ADrawReadin
      +                          g;
  1130  0000F8  5040               	movf	readJoySticks@ADchannel,w,c
  1131  0000FA  B4D8               	btfsc	status,2,c
  1132  0000FC  D004               	goto	l1731
  1133  0000FE  0E02               	movlw	2
  1134  000100  1840               	xorwf	readJoySticks@ADchannel,w,c
  1135  000102  A4D8               	btfss	status,2,c
  1136  000104  D00F               	goto	l132
  1137  000106                     l1731:
  1138  000106  C030  F01C         	movff	readJoySticks@ADrawReading,??_readJoySticks
  1139  00010A  C031  F01D         	movff	readJoySticks@ADrawReading+1,??_readJoySticks+1
  1140  00010E  1E1C               	comf	??_readJoySticks,f,c
  1141  000110  1E1D               	comf	??_readJoySticks+1,f,c
  1142  000112  4A1C               	infsnz	??_readJoySticks,f,c
  1143  000114  2A1D               	incf	??_readJoySticks+1,f,c
  1144  000116  0EFF               	movlw	255
  1145  000118  241C               	addwf	??_readJoySticks,w,c
  1146  00011A  6E34               	movwf	readJoySticks@joyStickReading,c
  1147  00011C  0E03               	movlw	3
  1148  00011E  201D               	addwfc	??_readJoySticks+1,w,c
  1149  000120  6E35               	movwf	readJoySticks@joyStickReading+1,c
  1150  000122  D004               	goto	l1733
  1151  000124                     l132:
  1152                           
  1153                           ;main.c: 321: else joyStickReading = ADrawReading;
  1154  000124  C030  F034         	movff	readJoySticks@ADrawReading,readJoySticks@joyStickReading
  1155  000128  C031  F035         	movff	readJoySticks@ADrawReading+1,readJoySticks@joyStickReading+1
  1156  00012C                     l1733:
  1157                           
  1158                           ;main.c: 323: offset = ADoffset[ADchannel];
  1159  00012C  5040               	movf	readJoySticks@ADchannel,w,c
  1160  00012E  0D02               	mullw	2
  1161  000130  0E1E               	movlw	low readJoySticks@ADoffset
  1162  000132  24F3               	addwf	prodl,w,c
  1163  000134  6ED9               	movwf	fsr2l,c
  1164  000136  0E00               	movlw	high readJoySticks@ADoffset
  1165  000138  20F4               	addwfc	prodh,w,c
  1166  00013A  6EDA               	movwf	fsr2h,c
  1167  00013C  CFDE F02E          	movff	postinc2,readJoySticks@offset
  1168  000140  CFDD F02F          	movff	postdec2,readJoySticks@offset+1
  1169                           
  1170                           ;main.c: 324: span = ADspan[ADchannel];
  1171  000144  5040               	movf	readJoySticks@ADchannel,w,c
  1172  000146  0D02               	mullw	2
  1173  000148  0E26               	movlw	low readJoySticks@ADspan
  1174  00014A  24F3               	addwf	prodl,w,c
  1175  00014C  6ED9               	movwf	fsr2l,c
  1176  00014E  0E00               	movlw	high readJoySticks@ADspan
  1177  000150  20F4               	addwfc	prodh,w,c
  1178  000152  6EDA               	movwf	fsr2h,c
  1179  000154  CFDE F032          	movff	postinc2,readJoySticks@span
  1180  000158  CFDD F033          	movff	postdec2,readJoySticks@span+1
  1181                           
  1182                           ;main.c: 325: if (joyStickReading < offset) joyStickReading = 0;
  1183  00015C  502E               	movf	readJoySticks@offset,w,c
  1184  00015E  5C34               	subwf	readJoySticks@joyStickReading,w,c
  1185  000160  502F               	movf	readJoySticks@offset+1,w,c
  1186  000162  5835               	subwfb	readJoySticks@joyStickReading+1,w,c
  1187  000164  B0D8               	btfsc	status,0,c
  1188  000166  D005               	goto	l1739
  1189  000168  0E00               	movlw	0
  1190  00016A  6E35               	movwf	readJoySticks@joyStickReading+1,c
  1191  00016C  0E00               	movlw	0
  1192  00016E  6E34               	movwf	readJoySticks@joyStickReading,c
  1193  000170  D00E               	goto	l137
  1194  000172                     l1739:
  1195                           
  1196                           ;main.c: 326: else joyStickReading = joyStickReading - offset;
  1197  000172  C02E  F01C         	movff	readJoySticks@offset,??_readJoySticks
  1198  000176  C02F  F01D         	movff	readJoySticks@offset+1,??_readJoySticks+1
  1199  00017A  1E1C               	comf	??_readJoySticks,f,c
  1200  00017C  1E1D               	comf	??_readJoySticks+1,f,c
  1201  00017E  4A1C               	infsnz	??_readJoySticks,f,c
  1202  000180  2A1D               	incf	??_readJoySticks+1,f,c
  1203  000182  5034               	movf	readJoySticks@joyStickReading,w,c
  1204  000184  241C               	addwf	??_readJoySticks,w,c
  1205  000186  6E34               	movwf	readJoySticks@joyStickReading,c
  1206  000188  5035               	movf	readJoySticks@joyStickReading+1,w,c
  1207  00018A  201D               	addwfc	??_readJoySticks+1,w,c
  1208  00018C  6E35               	movwf	readJoySticks@joyStickReading+1,c
  1209  00018E                     l137:
  1210                           
  1211                           ;main.c: 327: if (joyStickReading > span) joyStickReading = span;
  1212  00018E  5034               	movf	readJoySticks@joyStickReading,w,c
  1213  000190  5C32               	subwf	readJoySticks@span,w,c
  1214  000192  5035               	movf	readJoySticks@joyStickReading+1,w,c
  1215  000194  5833               	subwfb	readJoySticks@span+1,w,c
  1216  000196  B0D8               	btfsc	status,0,c
  1217  000198  D004               	goto	l1743
  1218  00019A  C032  F034         	movff	readJoySticks@span,readJoySticks@joyStickReading
  1219  00019E  C033  F035         	movff	readJoySticks@span+1,readJoySticks@joyStickReading+1
  1220  0001A2                     l1743:
  1221                           
  1222                           ;main.c: 329: ADresult[ADchannel] = (joyStickReading * 255) / span;
  1223  0001A2  C034  F00F         	movff	readJoySticks@joyStickReading,___wmul@multiplier
  1224  0001A6  C035  F010         	movff	readJoySticks@joyStickReading+1,___wmul@multiplier+1
  1225  0001AA  0E00               	movlw	0
  1226  0001AC  6E12               	movwf	___wmul@multiplicand+1,c
  1227  0001AE  6811               	setf	___wmul@multiplicand,c
  1228  0001B0  EC36  F003         	call	___wmul	;wreg free
  1229  0001B4  C00F  F015         	movff	?___wmul,___lwdiv@dividend
  1230  0001B8  C010  F016         	movff	?___wmul+1,___lwdiv@dividend+1
  1231  0001BC  C032  F017         	movff	readJoySticks@span,___lwdiv@divisor
  1232  0001C0  C033  F018         	movff	readJoySticks@span+1,___lwdiv@divisor+1
  1233  0001C4  ECBA  F002         	call	___lwdiv	;wreg free
  1234  0001C8  5040               	movf	readJoySticks@ADchannel,w,c
  1235  0001CA  0D02               	mullw	2
  1236  0001CC  0E36               	movlw	low _ADresult
  1237  0001CE  24F3               	addwf	prodl,w,c
  1238  0001D0  6ED9               	movwf	fsr2l,c
  1239  0001D2  0E00               	movlw	high _ADresult
  1240  0001D4  20F4               	addwfc	prodh,w,c
  1241  0001D6  6EDA               	movwf	fsr2h,c
  1242  0001D8  C015  FFDE         	movff	?___lwdiv,postinc2
  1243  0001DC  C016  FFDD         	movff	?___lwdiv+1,postdec2
  1244                           
  1245                           ;main.c: 330: if (ADresult[ADchannel] > 255) ADresult[ADchannel] = 255;
  1246  0001E0  5040               	movf	readJoySticks@ADchannel,w,c
  1247  0001E2  0D02               	mullw	2
  1248  0001E4  0E36               	movlw	low _ADresult
  1249  0001E6  24F3               	addwf	prodl,w,c
  1250  0001E8  6ED9               	movwf	fsr2l,c
  1251  0001EA  0E00               	movlw	high _ADresult
  1252  0001EC  20F4               	addwfc	prodh,w,c
  1253  0001EE  6EDA               	movwf	fsr2h,c
  1254  0001F0  52DE               	movf	postinc2,f,c
  1255  0001F2  04DE               	decf	postinc2,w,c
  1256  0001F4  A0D8               	btfss	status,0,c
  1257  0001F6  D00C               	goto	l1749
  1258  0001F8  5040               	movf	readJoySticks@ADchannel,w,c
  1259  0001FA  0D02               	mullw	2
  1260  0001FC  0E36               	movlw	low _ADresult
  1261  0001FE  24F3               	addwf	prodl,w,c
  1262  000200  6ED9               	movwf	fsr2l,c
  1263  000202  0E00               	movlw	high _ADresult
  1264  000204  20F4               	addwfc	prodh,w,c
  1265  000206  6EDA               	movwf	fsr2h,c
  1266  000208  0EFF               	movlw	255
  1267  00020A  6EDE               	movwf	postinc2,c
  1268  00020C  0E00               	movlw	0
  1269  00020E  6EDD               	movwf	postdec2,c
  1270  000210                     l1749:
  1271                           
  1272                           ;main.c: 332: ADchannel++;
  1273  000210  2A40               	incf	readJoySticks@ADchannel,f,c
  1274                           
  1275                           ;main.c: 333: if (ADchannel >= 4) ADchannel = 0;
  1276  000212  0E03               	movlw	3
  1277  000214  6440               	cpfsgt	readJoySticks@ADchannel,c
  1278  000216  D002               	goto	l1755
  1279  000218  0E00               	movlw	0
  1280  00021A  6E40               	movwf	readJoySticks@ADchannel,c
  1281  00021C                     l1755:
  1282                           
  1283                           ;main.c: 334: ADsetChannel(ADchannel);
  1284  00021C  5040               	movf	readJoySticks@ADchannel,w,c
  1285  00021E  EC49  F003         	call	_ADsetChannel
  1286  000222  0012               	return		;funcret
  1287  000224                     __end_of_readJoySticks:
  1288                           	opt stack 0
  1289                           tblptru	equ	0xFF8
  1290                           tblptrh	equ	0xFF7
  1291                           tblptrl	equ	0xFF6
  1292                           tablat	equ	0xFF5
  1293                           prodh	equ	0xFF4
  1294                           prodl	equ	0xFF3
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           postdec1	equ	0xFE5
  1298                           fsr1h	equ	0xFE2
  1299                           fsr1l	equ	0xFE1
  1300                           indf2	equ	0xFDF
  1301                           postinc2	equ	0xFDE
  1302                           postdec2	equ	0xFDD
  1303                           fsr2h	equ	0xFDA
  1304                           fsr2l	equ	0xFD9
  1305                           status	equ	0xFD8
  1306                           
  1307 ;; *************** function ___wmul *****************
  1308 ;; Defined at:
  1309 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;  multiplier      2   14[COMRAM] unsigned int 
  1312 ;;  multiplicand    2   16[COMRAM] unsigned int 
  1313 ;; Auto vars:     Size  Location     Type
  1314 ;;  product         2   18[COMRAM] unsigned int 
  1315 ;; Return value:  Size  Location     Type
  1316 ;;                  2   14[COMRAM] unsigned int 
  1317 ;; Registers used:
  1318 ;;		wreg, status,2, status,0, prodl, prodh
  1319 ;; Tracked objects:
  1320 ;;		On entry : 0/0
  1321 ;;		On exit  : 0/0
  1322 ;;		Unchanged: 0/0
  1323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1324 ;;      Params:         4       0       0       0       0       0       0
  1325 ;;      Locals:         2       0       0       0       0       0       0
  1326 ;;      Temps:          0       0       0       0       0       0       0
  1327 ;;      Totals:         6       0       0       0       0       0       0
  1328 ;;Total ram usage:        6 bytes
  1329 ;; Hardware stack levels used:    1
  1330 ;; Hardware stack levels required when called:    1
  1331 ;; This function calls:
  1332 ;;		Nothing
  1333 ;; This function is called by:
  1334 ;;		_readJoySticks
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text2
  1339  00066C                     __ptext2:
  1340                           	opt stack 0
  1341  00066C                     ___wmul:
  1342                           	opt stack 28
  1343                           
  1344                           ;incstack = 0
  1345  00066C  500F               	movf	___wmul@multiplier,w,c
  1346  00066E  0211               	mulwf	___wmul@multiplicand,c
  1347  000670  CFF3 F013          	movff	prodl,___wmul@product
  1348  000674  CFF4 F014          	movff	prodh,___wmul@product+1
  1349  000678  500F               	movf	___wmul@multiplier,w,c
  1350  00067A  0212               	mulwf	___wmul@multiplicand+1,c
  1351  00067C  50F3               	movf	prodl,w,c
  1352  00067E  2614               	addwf	___wmul@product+1,f,c
  1353  000680  5010               	movf	___wmul@multiplier+1,w,c
  1354  000682  0211               	mulwf	___wmul@multiplicand,c
  1355  000684  50F3               	movf	prodl,w,c
  1356  000686  2614               	addwf	___wmul@product+1,f,c
  1357  000688  C013  F00F         	movff	___wmul@product,?___wmul
  1358  00068C  C014  F010         	movff	___wmul@product+1,?___wmul+1
  1359  000690  0012               	return	
  1360  000692                     __end_of___wmul:
  1361                           	opt stack 0
  1362                           tblptru	equ	0xFF8
  1363                           tblptrh	equ	0xFF7
  1364                           tblptrl	equ	0xFF6
  1365                           tablat	equ	0xFF5
  1366                           prodh	equ	0xFF4
  1367                           prodl	equ	0xFF3
  1368                           postinc0	equ	0xFEE
  1369                           wreg	equ	0xFE8
  1370                           postdec1	equ	0xFE5
  1371                           fsr1h	equ	0xFE2
  1372                           fsr1l	equ	0xFE1
  1373                           indf2	equ	0xFDF
  1374                           postinc2	equ	0xFDE
  1375                           postdec2	equ	0xFDD
  1376                           fsr2h	equ	0xFDA
  1377                           fsr2l	equ	0xFD9
  1378                           status	equ	0xFD8
  1379                           
  1380 ;; *************** function ___lwdiv *****************
  1381 ;; Defined at:
  1382 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;  dividend        2   20[COMRAM] unsigned int 
  1385 ;;  divisor         2   22[COMRAM] unsigned int 
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  quotient        2   25[COMRAM] unsigned int 
  1388 ;;  counter         1   24[COMRAM] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;                  2   20[COMRAM] unsigned int 
  1391 ;; Registers used:
  1392 ;;		wreg, status,2, status,0
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1398 ;;      Params:         4       0       0       0       0       0       0
  1399 ;;      Locals:         3       0       0       0       0       0       0
  1400 ;;      Temps:          0       0       0       0       0       0       0
  1401 ;;      Totals:         7       0       0       0       0       0       0
  1402 ;;Total ram usage:        7 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    1
  1405 ;; This function calls:
  1406 ;;		Nothing
  1407 ;; This function is called by:
  1408 ;;		_readJoySticks
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text3
  1413  000574                     __ptext3:
  1414                           	opt stack 0
  1415  000574                     ___lwdiv:
  1416                           	opt stack 28
  1417                           
  1418                           ;incstack = 0
  1419  000574  0E00               	movlw	0
  1420  000576  6E1B               	movwf	___lwdiv@quotient+1,c
  1421  000578  0E00               	movlw	0
  1422  00057A  6E1A               	movwf	___lwdiv@quotient,c
  1423  00057C  5017               	movf	___lwdiv@divisor,w,c
  1424  00057E  1018               	iorwf	___lwdiv@divisor+1,w,c
  1425  000580  B4D8               	btfsc	status,2,c
  1426  000582  D01C               	goto	l632
  1427  000584  0E01               	movlw	1
  1428  000586  6E19               	movwf	___lwdiv@counter,c
  1429  000588  D004               	goto	l1611
  1430  00058A                     l1609:
  1431  00058A  90D8               	bcf	status,0,c
  1432  00058C  3617               	rlcf	___lwdiv@divisor,f,c
  1433  00058E  3618               	rlcf	___lwdiv@divisor+1,f,c
  1434  000590  2A19               	incf	___lwdiv@counter,f,c
  1435  000592                     l1611:
  1436  000592  AE18               	btfss	___lwdiv@divisor+1,7,c
  1437  000594  D7FA               	goto	l1609
  1438  000596                     l1613:
  1439  000596  90D8               	bcf	status,0,c
  1440  000598  361A               	rlcf	___lwdiv@quotient,f,c
  1441  00059A  361B               	rlcf	___lwdiv@quotient+1,f,c
  1442  00059C  5017               	movf	___lwdiv@divisor,w,c
  1443  00059E  5C15               	subwf	___lwdiv@dividend,w,c
  1444  0005A0  5018               	movf	___lwdiv@divisor+1,w,c
  1445  0005A2  5816               	subwfb	___lwdiv@dividend+1,w,c
  1446  0005A4  A0D8               	btfss	status,0,c
  1447  0005A6  D005               	goto	l1621
  1448  0005A8  5017               	movf	___lwdiv@divisor,w,c
  1449  0005AA  5E15               	subwf	___lwdiv@dividend,f,c
  1450  0005AC  5018               	movf	___lwdiv@divisor+1,w,c
  1451  0005AE  5A16               	subwfb	___lwdiv@dividend+1,f,c
  1452  0005B0  801A               	bsf	___lwdiv@quotient,0,c
  1453  0005B2                     l1621:
  1454  0005B2  90D8               	bcf	status,0,c
  1455  0005B4  3218               	rrcf	___lwdiv@divisor+1,f,c
  1456  0005B6  3217               	rrcf	___lwdiv@divisor,f,c
  1457  0005B8  2E19               	decfsz	___lwdiv@counter,f,c
  1458  0005BA  D7ED               	goto	l1613
  1459  0005BC                     l632:
  1460  0005BC  C01A  F015         	movff	___lwdiv@quotient,?___lwdiv
  1461  0005C0  C01B  F016         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1462  0005C4  0012               	return		;funcret
  1463  0005C6                     __end_of___lwdiv:
  1464                           	opt stack 0
  1465                           tblptru	equ	0xFF8
  1466                           tblptrh	equ	0xFF7
  1467                           tblptrl	equ	0xFF6
  1468                           tablat	equ	0xFF5
  1469                           prodh	equ	0xFF4
  1470                           prodl	equ	0xFF3
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1h	equ	0xFE2
  1475                           fsr1l	equ	0xFE1
  1476                           indf2	equ	0xFDF
  1477                           postinc2	equ	0xFDE
  1478                           postdec2	equ	0xFDD
  1479                           fsr2h	equ	0xFDA
  1480                           fsr2l	equ	0xFD9
  1481                           status	equ	0xFD8
  1482                           
  1483 ;; *************** function _ADsetChannel *****************
  1484 ;; Defined at:
  1485 ;;		line 296 in file "../main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  channel         1    wreg     unsigned char 
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  channel         1   15[COMRAM] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, status,2, status,0
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1499 ;;      Params:         0       0       0       0       0       0       0
  1500 ;;      Locals:         1       0       0       0       0       0       0
  1501 ;;      Temps:          1       0       0       0       0       0       0
  1502 ;;      Totals:         2       0       0       0       0       0       0
  1503 ;;Total ram usage:        2 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    1
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_readJoySticks
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513                           	psect	text4
  1514  000692                     __ptext4:
  1515                           	opt stack 0
  1516  000692                     _ADsetChannel:
  1517                           	opt stack 28
  1518                           
  1519                           ;incstack = 0
  1520                           ;ADsetChannel@channel stored from wreg
  1521  000692  6E10               	movwf	ADsetChannel@channel,c
  1522                           
  1523                           ;main.c: 297: ADCON0 = (channel << 2) + 0x01;
  1524  000694  C010  F00F         	movff	ADsetChannel@channel,??_ADsetChannel
  1525  000698  90D8               	bcf	status,0,c
  1526  00069A  360F               	rlcf	??_ADsetChannel,f,c
  1527  00069C  90D8               	bcf	status,0,c
  1528  00069E  360F               	rlcf	??_ADsetChannel,f,c
  1529  0006A0  280F               	incf	??_ADsetChannel,w,c
  1530  0006A2  6EC2               	movwf	4034,c	;volatile
  1531  0006A4  0012               	return		;funcret
  1532  0006A6                     __end_of_ADsetChannel:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           prodh	equ	0xFF4
  1539                           prodl	equ	0xFF3
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postdec1	equ	0xFE5
  1543                           fsr1h	equ	0xFE2
  1544                           fsr1l	equ	0xFE1
  1545                           indf2	equ	0xFDF
  1546                           postinc2	equ	0xFDE
  1547                           postdec2	equ	0xFDD
  1548                           fsr2h	equ	0xFDA
  1549                           fsr2l	equ	0xFD9
  1550                           status	equ	0xFD8
  1551                           
  1552 ;; *************** function _ADconvertAndRead *****************
  1553 ;; Defined at:
  1554 ;;		line 300 in file "../main.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;		None
  1557 ;; Auto vars:     Size  Location     Type
  1558 ;;  highByte        2   20[COMRAM] unsigned short 
  1559 ;;  ADvalue         2   18[COMRAM] short 
  1560 ;; Return value:  Size  Location     Type
  1561 ;;                  2   14[COMRAM] short 
  1562 ;; Registers used:
  1563 ;;		wreg, status,2, status,0
  1564 ;; Tracked objects:
  1565 ;;		On entry : 0/0
  1566 ;;		On exit  : 0/0
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1569 ;;      Params:         2       0       0       0       0       0       0
  1570 ;;      Locals:         4       0       0       0       0       0       0
  1571 ;;      Temps:          2       0       0       0       0       0       0
  1572 ;;      Totals:         8       0       0       0       0       0       0
  1573 ;;Total ram usage:        8 bytes
  1574 ;; Hardware stack levels used:    1
  1575 ;; Hardware stack levels required when called:    1
  1576 ;; This function calls:
  1577 ;;		Nothing
  1578 ;; This function is called by:
  1579 ;;		_readJoySticks
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text5
  1584  00060C                     __ptext5:
  1585                           	opt stack 0
  1586  00060C                     _ADconvertAndRead:
  1587                           	opt stack 28
  1588                           
  1589                           ;main.c: 301: unsigned short highByte;
  1590                           ;main.c: 302: short ADvalue;
  1591                           ;main.c: 303: ADCON0bits.GO_DONE = 1;
  1592                           
  1593                           ;incstack = 0
  1594  00060C  82C2               	bsf	4034,1,c	;volatile
  1595  00060E                     l120:
  1596  00060E  B2C2               	btfsc	4034,1,c	;volatile
  1597  000610  D7FE               	goto	l120
  1598                           
  1599                           ;main.c: 305: highByte = (unsigned short) ADRESH;
  1600  000612  CFC4 F015          	movff	4036,ADconvertAndRead@highByte	;volatile
  1601  000616  6A16               	clrf	ADconvertAndRead@highByte+1,c
  1602                           
  1603                           ;main.c: 306: highByte = (highByte << 8) & 0b001100000000;
  1604  000618  5015               	movf	ADconvertAndRead@highByte,w,c
  1605  00061A  6E12               	movwf	(??_ADconvertAndRead+1)& (0+255),c
  1606  00061C  6A11               	clrf	??_ADconvertAndRead& (0+255),c
  1607  00061E  0E00               	movlw	0
  1608  000620  1411               	andwf	??_ADconvertAndRead,w,c
  1609  000622  6E15               	movwf	ADconvertAndRead@highByte,c
  1610  000624  0E03               	movlw	3
  1611  000626  1412               	andwf	??_ADconvertAndRead+1,w,c
  1612  000628  6E16               	movwf	ADconvertAndRead@highByte+1,c
  1613                           
  1614                           ;main.c: 307: ADvalue = (short) (highByte | ADRESL);
  1615  00062A  5015               	movf	ADconvertAndRead@highByte,w,c
  1616  00062C  10C3               	iorwf	4035,w,c	;volatile
  1617  00062E  6E13               	movwf	ADconvertAndRead@ADvalue,c
  1618  000630  5016               	movf	ADconvertAndRead@highByte+1,w,c
  1619  000632  6E14               	movwf	ADconvertAndRead@ADvalue+1,c
  1620                           
  1621                           ;main.c: 308: return (ADvalue);
  1622  000634  C013  F00F         	movff	ADconvertAndRead@ADvalue,?_ADconvertAndRead
  1623  000638  C014  F010         	movff	ADconvertAndRead@ADvalue+1,?_ADconvertAndRead+1
  1624  00063C  0012               	return	
  1625  00063E                     __end_of_ADconvertAndRead:
  1626                           	opt stack 0
  1627                           tblptru	equ	0xFF8
  1628                           tblptrh	equ	0xFF7
  1629                           tblptrl	equ	0xFF6
  1630                           tablat	equ	0xFF5
  1631                           prodh	equ	0xFF4
  1632                           prodl	equ	0xFF3
  1633                           postinc0	equ	0xFEE
  1634                           wreg	equ	0xFE8
  1635                           postdec1	equ	0xFE5
  1636                           fsr1h	equ	0xFE2
  1637                           fsr1l	equ	0xFE1
  1638                           indf2	equ	0xFDF
  1639                           postinc2	equ	0xFDE
  1640                           postdec2	equ	0xFDD
  1641                           fsr2h	equ	0xFDA
  1642                           fsr2l	equ	0xFD9
  1643                           status	equ	0xFD8
  1644                           
  1645 ;; *************** function _putch *****************
  1646 ;; Defined at:
  1647 ;;		line 288 in file "../main.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  TxByte          1    wreg     unsigned char 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  TxByte          1   14[COMRAM] unsigned char 
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		wreg
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1661 ;;      Params:         0       0       0       0       0       0       0
  1662 ;;      Locals:         1       0       0       0       0       0       0
  1663 ;;      Temps:          0       0       0       0       0       0       0
  1664 ;;      Totals:         1       0       0       0       0       0       0
  1665 ;;Total ram usage:        1 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    1
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_main
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           	psect	text6
  1676  0006A6                     __ptext6:
  1677                           	opt stack 0
  1678  0006A6                     _putch:
  1679                           	opt stack 29
  1680                           
  1681                           ;incstack = 0
  1682                           ;putch@TxByte stored from wreg
  1683  0006A6  6E0F               	movwf	putch@TxByte,c
  1684  0006A8                     l111:
  1685  0006A8  A89E               	btfss	3998,4,c	;volatile
  1686  0006AA  D7FE               	goto	l111
  1687                           
  1688                           ;main.c: 290: TXREG = TxByte;
  1689  0006AC  C00F  FFAD         	movff	putch@TxByte,4013	;volatile
  1690  0006B0  0012               	return	
  1691  0006B2                     __end_of_putch:
  1692                           	opt stack 0
  1693                           tblptru	equ	0xFF8
  1694                           tblptrh	equ	0xFF7
  1695                           tblptrl	equ	0xFF6
  1696                           tablat	equ	0xFF5
  1697                           prodh	equ	0xFF4
  1698                           prodl	equ	0xFF3
  1699                           postinc0	equ	0xFEE
  1700                           wreg	equ	0xFE8
  1701                           postdec1	equ	0xFE5
  1702                           fsr1h	equ	0xFE2
  1703                           fsr1l	equ	0xFE1
  1704                           indf2	equ	0xFDF
  1705                           postinc2	equ	0xFDE
  1706                           postdec2	equ	0xFDD
  1707                           fsr2h	equ	0xFDA
  1708                           fsr2l	equ	0xFD9
  1709                           status	equ	0xFD8
  1710                           
  1711 ;; *************** function _init *****************
  1712 ;; Defined at:
  1713 ;;		line 188 in file "../main.c"
  1714 ;; Parameters:    Size  Location     Type
  1715 ;;		None
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;		None
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  1    wreg      void 
  1720 ;; Registers used:
  1721 ;;		wreg, status,2
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1727 ;;      Params:         0       0       0       0       0       0       0
  1728 ;;      Locals:         0       0       0       0       0       0       0
  1729 ;;      Temps:          0       0       0       0       0       0       0
  1730 ;;      Totals:         0       0       0       0       0       0       0
  1731 ;;Total ram usage:        0 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; Hardware stack levels required when called:    1
  1734 ;; This function calls:
  1735 ;;		Nothing
  1736 ;; This function is called by:
  1737 ;;		_main
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741                           	psect	text7
  1742  0004F6                     __ptext7:
  1743                           	opt stack 0
  1744  0004F6                     _init:
  1745                           	opt stack 29
  1746                           
  1747                           ;main.c: 189: INTCONbits.GIE = 0;
  1748                           
  1749                           ;incstack = 0
  1750  0004F6  9EF2               	bcf	intcon,7,c	;volatile
  1751                           
  1752                           ;main.c: 192: ADCON0 = 0b00000000;
  1753  0004F8  0E00               	movlw	0
  1754  0004FA  6EC2               	movwf	4034,c	;volatile
  1755                           
  1756                           ;main.c: 195: ADCON1bits.VCFG0 = 0;
  1757  0004FC  98C1               	bcf	4033,4,c	;volatile
  1758                           
  1759                           ;main.c: 196: ADCON1bits.VCFG1 = 0;
  1760  0004FE  9AC1               	bcf	4033,5,c	;volatile
  1761                           
  1762                           ;main.c: 197: ADCON1bits.PCFG3 = 1;
  1763  000500  86C1               	bsf	4033,3,c	;volatile
  1764                           
  1765                           ;main.c: 198: ADCON1bits.PCFG2 = 0;
  1766  000502  94C1               	bcf	4033,2,c	;volatile
  1767                           
  1768                           ;main.c: 199: ADCON1bits.PCFG1 = 1;
  1769  000504  82C1               	bsf	4033,1,c	;volatile
  1770                           
  1771                           ;main.c: 200: ADCON1bits.PCFG0 = 1;
  1772  000506  80C1               	bsf	4033,0,c	;volatile
  1773                           
  1774                           ;main.c: 202: ADCON2 = 0;
  1775  000508  0E00               	movlw	0
  1776  00050A  6EC0               	movwf	4032,c	;volatile
  1777                           
  1778                           ;main.c: 203: ADCON2bits.ADFM = 1;
  1779  00050C  8EC0               	bsf	4032,7,c	;volatile
  1780                           
  1781                           ;main.c: 205: ADCON2bits.ACQT2 = 1;
  1782  00050E  8AC0               	bsf	4032,5,c	;volatile
  1783                           
  1784                           ;main.c: 206: ADCON2bits.ACQT1 = 1;
  1785  000510  88C0               	bsf	4032,4,c	;volatile
  1786                           
  1787                           ;main.c: 207: ADCON2bits.ACQT0 = 1;
  1788  000512  86C0               	bsf	4032,3,c	;volatile
  1789                           
  1790                           ;main.c: 209: ADCON2bits.ADCS2 = 1;
  1791  000514  84C0               	bsf	4032,2,c	;volatile
  1792                           
  1793                           ;main.c: 210: ADCON2bits.ADCS1 = 1;
  1794  000516  82C0               	bsf	4032,1,c	;volatile
  1795                           
  1796                           ;main.c: 211: ADCON2bits.ADCS0 = 1;
  1797  000518  80C0               	bsf	4032,0,c	;volatile
  1798                           
  1799                           ;main.c: 212: TRISA = 0b11011111;
  1800  00051A  0EDF               	movlw	223
  1801  00051C  6E92               	movwf	3986,c	;volatile
  1802                           
  1803                           ;main.c: 213: PORTAbits.RA5 = 1;
  1804  00051E  8A80               	bsf	3968,5,c	;volatile
  1805                           
  1806                           ;main.c: 216: TRISB = 0b11111000;
  1807  000520  0EF8               	movlw	248
  1808  000522  6E93               	movwf	3987,c	;volatile
  1809                           
  1810                           ;main.c: 217: INTCON2bits.RBPU = 0;
  1811  000524  9EF1               	bcf	intcon2,7,c	;volatile
  1812                           
  1813                           ;main.c: 218: TRISC = 0b10111111;
  1814  000526  0EBF               	movlw	191
  1815  000528  6E94               	movwf	3988,c	;volatile
  1816                           
  1817                           ;main.c: 221: TXSTAbits.BRGH = 1;
  1818  00052A  84AC               	bsf	4012,2,c	;volatile
  1819                           
  1820                           ;main.c: 222: SPBRG = 19;
  1821  00052C  0E13               	movlw	19
  1822  00052E  6EAF               	movwf	4015,c	;volatile
  1823                           
  1824                           ;main.c: 223: TXSTAbits.SYNC = 0;
  1825  000530  98AC               	bcf	4012,4,c	;volatile
  1826                           
  1827                           ;main.c: 224: RCSTAbits.SPEN = 1;
  1828  000532  8EAB               	bsf	4011,7,c	;volatile
  1829                           
  1830                           ;main.c: 225: RCSTAbits.CREN = 1;
  1831  000534  88AB               	bsf	4011,4,c	;volatile
  1832                           
  1833                           ;main.c: 226: RCSTAbits.SREN = 0;
  1834  000536  9AAB               	bcf	4011,5,c	;volatile
  1835                           
  1836                           ;main.c: 227: PIE1bits.TXIE = 0;
  1837  000538  989D               	bcf	3997,4,c	;volatile
  1838                           
  1839                           ;main.c: 228: PIE1bits.RCIE = 0;
  1840  00053A  9A9D               	bcf	3997,5,c	;volatile
  1841                           
  1842                           ;main.c: 229: TXSTAbits.TX9 = 0;
  1843  00053C  9CAC               	bcf	4012,6,c	;volatile
  1844                           
  1845                           ;main.c: 230: RCSTAbits.RX9 = 0;
  1846  00053E  9CAB               	bcf	4011,6,c	;volatile
  1847                           
  1848                           ;main.c: 231: TXSTAbits.TXEN = 1;
  1849  000540  8AAC               	bsf	4012,5,c	;volatile
  1850                           
  1851                           ;main.c: 232: BAUDCONbits.TXCKP = 0;
  1852  000542  98B8               	bcf	4024,4,c	;volatile
  1853                           
  1854                           ;main.c: 233: BAUDCONbits.RXDTP = 0;
  1855  000544  9AB8               	bcf	4024,5,c	;volatile
  1856                           
  1857                           ;main.c: 236: PR2 = 72;
  1858  000546  0E48               	movlw	72
  1859  000548  6ECB               	movwf	4043,c	;volatile
  1860                           
  1861                           ;main.c: 237: T2CON = 0x00;
  1862  00054A  0E00               	movlw	0
  1863  00054C  6ECA               	movwf	4042,c	;volatile
  1864                           
  1865                           ;main.c: 238: T2CONbits.T2CKPS1 = 0;
  1866  00054E  92CA               	bcf	4042,1,c	;volatile
  1867                           
  1868                           ;main.c: 239: T2CONbits.T2CKPS0 = 1;
  1869  000550  80CA               	bsf	4042,0,c	;volatile
  1870                           
  1871                           ;main.c: 240: T2CONbits.T2OUTPS3 = 1;
  1872  000552  8CCA               	bsf	4042,6,c	;volatile
  1873                           
  1874                           ;main.c: 241: T2CONbits.T2OUTPS2 = 1;
  1875  000554  8ACA               	bsf	4042,5,c	;volatile
  1876                           
  1877                           ;main.c: 242: T2CONbits.T2OUTPS1 = 1;
  1878  000556  88CA               	bsf	4042,4,c	;volatile
  1879                           
  1880                           ;main.c: 243: T2CONbits.T2OUTPS0 = 1;
  1881  000558  86CA               	bsf	4042,3,c	;volatile
  1882                           
  1883                           ;main.c: 244: T2CONbits.TMR2ON = 1;
  1884  00055A  84CA               	bsf	4042,2,c	;volatile
  1885                           
  1886                           ;main.c: 247: INTCON = 0x00;
  1887  00055C  0E00               	movlw	0
  1888  00055E  6EF2               	movwf	intcon,c	;volatile
  1889                           
  1890                           ;main.c: 248: INTCONbits.INT0IE = 0;
  1891  000560  98F2               	bcf	intcon,4,c	;volatile
  1892                           
  1893                           ;main.c: 249: INTCONbits.RBIE = 0;
  1894  000562  96F2               	bcf	intcon,3,c	;volatile
  1895                           
  1896                           ;main.c: 250: PIE1bits.TMR2IE = 1;
  1897  000564  829D               	bsf	3997,1,c	;volatile
  1898                           
  1899                           ;main.c: 251: INTCONbits.PEIE = 1;
  1900  000566  8CF2               	bsf	intcon,6,c	;volatile
  1901                           
  1902                           ;main.c: 253: INTCON2 = 0x00;
  1903  000568  0E00               	movlw	0
  1904  00056A  6EF1               	movwf	intcon2,c	;volatile
  1905                           
  1906                           ;main.c: 254: INTCON2bits.RBPU = 0;
  1907  00056C  9EF1               	bcf	intcon2,7,c	;volatile
  1908                           
  1909                           ;main.c: 255: INTCON2bits.INTEDG0 = 0;
  1910  00056E  9CF1               	bcf	intcon2,6,c	;volatile
  1911                           
  1912                           ;main.c: 256: INTCONbits.GIE = 1;
  1913  000570  8EF2               	bsf	intcon,7,c	;volatile
  1914  000572  0012               	return		;funcret
  1915  000574                     __end_of_init:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           prodh	equ	0xFF4
  1922                           prodl	equ	0xFF3
  1923                           intcon	equ	0xFF2
  1924                           intcon2	equ	0xFF1
  1925                           postinc0	equ	0xFEE
  1926                           wreg	equ	0xFE8
  1927                           postdec1	equ	0xFE5
  1928                           fsr1h	equ	0xFE2
  1929                           fsr1l	equ	0xFE1
  1930                           indf2	equ	0xFDF
  1931                           postinc2	equ	0xFDE
  1932                           postdec2	equ	0xFDD
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _DelayMs *****************
  1938 ;; Defined at:
  1939 ;;		line 13 in file "../delay.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  count           2   14[COMRAM] unsigned short 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  downCount       1   17[COMRAM] unsigned char 
  1944 ;;  i               1   16[COMRAM] unsigned char 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2, status,0
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1954 ;;      Params:         2       0       0       0       0       0       0
  1955 ;;      Locals:         2       0       0       0       0       0       0
  1956 ;;      Temps:          0       0       0       0       0       0       0
  1957 ;;      Totals:         4       0       0       0       0       0       0
  1958 ;;Total ram usage:        4 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    1
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_main
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text8
  1969  00063E                     __ptext8:
  1970                           	opt stack 0
  1971  00063E                     _DelayMs:
  1972                           	opt stack 29
  1973                           
  1974                           ;delay.c: 14: unsigned char i;
  1975                           ;delay.c: 15: while (count--) {
  1976                           
  1977                           ;incstack = 0
  1978  00063E  D00D               	goto	l1721
  1979  000640                     l1713:
  1980                           
  1981                           ;delay.c: 16: i=100;
  1982  000640  0E64               	movlw	100
  1983  000642  6E11               	movwf	DelayMs@i,c
  1984                           
  1985                           ;delay.c: 17: while(i--) {
  1986  000644  D006               	goto	l1719
  1987  000646                     l1715:
  1988                           
  1989                           ;delay.c: 18: { unsigned char downCount; downCount = 4; while(downCount--);};
  1990  000646  0E04               	movlw	4
  1991  000648  6E12               	movwf	DelayMs@downCount,c
  1992  00064A                     l1717:
  1993  00064A  0612               	decf	DelayMs@downCount,f,c
  1994  00064C  2812               	incf	DelayMs@downCount,w,c
  1995  00064E  A4D8               	btfss	status,2,c
  1996  000650  D7FC               	goto	l1717
  1997  000652                     l1719:
  1998  000652  0611               	decf	DelayMs@i,f,c
  1999  000654  2811               	incf	DelayMs@i,w,c
  2000  000656  A4D8               	btfss	status,2,c
  2001  000658  D7F6               	goto	l1715
  2002  00065A                     l1721:
  2003  00065A  060F               	decf	DelayMs@count,f,c
  2004  00065C  A0D8               	btfss	status,0,c
  2005  00065E  0610               	decf	DelayMs@count+1,f,c
  2006  000660  280F               	incf	DelayMs@count,w,c
  2007  000662  E1EE               	bnz	l1713
  2008  000664  2810               	incf	DelayMs@count+1,w,c
  2009  000666  B4D8               	btfsc	status,2,c
  2010  000668  0012               	return	
  2011  00066A  D7EA               	goto	l1713
  2012  00066C                     __end_of_DelayMs:
  2013                           	opt stack 0
  2014                           tblptru	equ	0xFF8
  2015                           tblptrh	equ	0xFF7
  2016                           tblptrl	equ	0xFF6
  2017                           tablat	equ	0xFF5
  2018                           prodh	equ	0xFF4
  2019                           prodl	equ	0xFF3
  2020                           intcon	equ	0xFF2
  2021                           intcon2	equ	0xFF1
  2022                           postinc0	equ	0xFEE
  2023                           wreg	equ	0xFE8
  2024                           postdec1	equ	0xFE5
  2025                           fsr1h	equ	0xFE2
  2026                           fsr1l	equ	0xFE1
  2027                           indf2	equ	0xFDF
  2028                           postinc2	equ	0xFDE
  2029                           postdec2	equ	0xFDD
  2030                           fsr2h	equ	0xFDA
  2031                           fsr2l	equ	0xFD9
  2032                           status	equ	0xFD8
  2033                           
  2034 ;; *************** function _BuildPacket *****************
  2035 ;; Defined at:
  2036 ;;		line 351 in file "../main.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;  command         1    wreg     unsigned char 
  2039 ;;  subCommand      1   20[COMRAM] unsigned char 
  2040 ;;  dataLength      1   21[COMRAM] unsigned char 
  2041 ;;  ptrData         2   22[COMRAM] PTR unsigned char 
  2042 ;;		 -> main@arrJoystickData(8), 
  2043 ;;  ptrPacket       2   24[COMRAM] PTR unsigned char 
  2044 ;;		 -> packet(32), 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  command         1   26[COMRAM] unsigned char 
  2047 ;;  packetIndex     1   28[COMRAM] unsigned char 
  2048 ;;  i               1   27[COMRAM] unsigned char 
  2049 ;; Return value:  Size  Location     Type
  2050 ;;                  1    wreg      unsigned char 
  2051 ;; Registers used:
  2052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2058 ;;      Params:         6       0       0       0       0       0       0
  2059 ;;      Locals:         3       0       0       0       0       0       0
  2060 ;;      Temps:          0       0       0       0       0       0       0
  2061 ;;      Totals:         9       0       0       0       0       0       0
  2062 ;;Total ram usage:        9 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; Hardware stack levels required when called:    2
  2065 ;; This function calls:
  2066 ;;		_insertByte
  2067 ;; This function is called by:
  2068 ;;		_main
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           	psect	text9
  2073  000364                     __ptext9:
  2074                           	opt stack 0
  2075  000364                     _BuildPacket:
  2076                           	opt stack 28
  2077                           
  2078                           ;incstack = 0
  2079                           ;BuildPacket@command stored from wreg
  2080  000364  6E1B               	movwf	BuildPacket@command,c
  2081                           
  2082                           ;main.c: 353: unsigned char packetIndex = 0, i;
  2083  000366  0E00               	movlw	0
  2084  000368  6E1D               	movwf	BuildPacket@packetIndex,c
  2085                           
  2086                           ;main.c: 355: if (dataLength <= 32) {
  2087  00036A  0E21               	movlw	33
  2088  00036C  6016               	cpfslt	BuildPacket@dataLength,c
  2089  00036E  D068               	goto	l1805
  2090                           
  2091                           ;main.c: 356: ptrPacket[packetIndex++] = 36;
  2092  000370  501D               	movf	BuildPacket@packetIndex,w,c
  2093  000372  0D01               	mullw	1
  2094  000374  50F3               	movf	prodl,w,c
  2095  000376  2419               	addwf	BuildPacket@ptrPacket,w,c
  2096  000378  6ED9               	movwf	fsr2l,c
  2097  00037A  50F4               	movf	prodh,w,c
  2098  00037C  201A               	addwfc	BuildPacket@ptrPacket+1,w,c
  2099  00037E  6EDA               	movwf	fsr2h,c
  2100  000380  0E24               	movlw	36
  2101  000382  6EDF               	movwf	indf2,c
  2102  000384  2A1D               	incf	BuildPacket@packetIndex,f,c
  2103                           
  2104                           ;main.c: 358: if (!insertByte(command, ptrPacket, &packetIndex)) return(0);
  2105  000386  C019  F00F         	movff	BuildPacket@ptrPacket,insertByte@ptrBuffer
  2106  00038A  C01A  F010         	movff	BuildPacket@ptrPacket+1,insertByte@ptrBuffer+1
  2107  00038E  0E1D               	movlw	low BuildPacket@packetIndex
  2108  000390  6E11               	movwf	insertByte@index,c
  2109  000392  0E00               	movlw	high BuildPacket@packetIndex
  2110  000394  6E12               	movwf	insertByte@index+1,c
  2111  000396  501B               	movf	BuildPacket@command,w,c
  2112  000398  EC22  F002         	call	_insertByte
  2113  00039C  0900               	iorlw	0
  2114  00039E  A4D8               	btfss	status,2,c
  2115  0003A0  D002               	goto	l1771
  2116  0003A2  0E00               	movlw	0
  2117  0003A4  0012               	return	
  2118  0003A6                     l1771:
  2119                           
  2120                           ;main.c: 359: if (!insertByte(subCommand, ptrPacket, &packetIndex)) return(0);
  2121  0003A6  C019  F00F         	movff	BuildPacket@ptrPacket,insertByte@ptrBuffer
  2122  0003AA  C01A  F010         	movff	BuildPacket@ptrPacket+1,insertByte@ptrBuffer+1
  2123  0003AE  0E1D               	movlw	low BuildPacket@packetIndex
  2124  0003B0  6E11               	movwf	insertByte@index,c
  2125  0003B2  0E00               	movlw	high BuildPacket@packetIndex
  2126  0003B4  6E12               	movwf	insertByte@index+1,c
  2127  0003B6  5015               	movf	BuildPacket@subCommand,w,c
  2128  0003B8  EC22  F002         	call	_insertByte
  2129  0003BC  0900               	iorlw	0
  2130  0003BE  A4D8               	btfss	status,2,c
  2131  0003C0  D002               	goto	l1777
  2132  0003C2  0E00               	movlw	0
  2133  0003C4  0012               	return	
  2134  0003C6                     l1777:
  2135                           
  2136                           ;main.c: 360: if (!insertByte(dataLength, ptrPacket, &packetIndex)) return(0);
  2137  0003C6  C019  F00F         	movff	BuildPacket@ptrPacket,insertByte@ptrBuffer
  2138  0003CA  C01A  F010         	movff	BuildPacket@ptrPacket+1,insertByte@ptrBuffer+1
  2139  0003CE  0E1D               	movlw	low BuildPacket@packetIndex
  2140  0003D0  6E11               	movwf	insertByte@index,c
  2141  0003D2  0E00               	movlw	high BuildPacket@packetIndex
  2142  0003D4  6E12               	movwf	insertByte@index+1,c
  2143  0003D6  5016               	movf	BuildPacket@dataLength,w,c
  2144  0003D8  EC22  F002         	call	_insertByte
  2145  0003DC  0900               	iorlw	0
  2146  0003DE  A4D8               	btfss	status,2,c
  2147  0003E0  D002               	goto	l1783
  2148  0003E2  0E00               	movlw	0
  2149  0003E4  0012               	return	
  2150  0003E6                     l1783:
  2151                           
  2152                           ;main.c: 362: for (i = 0; i < dataLength; i++){
  2153  0003E6  0E00               	movlw	0
  2154  0003E8  6E1C               	movwf	BuildPacket@i,c
  2155  0003EA  D019               	goto	l1793
  2156  0003EC                     l1785:
  2157                           
  2158                           ;main.c: 363: if (!insertByte(ptrData[i], ptrPacket, &packetIndex)) return(0);
  2159  0003EC  C019  F00F         	movff	BuildPacket@ptrPacket,insertByte@ptrBuffer
  2160  0003F0  C01A  F010         	movff	BuildPacket@ptrPacket+1,insertByte@ptrBuffer+1
  2161  0003F4  0E1D               	movlw	low BuildPacket@packetIndex
  2162  0003F6  6E11               	movwf	insertByte@index,c
  2163  0003F8  0E00               	movlw	high BuildPacket@packetIndex
  2164  0003FA  6E12               	movwf	insertByte@index+1,c
  2165  0003FC  501C               	movf	BuildPacket@i,w,c
  2166  0003FE  0D01               	mullw	1
  2167  000400  50F3               	movf	prodl,w,c
  2168  000402  2417               	addwf	BuildPacket@ptrData,w,c
  2169  000404  6ED9               	movwf	fsr2l,c
  2170  000406  50F4               	movf	prodh,w,c
  2171  000408  2018               	addwfc	BuildPacket@ptrData+1,w,c
  2172  00040A  6EDA               	movwf	fsr2h,c
  2173  00040C  50DF               	movf	indf2,w,c
  2174  00040E  EC22  F002         	call	_insertByte
  2175  000412  0900               	iorlw	0
  2176  000414  A4D8               	btfss	status,2,c
  2177  000416  D002               	goto	l1791
  2178  000418  0E00               	movlw	0
  2179  00041A  0012               	return	
  2180  00041C                     l1791:
  2181  00041C  2A1C               	incf	BuildPacket@i,f,c
  2182  00041E                     l1793:
  2183  00041E  5016               	movf	BuildPacket@dataLength,w,c
  2184  000420  5C1C               	subwf	BuildPacket@i,w,c
  2185  000422  A0D8               	btfss	status,0,c
  2186  000424  D7E3               	goto	l1785
  2187                           
  2188                           ;main.c: 364: }
  2189                           ;main.c: 365: ptrPacket[packetIndex++] = 13;
  2190  000426  501D               	movf	BuildPacket@packetIndex,w,c
  2191  000428  0D01               	mullw	1
  2192  00042A  50F3               	movf	prodl,w,c
  2193  00042C  2419               	addwf	BuildPacket@ptrPacket,w,c
  2194  00042E  6ED9               	movwf	fsr2l,c
  2195  000430  50F4               	movf	prodh,w,c
  2196  000432  201A               	addwfc	BuildPacket@ptrPacket+1,w,c
  2197  000434  6EDA               	movwf	fsr2h,c
  2198  000436  0E0D               	movlw	13
  2199  000438  6EDF               	movwf	indf2,c
  2200  00043A  2A1D               	incf	BuildPacket@packetIndex,f,c
  2201                           
  2202                           ;main.c: 367: return (packetIndex);
  2203  00043C  501D               	movf	BuildPacket@packetIndex,w,c
  2204                           
  2205                           ;main.c: 368: } else return (0);
  2206  00043E  0012               	return	
  2207  000440                     l1805:
  2208  000440  0E00               	movlw	0
  2209  000442  0012               	return	
  2210  000444                     __end_of_BuildPacket:
  2211                           	opt stack 0
  2212                           tblptru	equ	0xFF8
  2213                           tblptrh	equ	0xFF7
  2214                           tblptrl	equ	0xFF6
  2215                           tablat	equ	0xFF5
  2216                           prodh	equ	0xFF4
  2217                           prodl	equ	0xFF3
  2218                           intcon	equ	0xFF2
  2219                           intcon2	equ	0xFF1
  2220                           postinc0	equ	0xFEE
  2221                           wreg	equ	0xFE8
  2222                           postdec1	equ	0xFE5
  2223                           fsr1h	equ	0xFE2
  2224                           fsr1l	equ	0xFE1
  2225                           indf2	equ	0xFDF
  2226                           postinc2	equ	0xFDE
  2227                           postdec2	equ	0xFDD
  2228                           fsr2h	equ	0xFDA
  2229                           fsr2l	equ	0xFD9
  2230                           status	equ	0xFD8
  2231                           
  2232 ;; *************** function _insertByte *****************
  2233 ;; Defined at:
  2234 ;;		line 338 in file "../main.c"
  2235 ;; Parameters:    Size  Location     Type
  2236 ;;  dataByte        1    wreg     unsigned char 
  2237 ;;  ptrBuffer       2   14[COMRAM] PTR unsigned char 
  2238 ;;		 -> packet(32), 
  2239 ;;  index           2   16[COMRAM] PTR unsigned char 
  2240 ;;		 -> BuildPacket@packetIndex(1), 
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;  dataByte        1   19[COMRAM] unsigned char 
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      unsigned char 
  2245 ;; Registers used:
  2246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2252 ;;      Params:         4       0       0       0       0       0       0
  2253 ;;      Locals:         1       0       0       0       0       0       0
  2254 ;;      Temps:          1       0       0       0       0       0       0
  2255 ;;      Totals:         6       0       0       0       0       0       0
  2256 ;;Total ram usage:        6 bytes
  2257 ;; Hardware stack levels used:    1
  2258 ;; Hardware stack levels required when called:    1
  2259 ;; This function calls:
  2260 ;;		Nothing
  2261 ;; This function is called by:
  2262 ;;		_BuildPacket
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           	psect	text10
  2267  000444                     __ptext10:
  2268                           	opt stack 0
  2269  000444                     _insertByte:
  2270                           	opt stack 28
  2271                           
  2272                           ;incstack = 0
  2273                           ;insertByte@dataByte stored from wreg
  2274  000444  6E14               	movwf	insertByte@dataByte,c
  2275                           
  2276                           ;main.c: 340: if (*index >= 32) return (0);
  2277  000446  C011  FFD9         	movff	insertByte@index,fsr2l
  2278  00044A  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2279  00044E  0E1F               	movlw	31
  2280  000450  64DF               	cpfsgt	indf2,c
  2281  000452  D002               	goto	l1573
  2282  000454  0E00               	movlw	0
  2283  000456  0012               	return	
  2284  000458                     l1573:
  2285                           
  2286                           ;main.c: 341: if (dataByte == 36 || dataByte == 16 || dataByte == 13) {
  2287  000458  0E24               	movlw	36
  2288  00045A  1814               	xorwf	insertByte@dataByte,w,c
  2289  00045C  B4D8               	btfsc	status,2,c
  2290  00045E  D008               	goto	l1579
  2291  000460  0E10               	movlw	16
  2292  000462  1814               	xorwf	insertByte@dataByte,w,c
  2293  000464  B4D8               	btfsc	status,2,c
  2294  000466  D004               	goto	l1579
  2295  000468  0E0D               	movlw	13
  2296  00046A  1814               	xorwf	insertByte@dataByte,w,c
  2297  00046C  A4D8               	btfss	status,2,c
  2298  00046E  D01C               	goto	l1583
  2299  000470                     l1579:
  2300                           
  2301                           ;main.c: 342: ptrBuffer[*index] = 16;
  2302  000470  C011  FFD9         	movff	insertByte@index,fsr2l
  2303  000474  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2304  000478  50DF               	movf	indf2,w,c
  2305  00047A  6E13               	movwf	??_insertByte& (0+255),c
  2306  00047C  5013               	movf	??_insertByte,w,c
  2307  00047E  0D01               	mullw	1
  2308  000480  50F3               	movf	prodl,w,c
  2309  000482  240F               	addwf	insertByte@ptrBuffer,w,c
  2310  000484  6ED9               	movwf	fsr2l,c
  2311  000486  50F4               	movf	prodh,w,c
  2312  000488  2010               	addwfc	insertByte@ptrBuffer+1,w,c
  2313  00048A  6EDA               	movwf	fsr2h,c
  2314  00048C  0E10               	movlw	16
  2315  00048E  6EDF               	movwf	indf2,c
  2316                           
  2317                           ;main.c: 343: *index = *index + 1;
  2318  000490  C011  FFD9         	movff	insertByte@index,fsr2l
  2319  000494  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2320  000498  50DF               	movf	indf2,w,c
  2321  00049A  6E13               	movwf	??_insertByte& (0+255),c
  2322  00049C  2813               	incf	??_insertByte,w,c
  2323  00049E  C011  FFD9         	movff	insertByte@index,fsr2l
  2324  0004A2  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2325  0004A6  6EDF               	movwf	indf2,c
  2326  0004A8                     l1583:
  2327                           
  2328                           ;main.c: 344: }
  2329                           ;main.c: 345: if (*index >= 32) return (0);
  2330  0004A8  C011  FFD9         	movff	insertByte@index,fsr2l
  2331  0004AC  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2332  0004B0  0E1F               	movlw	31
  2333  0004B2  64DF               	cpfsgt	indf2,c
  2334  0004B4  D002               	goto	l1589
  2335  0004B6  0E00               	movlw	0
  2336  0004B8  0012               	return	
  2337  0004BA                     l1589:
  2338                           
  2339                           ;main.c: 346: ptrBuffer[*index] = dataByte;
  2340  0004BA  C011  FFD9         	movff	insertByte@index,fsr2l
  2341  0004BE  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2342  0004C2  50DF               	movf	indf2,w,c
  2343  0004C4  6E13               	movwf	??_insertByte& (0+255),c
  2344  0004C6  5013               	movf	??_insertByte,w,c
  2345  0004C8  0D01               	mullw	1
  2346  0004CA  50F3               	movf	prodl,w,c
  2347  0004CC  240F               	addwf	insertByte@ptrBuffer,w,c
  2348  0004CE  6ED9               	movwf	fsr2l,c
  2349  0004D0  50F4               	movf	prodh,w,c
  2350  0004D2  2010               	addwfc	insertByte@ptrBuffer+1,w,c
  2351  0004D4  6EDA               	movwf	fsr2h,c
  2352  0004D6  C014  FFDF         	movff	insertByte@dataByte,indf2
  2353                           
  2354                           ;main.c: 347: *index = *index + 1;
  2355  0004DA  C011  FFD9         	movff	insertByte@index,fsr2l
  2356  0004DE  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2357  0004E2  50DF               	movf	indf2,w,c
  2358  0004E4  6E13               	movwf	??_insertByte& (0+255),c
  2359  0004E6  2813               	incf	??_insertByte,w,c
  2360  0004E8  C011  FFD9         	movff	insertByte@index,fsr2l
  2361  0004EC  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2362  0004F0  6EDF               	movwf	indf2,c
  2363                           
  2364                           ;main.c: 348: return (!0);
  2365  0004F2  0E01               	movlw	1
  2366  0004F4  0012               	return	
  2367  0004F6                     __end_of_insertByte:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           intcon	equ	0xFF2
  2376                           intcon2	equ	0xFF1
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           postdec1	equ	0xFE5
  2380                           fsr1h	equ	0xFE2
  2381                           fsr1l	equ	0xFE1
  2382                           indf2	equ	0xFDF
  2383                           postinc2	equ	0xFDE
  2384                           postdec2	equ	0xFDD
  2385                           fsr2h	equ	0xFDA
  2386                           fsr2l	equ	0xFD9
  2387                           status	equ	0xFD8
  2388                           
  2389 ;; *************** function _isr *****************
  2390 ;; Defined at:
  2391 ;;		line 261 in file "../main.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;		None
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;		None
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2405 ;;      Params:         0       0       0       0       0       0       0
  2406 ;;      Locals:         0       0       0       0       0       0       0
  2407 ;;      Temps:         14       0       0       0       0       0       0
  2408 ;;      Totals:        14       0       0       0       0       0       0
  2409 ;;Total ram usage:       14 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; This function calls:
  2412 ;;		Nothing
  2413 ;; This function is called by:
  2414 ;;		Interrupt level 2
  2415 ;; This function uses a non-reentrant model
  2416 ;;
  2417                           
  2418                           	psect	intcode
  2419  000008                     __pintcode:
  2420                           	opt stack 0
  2421  000008                     _isr:
  2422                           	opt stack 28
  2423                           
  2424                           ;incstack = 0
  2425  000008  8264               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2426  00000A  CFFA F001          	movff	pclath,??_isr
  2427  00000E  CFFB F002          	movff	pclatu,??_isr+1
  2428  000012  CFE9 F003          	movff	fsr0l,??_isr+2
  2429  000016  CFEA F004          	movff	fsr0h,??_isr+3
  2430  00001A  CFE1 F005          	movff	fsr1l,??_isr+4
  2431  00001E  CFE2 F006          	movff	fsr1h,??_isr+5
  2432  000022  CFD9 F007          	movff	fsr2l,??_isr+6
  2433  000026  CFDA F008          	movff	fsr2h,??_isr+7
  2434  00002A  CFF3 F009          	movff	prodl,??_isr+8
  2435  00002E  CFF4 F00A          	movff	prodh,??_isr+9
  2436  000032  CFF6 F00B          	movff	tblptrl,??_isr+10
  2437  000036  CFF7 F00C          	movff	tblptrh,??_isr+11
  2438  00003A  CFF8 F00D          	movff	tblptru,??_isr+12
  2439  00003E  CFF5 F00E          	movff	tablat,??_isr+13
  2440                           
  2441                           ;main.c: 262: static int Timer2Counter = 0;
  2442                           ;main.c: 264: if (INTCONbits.INT0IF)
  2443  000042  A2F2               	btfss	intcon,1,c	;volatile
  2444  000044  D003               	goto	i2l1209
  2445                           
  2446                           ;main.c: 265: {
  2447                           ;main.c: 266: INTCONbits.INT0IF = 0;
  2448  000046  92F2               	bcf	intcon,1,c	;volatile
  2449                           
  2450                           ;main.c: 267: pushFlag = !0;
  2451  000048  0E01               	movlw	1
  2452  00004A  6E42               	movwf	_pushFlag,c
  2453  00004C                     i2l1209:
  2454                           
  2455                           ;main.c: 268: }
  2456                           ;main.c: 270: if (INTCONbits.RBIF)
  2457  00004C  A0F2               	btfss	intcon,0,c	;volatile
  2458  00004E  D003               	goto	i2l105
  2459                           
  2460                           ;main.c: 271: {
  2461                           ;main.c: 272: PORTBreg = PORTB;
  2462  000050  CF81 F043          	movff	3969,_PORTBreg	;volatile
  2463                           
  2464                           ;main.c: 273: INTCONbits.RBIF = 0;
  2465  000054  90F2               	bcf	intcon,0,c	;volatile
  2466  000056                     i2l105:
  2467                           
  2468                           ;main.c: 274: }
  2469                           ;main.c: 276: if (TMR2IF)
  2470  000056  A29E               	btfss	3998,1,c	;volatile
  2471  000058  D011               	goto	i2l108
  2472                           
  2473                           ;main.c: 277: {
  2474                           ;main.c: 278: TMR2IF = 0;
  2475  00005A  929E               	bcf	3998,1,c	;volatile
  2476                           
  2477                           ;main.c: 279: Timer2Counter++;
  2478  00005C  4A3E               	infsnz	isr@Timer2Counter,f,c
  2479  00005E  2A3F               	incf	isr@Timer2Counter+1,f,c
  2480                           
  2481                           ;main.c: 280: if (Timer2Counter >= 100)
  2482  000060  BE3F               	btfsc	isr@Timer2Counter+1,7,c
  2483  000062  D00C               	goto	i2l108
  2484  000064  503F               	movf	isr@Timer2Counter+1,w,c
  2485  000066  E104               	bnz	i2u40_40
  2486  000068  0E64               	movlw	100
  2487  00006A  5C3E               	subwf	isr@Timer2Counter,w,c
  2488  00006C  A0D8               	btfss	status,0,c
  2489  00006E  D006               	goto	i2l108
  2490  000070                     i2u40_40:
  2491                           
  2492                           ;main.c: 281: {
  2493                           ;main.c: 282: Timer2Counter = 0;
  2494  000070  0E00               	movlw	0
  2495  000072  6E3F               	movwf	isr@Timer2Counter+1,c
  2496  000074  0E00               	movlw	0
  2497  000076  6E3E               	movwf	isr@Timer2Counter,c
  2498                           
  2499                           ;main.c: 283: Timer2flag = !0;
  2500  000078  0E01               	movlw	1
  2501  00007A  6E41               	movwf	_Timer2flag,c
  2502  00007C                     i2l108:
  2503  00007C  C00E  FFF5         	movff	??_isr+13,tablat
  2504  000080  C00D  FFF8         	movff	??_isr+12,tblptru
  2505  000084  C00C  FFF7         	movff	??_isr+11,tblptrh
  2506  000088  C00B  FFF6         	movff	??_isr+10,tblptrl
  2507  00008C  C00A  FFF4         	movff	??_isr+9,prodh
  2508  000090  C009  FFF3         	movff	??_isr+8,prodl
  2509  000094  C008  FFDA         	movff	??_isr+7,fsr2h
  2510  000098  C007  FFD9         	movff	??_isr+6,fsr2l
  2511  00009C  C006  FFE2         	movff	??_isr+5,fsr1h
  2512  0000A0  C005  FFE1         	movff	??_isr+4,fsr1l
  2513  0000A4  C004  FFEA         	movff	??_isr+3,fsr0h
  2514  0000A8  C003  FFE9         	movff	??_isr+2,fsr0l
  2515  0000AC  C002  FFFB         	movff	??_isr+1,pclatu
  2516  0000B0  C001  FFFA         	movff	??_isr,pclath
  2517  0000B4  9264               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2518  0000B6  0011               	retfie		f
  2519  0000B8                     __end_of_isr:
  2520                           	opt stack 0
  2521                           pclatu	equ	0xFFB
  2522                           pclath	equ	0xFFA
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           intcon	equ	0xFF2
  2530                           intcon2	equ	0xFF1
  2531                           postinc0	equ	0xFEE
  2532                           fsr0h	equ	0xFEA
  2533                           fsr0l	equ	0xFE9
  2534                           wreg	equ	0xFE8
  2535                           postdec1	equ	0xFE5
  2536                           fsr1h	equ	0xFE2
  2537                           fsr1l	equ	0xFE1
  2538                           indf2	equ	0xFDF
  2539                           postinc2	equ	0xFDE
  2540                           postdec2	equ	0xFDD
  2541                           fsr2h	equ	0xFDA
  2542                           fsr2l	equ	0xFD9
  2543                           status	equ	0xFD8
  2544                           pclatu	equ	0xFFB
  2545                           pclath	equ	0xFFA
  2546                           tblptru	equ	0xFF8
  2547                           tblptrh	equ	0xFF7
  2548                           tblptrl	equ	0xFF6
  2549                           tablat	equ	0xFF5
  2550                           prodh	equ	0xFF4
  2551                           prodl	equ	0xFF3
  2552                           intcon	equ	0xFF2
  2553                           intcon2	equ	0xFF1
  2554                           postinc0	equ	0xFEE
  2555                           fsr0h	equ	0xFEA
  2556                           fsr0l	equ	0xFE9
  2557                           wreg	equ	0xFE8
  2558                           postdec1	equ	0xFE5
  2559                           fsr1h	equ	0xFE2
  2560                           fsr1l	equ	0xFE1
  2561                           indf2	equ	0xFDF
  2562                           postinc2	equ	0xFDE
  2563                           postdec2	equ	0xFDD
  2564                           fsr2h	equ	0xFDA
  2565                           fsr2l	equ	0xFD9
  2566                           status	equ	0xFD8
  2567                           
  2568                           	psect	rparam
  2569  0000                     pclatu	equ	0xFFB
  2570                           pclath	equ	0xFFA
  2571                           tblptru	equ	0xFF8
  2572                           tblptrh	equ	0xFF7
  2573                           tblptrl	equ	0xFF6
  2574                           tablat	equ	0xFF5
  2575                           prodh	equ	0xFF4
  2576                           prodl	equ	0xFF3
  2577                           intcon	equ	0xFF2
  2578                           intcon2	equ	0xFF1
  2579                           postinc0	equ	0xFEE
  2580                           fsr0h	equ	0xFEA
  2581                           fsr0l	equ	0xFE9
  2582                           wreg	equ	0xFE8
  2583                           postdec1	equ	0xFE5
  2584                           fsr1h	equ	0xFE2
  2585                           fsr1l	equ	0xFE1
  2586                           indf2	equ	0xFDF
  2587                           postinc2	equ	0xFDE
  2588                           postdec2	equ	0xFDD
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593                           	psect	temp
  2594  000064                     btemp:
  2595                           	opt stack 0
  2596  000064                     	ds	1
  2597  0000                     int$flags	set	btemp
  2598                           pclatu	equ	0xFFB
  2599                           pclath	equ	0xFFA
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           intcon2	equ	0xFF1
  2608                           postinc0	equ	0xFEE
  2609                           fsr0h	equ	0xFEA
  2610                           fsr0l	equ	0xFE9
  2611                           wreg	equ	0xFE8
  2612                           postdec1	equ	0xFE5
  2613                           fsr1h	equ	0xFE2
  2614                           fsr1l	equ	0xFE1
  2615                           indf2	equ	0xFDF
  2616                           postinc2	equ	0xFDE
  2617                           postdec2	equ	0xFDD
  2618                           fsr2h	equ	0xFDA
  2619                           fsr2l	equ	0xFD9
  2620                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    528
    Data        0
    BSS         1262
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     53      99
    BANK0           128     21      85
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    BuildPacket@ptrData	PTR unsigned char  size(2) Largest target is 8
		 -> main@arrJoystickData(BANK0[8]), 

    BuildPacket@ptrPacket	PTR unsigned char  size(2) Largest target is 32
		 -> packet(COMRAM[32]), 

    insertByte@ptrBuffer	PTR unsigned char  size(2) Largest target is 32
		 -> packet(COMRAM[32]), 

    insertByte@index	PTR unsigned char  size(2) Largest target is 1
		 -> BuildPacket@packetIndex(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_readJoySticks
    _readJoySticks->___lwdiv
    ___lwdiv->___wmul
    _BuildPacket->_insertByte

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0    4535
                                              0 BANK0     21    21      0
                        _BuildPacket
                            _DelayMs
                               _init
                              _putch
                      _readJoySticks
 ---------------------------------------------------------------------------------
 (1) _readJoySticks                                       26    26      0    1344
                                             27 COMRAM    26    26      0
                   _ADconvertAndRead
                       _ADsetChannel
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     386
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     395
                                             20 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADsetChannel                                         2     2      0      22
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADconvertAndRead                                     8     6      2     102
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayMs                                              4     2      2     176
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _BuildPacket                                          9     3      6    2054
                                             20 COMRAM     9     3      6
                         _insertByte
 ---------------------------------------------------------------------------------
 (2) _insertByte                                           6     2      4    1050
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BuildPacket
     _insertByte
   _DelayMs
   _init
   _putch
   _readJoySticks
     _ADconvertAndRead
     _ADsetChannel
     ___lwdiv
       ___wmul (ARG)
     ___wmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     400      17       66.7%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      80       7       50.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     15      55       5       66.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     35      63       1       78.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     138      15        0.0%
DATA                 0      0     538       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Apr 06 13:08:32 2018

         ___wmul@multiplicand 0011                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                         l111 06A8                           l120 060E                           l132 0124  
                         l137 018E                           l632 05BC                           _PR2 000FCB  
                         _isr 0008                           prod 000FF3                           wreg 000FE8  
       readJoySticks@ADoffset 001E                  __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000  
                        l1611 0592                          l1621 05B2                          l1613 0596  
                        l1713 0640                          l1721 065A                          l1609 058A  
                        l1715 0646                          l1731 0106                          l1573 0458  
                        l1805 0440                          l1717 064A                          l1733 012C  
                        l1583 04A8                          l1719 0652                          l1743 01A2  
                        l1823 0240                          l1833 025E                          l1579 0470  
                        l1771 03A6                          l1755 021C                          l1739 0172  
                        l1843 0284                          l1589 04BA                          l1749 0210  
                        l1837 0270                          l1791 041C                          l1783 03E6  
                        l1785 03EC                          l1793 041E                          l1777 03C6  
                        l1883 033A                          l1887 0356                          ?_isr 0001  
                 main@convert 00D3                          u1050 00CA                          u1060 00E2  
                __CFG_PWRT$ON 000000                          _main 0224                          _init 04F6  
                        fsr0h 000FEA                          fsr1h 000FE2                          fsr2h 000FDA  
                        fsr0l 000FE9                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          btemp 0064        readJoySticks@ADchannel 0040  
                        prodh 000FF4                          prodl 000FF3                          start 00B8  
               __CFG_IESO$OFF 000000               __end_of_DelayMs 066C                 __CFG_MCLRE$ON 000000  
       BuildPacket@subCommand 0015                  ___param_bank 000000                         ??_isr 0001  
         __end_of_BuildPacket 0444                         ?_main 0001                         ?_init 0001  
                       _T2CON 000FCA                __CFG_DEBUG$OFF 000000               __end_of___lwdiv 05C6  
                       i2l105 0056                         i2l108 007C                         _SPBRG 000FAF  
                       _PORTB 000F81                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TXREG 000FAD                __CFG_FCMEN$OFF 000000  
                       _putch 06A6                         main@i 00D1                __CFG_BOREN$OFF 000000  
                       pclath 000FFA                         tablat 000FF5                         status 000FD8  
          BuildPacket@command 001B  readJoySticks@joyStickReading 0034            BuildPacket@ptrData 0017  
             __initialization 05C6                  __end_of_main 0364                  __end_of_init 0574  
   readJoySticks@ADrawReading 0030                 ?_ADsetChannel 0001                        ??_main 0036  
                      ??_init 000F                 __activetblptr 000002           main@arrJoystickData 00C8  
      __size_of_readJoySticks 0168                        _ADCON0 000FC2                        _ADCON2 000FC0  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        ?_putch 0001  
                      i2l1209 004C                        _INTCON 000FF2                     ??_DelayMs 0011  
    __end_of_ADconvertAndRead 063E                        _TMR2IF 007CF1                   _BuildPacket 0364  
              __CFG_XINST$OFF 000000                    _Timer2flag 0041                ??_ADsetChannel 000F  
                      ___wmul 066C                     ??___lwdiv 0019                        _packet 0044  
                      clear_0 05CE                        clear_1 05E0                        clear_2 05EC  
                      clear_3 05F8          main@intLeftJoystickX 00C2          main@intLeftJoystickY 00C0  
                __mediumconst 7DEE                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 0080       __end_of__initialization 05FE  
             __CFG_PBADEN$OFF 000000                 ___rparam_used 000001                __pcstackCOMRAM 0001  
               _readJoySticks 00BC                 __end_of_putch 06B2                       ??_putch 000F  
            isr@Timer2Counter 003E                    __pbssBANK0 0080                    __pbssBANK1 0100  
          insertByte@dataByte 0014                ?_readJoySticks 0001                       ?___wmul 000F  
                     _INTCON2 000FF1                       i2u40_40 0070          __end_of_ADsetChannel 06A6  
                     _DelayMs 063E             __end_of_crc_tab16 7FEF                       __Hparam 0000  
                     __Lparam 0000               __size_of___wmul 0026                       ___lwdiv 0574  
             __CFG_STVREN$OFF 000000                       __pcinit 05C6                       __ramtop 0600  
             insertByte@index 0011                       __ptext0 0224                       __ptext1 00BC  
                     __ptext2 066C                       __ptext3 0574                       __ptext4 0692  
                     __ptext5 060C                       __ptext6 06A6                       __ptext7 04F6  
                     __ptext8 063E                       __ptext9 0364                     _T2CONbits 000FCA  
                __size_of_isr 00B0                    _insertByte 0444          end_of_initialization 05FE  
               __Lmediumconst 7DEE             ?_ADconvertAndRead 000F              main@packetLength 00D0  
             ??_readJoySticks 001C            ??_ADconvertAndRead 0011                  ?_BuildPacket 0015  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                    _testBuffer 0100  
                   _PORTAbits 000F80                     _PORTBbits 000F81           ADsetChannel@channel 0010  
                   _TXSTAbits 000FAC         main@intRightJoystickX 00C6         main@intRightJoystickY 00C4  
        BuildPacket@ptrPacket 0019                __end_of___wmul 0692                   _BAUDCONbits 000FB8  
                DelayMs@count 000F                   ?_insertByte 000F                   putch@TxByte 000F  
       __size_of_ADsetChannel 0014           start_initialization 05C6                   __end_of_isr 00B8  
  __end_ofreadJoySticks@F2974 7FFF    __end_ofreadJoySticks@F2976 7FF7      ADconvertAndRead@highByte 0015  
                    ??___wmul 0013                  _ADsetChannel 0692              __CFG_LPT1OSC$OFF 000000  
                 __pbssBIGRAM 0180                   __pbssCOMRAM 0036                 __pcstackBANK0 00C0  
                    ?_DelayMs 000F                 _arrDataPacket 0180              ___lwdiv@dividend 0015  
         __size_of_insertByte 00B2             __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  
               __pmediumconst 7DEE          __size_of_BuildPacket 00E0                     _crc_tab16 7DEF  
                    ?___lwdiv 0015              ___lwdiv@quotient 001A                __size_of_putch 000C  
         insertByte@ptrBuffer 000F                ___wmul@product 0013                      DelayMs@i 0011  
                    _PIE1bits 000F9D                      _ADresult 0036                      _PIR1bits 000F9E  
                    _PORTBreg 0043       ADconvertAndRead@ADvalue 0013     __size_of_ADconvertAndRead 0032  
                  _ADCON0bits 000FC2                    _ADCON1bits 000FC1                    _ADCON2bits 000FC0  
           ___wmul@multiplier 000F           readJoySticks@ADspan 0026                   _INTCON2bits 000FF1  
            __size_of_DelayMs 002E           readJoySticks@offset 002E                      __Hrparam 0000  
       __end_of_readJoySticks 0224                      __Lrparam 0000              __size_of___lwdiv 0052  
                ??_insertByte 0013               ___lwdiv@divisor 0017               ___lwdiv@counter 0019  
                    __ptext10 0444                 __size_of_main 0140                 __size_of_init 007E  
          __end_of_insertByte 04F6            readJoySticks@F2974 7FF7            readJoySticks@F2976 7FEF  
                    int$flags 0064                      _pushFlag 0042                main@LEDcounter 00D2  
                  _INTCONbits 000FF2         BuildPacket@dataLength 0016                      intlevel2 0000  
                BuildPacket@i 001C                 _commandBuffer 0080              DelayMs@downCount 0012  
           readJoySticks@span 0032              _ADconvertAndRead 060C        BuildPacket@packetIndex 001D  
               ??_BuildPacket 001B  
