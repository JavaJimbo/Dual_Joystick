

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Apr 06 11:48:51 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18LF2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           ; Version 1.41
    29                           ; Generated 25/01/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18LF2520 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	mediumconst
    64  007DEE                     __pmediumconst:
    65                           	opt stack 0
    66  007DEE  00                 	db	0
    67  007DEF                     _crc_tab16:
    68                           	opt stack 0
    69  007DEF  0000               	dw	0
    70  007DF1  C0C1               	dw	49345
    71  007DF3  C181               	dw	49537
    72  007DF5  0140               	dw	320
    73  007DF7  C301               	dw	49921
    74  007DF9  03C0               	dw	960
    75  007DFB  0280               	dw	640
    76  007DFD  C241               	dw	49729
    77  007DFF  C601               	dw	50689
    78  007E01  06C0               	dw	1728
    79  007E03  0780               	dw	1920
    80  007E05  C741               	dw	51009
    81  007E07  0500               	dw	1280
    82  007E09  C5C1               	dw	50625
    83  007E0B  C481               	dw	50305
    84  007E0D  0440               	dw	1088
    85  007E0F  CC01               	dw	52225
    86  007E11  0CC0               	dw	3264
    87  007E13  0D80               	dw	3456
    88  007E15  CD41               	dw	52545
    89  007E17  0F00               	dw	3840
    90  007E19  CFC1               	dw	53185
    91  007E1B  CE81               	dw	52865
    92  007E1D  0E40               	dw	3648
    93  007E1F  0A00               	dw	2560
    94  007E21  CAC1               	dw	51905
    95  007E23  CB81               	dw	52097
    96  007E25  0B40               	dw	2880
    97  007E27  C901               	dw	51457
    98  007E29  09C0               	dw	2496
    99  007E2B  0880               	dw	2176
   100  007E2D  C841               	dw	51265
   101  007E2F  D801               	dw	55297
   102  007E31  18C0               	dw	6336
   103  007E33  1980               	dw	6528
   104  007E35  D941               	dw	55617
   105  007E37  1B00               	dw	6912
   106  007E39  DBC1               	dw	56257
   107  007E3B  DA81               	dw	55937
   108  007E3D  1A40               	dw	6720
   109  007E3F  1E00               	dw	7680
   110  007E41  DEC1               	dw	57025
   111  007E43  DF81               	dw	57217
   112  007E45  1F40               	dw	8000
   113  007E47  DD01               	dw	56577
   114  007E49  1DC0               	dw	7616
   115  007E4B  1C80               	dw	7296
   116  007E4D  DC41               	dw	56385
   117  007E4F  1400               	dw	5120
   118  007E51  D4C1               	dw	54465
   119  007E53  D581               	dw	54657
   120  007E55  1540               	dw	5440
   121  007E57  D701               	dw	55041
   122  007E59  17C0               	dw	6080
   123  007E5B  1680               	dw	5760
   124  007E5D  D641               	dw	54849
   125  007E5F  D201               	dw	53761
   126  007E61  12C0               	dw	4800
   127  007E63  1380               	dw	4992
   128  007E65  D341               	dw	54081
   129  007E67  1100               	dw	4352
   130  007E69  D1C1               	dw	53697
   131  007E6B  D081               	dw	53377
   132  007E6D  1040               	dw	4160
   133  007E6F  F001               	dw	61441
   134  007E71  30C0               	dw	12480
   135  007E73  3180               	dw	12672
   136  007E75  F141               	dw	61761
   137  007E77  3300               	dw	13056
   138  007E79  F3C1               	dw	62401
   139  007E7B  F281               	dw	62081
   140  007E7D  3240               	dw	12864
   141  007E7F  3600               	dw	13824
   142  007E81  F6C1               	dw	63169
   143  007E83  F781               	dw	63361
   144  007E85  3740               	dw	14144
   145  007E87  F501               	dw	62721
   146  007E89  35C0               	dw	13760
   147  007E8B  3480               	dw	13440
   148  007E8D  F441               	dw	62529
   149  007E8F  3C00               	dw	15360
   150  007E91  FCC1               	dw	64705
   151  007E93  FD81               	dw	64897
   152  007E95  3D40               	dw	15680
   153  007E97  FF01               	dw	65281
   154  007E99  3FC0               	dw	16320
   155  007E9B  3E80               	dw	16000
   156  007E9D  FE41               	dw	65089
   157  007E9F  FA01               	dw	64001
   158  007EA1  3AC0               	dw	15040
   159  007EA3  3B80               	dw	15232
   160  007EA5  FB41               	dw	64321
   161  007EA7  3900               	dw	14592
   162  007EA9  F9C1               	dw	63937
   163  007EAB  F881               	dw	63617
   164  007EAD  3840               	dw	14400
   165  007EAF  2800               	dw	10240
   166  007EB1  E8C1               	dw	59585
   167  007EB3  E981               	dw	59777
   168  007EB5  2940               	dw	10560
   169  007EB7  EB01               	dw	60161
   170  007EB9  2BC0               	dw	11200
   171  007EBB  2A80               	dw	10880
   172  007EBD  EA41               	dw	59969
   173  007EBF  EE01               	dw	60929
   174  007EC1  2EC0               	dw	11968
   175  007EC3  2F80               	dw	12160
   176  007EC5  EF41               	dw	61249
   177  007EC7  2D00               	dw	11520
   178  007EC9  EDC1               	dw	60865
   179  007ECB  EC81               	dw	60545
   180  007ECD  2C40               	dw	11328
   181  007ECF  E401               	dw	58369
   182  007ED1  24C0               	dw	9408
   183  007ED3  2580               	dw	9600
   184  007ED5  E541               	dw	58689
   185  007ED7  2700               	dw	9984
   186  007ED9  E7C1               	dw	59329
   187  007EDB  E681               	dw	59009
   188  007EDD  2640               	dw	9792
   189  007EDF  2200               	dw	8704
   190  007EE1  E2C1               	dw	58049
   191  007EE3  E381               	dw	58241
   192  007EE5  2340               	dw	9024
   193  007EE7  E101               	dw	57601
   194  007EE9  21C0               	dw	8640
   195  007EEB  2080               	dw	8320
   196  007EED  E041               	dw	57409
   197  007EEF  A001               	dw	40961
   198  007EF1  60C0               	dw	24768
   199  007EF3  6180               	dw	24960
   200  007EF5  A141               	dw	41281
   201  007EF7  6300               	dw	25344
   202  007EF9  A3C1               	dw	41921
   203  007EFB  A281               	dw	41601
   204  007EFD  6240               	dw	25152
   205  007EFF  6600               	dw	26112
   206  007F01  A6C1               	dw	42689
   207  007F03  A781               	dw	42881
   208  007F05  6740               	dw	26432
   209  007F07  A501               	dw	42241
   210  007F09  65C0               	dw	26048
   211  007F0B  6480               	dw	25728
   212  007F0D  A441               	dw	42049
   213  007F0F  6C00               	dw	27648
   214  007F11  ACC1               	dw	44225
   215  007F13  AD81               	dw	44417
   216  007F15  6D40               	dw	27968
   217  007F17  AF01               	dw	44801
   218  007F19  6FC0               	dw	28608
   219  007F1B  6E80               	dw	28288
   220  007F1D  AE41               	dw	44609
   221  007F1F  AA01               	dw	43521
   222  007F21  6AC0               	dw	27328
   223  007F23  6B80               	dw	27520
   224  007F25  AB41               	dw	43841
   225  007F27  6900               	dw	26880
   226  007F29  A9C1               	dw	43457
   227  007F2B  A881               	dw	43137
   228  007F2D  6840               	dw	26688
   229  007F2F  7800               	dw	30720
   230  007F31  B8C1               	dw	47297
   231  007F33  B981               	dw	47489
   232  007F35  7940               	dw	31040
   233  007F37  BB01               	dw	47873
   234  007F39  7BC0               	dw	31680
   235  007F3B  7A80               	dw	31360
   236  007F3D  BA41               	dw	47681
   237  007F3F  BE01               	dw	48641
   238  007F41  7EC0               	dw	32448
   239  007F43  7F80               	dw	32640
   240  007F45  BF41               	dw	48961
   241  007F47  7D00               	dw	32000
   242  007F49  BDC1               	dw	48577
   243  007F4B  BC81               	dw	48257
   244  007F4D  7C40               	dw	31808
   245  007F4F  B401               	dw	46081
   246  007F51  74C0               	dw	29888
   247  007F53  7580               	dw	30080
   248  007F55  B541               	dw	46401
   249  007F57  7700               	dw	30464
   250  007F59  B7C1               	dw	47041
   251  007F5B  B681               	dw	46721
   252  007F5D  7640               	dw	30272
   253  007F5F  7200               	dw	29184
   254  007F61  B2C1               	dw	45761
   255  007F63  B381               	dw	45953
   256  007F65  7340               	dw	29504
   257  007F67  B101               	dw	45313
   258  007F69  71C0               	dw	29120
   259  007F6B  7080               	dw	28800
   260  007F6D  B041               	dw	45121
   261  007F6F  5000               	dw	20480
   262  007F71  90C1               	dw	37057
   263  007F73  9181               	dw	37249
   264  007F75  5140               	dw	20800
   265  007F77  9301               	dw	37633
   266  007F79  53C0               	dw	21440
   267  007F7B  5280               	dw	21120
   268  007F7D  9241               	dw	37441
   269  007F7F  9601               	dw	38401
   270  007F81  56C0               	dw	22208
   271  007F83  5780               	dw	22400
   272  007F85  9741               	dw	38721
   273  007F87  5500               	dw	21760
   274  007F89  95C1               	dw	38337
   275  007F8B  9481               	dw	38017
   276  007F8D  5440               	dw	21568
   277  007F8F  9C01               	dw	39937
   278  007F91  5CC0               	dw	23744
   279  007F93  5D80               	dw	23936
   280  007F95  9D41               	dw	40257
   281  007F97  5F00               	dw	24320
   282  007F99  9FC1               	dw	40897
   283  007F9B  9E81               	dw	40577
   284  007F9D  5E40               	dw	24128
   285  007F9F  5A00               	dw	23040
   286  007FA1  9AC1               	dw	39617
   287  007FA3  9B81               	dw	39809
   288  007FA5  5B40               	dw	23360
   289  007FA7  9901               	dw	39169
   290  007FA9  59C0               	dw	22976
   291  007FAB  5880               	dw	22656
   292  007FAD  9841               	dw	38977
   293  007FAF  8801               	dw	34817
   294  007FB1  48C0               	dw	18624
   295  007FB3  4980               	dw	18816
   296  007FB5  8941               	dw	35137
   297  007FB7  4B00               	dw	19200
   298  007FB9  8BC1               	dw	35777
   299  007FBB  8A81               	dw	35457
   300  007FBD  4A40               	dw	19008
   301  007FBF  4E00               	dw	19968
   302  007FC1  8EC1               	dw	36545
   303  007FC3  8F81               	dw	36737
   304  007FC5  4F40               	dw	20288
   305  007FC7  8D01               	dw	36097
   306  007FC9  4DC0               	dw	19904
   307  007FCB  4C80               	dw	19584
   308  007FCD  8C41               	dw	35905
   309  007FCF  4400               	dw	17408
   310  007FD1  84C1               	dw	33985
   311  007FD3  8581               	dw	34177
   312  007FD5  4540               	dw	17728
   313  007FD7  8701               	dw	34561
   314  007FD9  47C0               	dw	18368
   315  007FDB  4680               	dw	18048
   316  007FDD  8641               	dw	34369
   317  007FDF  8201               	dw	33281
   318  007FE1  42C0               	dw	17088
   319  007FE3  4380               	dw	17280
   320  007FE5  8341               	dw	33601
   321  007FE7  4100               	dw	16640
   322  007FE9  81C1               	dw	33217
   323  007FEB  8081               	dw	32897
   324  007FED  4040               	dw	16448
   325  007FEF                     __end_of_crc_tab16:
   326                           	opt stack 0
   327  007FEF                     readJoySticks@F2982:
   328                           	opt stack 0
   329  007FEF  0096               	dw	150
   330  007FF1  00C8               	dw	200
   331  007FF3  00C8               	dw	200
   332  007FF5  00C8               	dw	200
   333  007FF7                     __end_ofreadJoySticks@F2982:
   334                           	opt stack 0
   335  007FF7                     readJoySticks@F2980:
   336                           	opt stack 0
   337  007FF7  01C2               	dw	450
   338  007FF9  0190               	dw	400
   339  007FFB  01AE               	dw	430
   340  007FFD  0190               	dw	400
   341  007FFF                     __end_ofreadJoySticks@F2980:
   342                           	opt stack 0
   343  0000                     _ADRESL	set	4035
   344  0000                     _ADRESH	set	4036
   345  0000                     _ADCON0bits	set	4034
   346  0000                     _TXREG	set	4013
   347  0000                     _PIR1bits	set	3998
   348  0000                     _PORTB	set	3969
   349  0000                     _INTCON2	set	4081
   350  0000                     _INTCON	set	4082
   351  0000                     _T2CONbits	set	4042
   352  0000                     _T2CON	set	4042
   353  0000                     _PR2	set	4043
   354  0000                     _BAUDCONbits	set	4024
   355  0000                     _PIE1bits	set	3997
   356  0000                     _RCSTAbits	set	4011
   357  0000                     _SPBRG	set	4015
   358  0000                     _TXSTAbits	set	4012
   359  0000                     _TRISC	set	3988
   360  0000                     _INTCON2bits	set	4081
   361  0000                     _TRISB	set	3987
   362  0000                     _PORTAbits	set	3968
   363  0000                     _TRISA	set	3986
   364  0000                     _ADCON2bits	set	4032
   365  0000                     _ADCON2	set	4032
   366  0000                     _ADCON1bits	set	4033
   367  0000                     _ADCON0	set	4034
   368  0000                     _INTCONbits	set	4082
   369  0000                     _PORTBbits	set	3969
   370  0000                     _TMR2IF	set	31985
   371                           
   372                           ; #config settings
   373  007FFF  00                 	db	0	; dummy byte at the end
   374  0000                     
   375                           	psect	cinit
   376  000658                     __pcinit:
   377                           	opt stack 0
   378  000658                     start_initialization:
   379                           	opt stack 0
   380  000658                     __initialization:
   381                           	opt stack 0
   382                           
   383                           ; Clear objects allocated to BIGRAM (1024 bytes)
   384  000658  EE01  F080         	lfsr	0,__pbssBIGRAM
   385  00065C  EE14 F000          	lfsr	1,1024
   386  000660                     clear_0:
   387  000660  6AEE               	clrf	postinc0,c
   388  000662  50E5               	movf	postdec1,w,c
   389  000664  50E1               	movf	fsr1l,w,c
   390  000666  E1FC               	bnz	clear_0
   391  000668  50E2               	movf	fsr1h,w,c
   392  00066A  E1FA               	bnz	clear_0
   393                           
   394                           ; Clear objects allocated to BANK1 (128 bytes)
   395  00066C  EE01  F000         	lfsr	0,__pbssBANK1
   396  000670  0E80               	movlw	128
   397  000672                     clear_1:
   398  000672  6AEE               	clrf	postinc0,c
   399  000674  06E8               	decf	wreg,f,c
   400  000676  E1FD               	bnz	clear_1
   401                           
   402                           ; Clear objects allocated to BANK0 (96 bytes)
   403  000678  EE00  F080         	lfsr	0,__pbssBANK0
   404  00067C  0E60               	movlw	96
   405  00067E                     clear_2:
   406  00067E  6AEE               	clrf	postinc0,c
   407  000680  06E8               	decf	wreg,f,c
   408  000682  E1FD               	bnz	clear_2
   409                           
   410                           ; Clear objects allocated to COMRAM (14 bytes)
   411  000684  EE00  F052         	lfsr	0,__pbssCOMRAM
   412  000688  0E0E               	movlw	14
   413  00068A                     clear_3:
   414  00068A  6AEE               	clrf	postinc0,c
   415  00068C  06E8               	decf	wreg,f,c
   416  00068E  E1FD               	bnz	clear_3
   417  000690                     end_of_initialization:
   418                           	opt stack 0
   419  000690                     __end_of__initialization:
   420                           	opt stack 0
   421  000690  9060               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   422  000692  9260               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   423  000694  0E00               	movlw	low (__Lmediumconst shr (0+16))
   424  000696  6EF8               	movwf	tblptru,c
   425  000698  0100               	movlb	0
   426  00069A  EF5E  F000         	goto	_main	;jump to C main() function
   427                           tblptru	equ	0xFF8
   428                           postinc0	equ	0xFEE
   429                           wreg	equ	0xFE8
   430                           postdec1	equ	0xFE5
   431                           fsr1h	equ	0xFE2
   432                           fsr1l	equ	0xFE1
   433                           
   434                           	psect	bssCOMRAM
   435  000052                     __pbssCOMRAM:
   436                           	opt stack 0
   437  000052                     _ADresult:
   438                           	opt stack 0
   439  000052                     	ds	8
   440  00005A                     isr@Timer2Counter:
   441                           	opt stack 0
   442  00005A                     	ds	2
   443  00005C                     readJoySticks@ADchannel:
   444                           	opt stack 0
   445  00005C                     	ds	1
   446  00005D                     _Timer2flag:
   447                           	opt stack 0
   448  00005D                     	ds	1
   449  00005E                     _pushFlag:
   450                           	opt stack 0
   451  00005E                     	ds	1
   452  00005F                     _PORTBreg:
   453                           	opt stack 0
   454  00005F                     	ds	1
   455                           tblptru	equ	0xFF8
   456                           postinc0	equ	0xFEE
   457                           wreg	equ	0xFE8
   458                           postdec1	equ	0xFE5
   459                           fsr1h	equ	0xFE2
   460                           fsr1l	equ	0xFE1
   461                           
   462                           	psect	bssBANK0
   463  000080                     __pbssBANK0:
   464                           	opt stack 0
   465  000080                     _commandBuffer:
   466                           	opt stack 0
   467  000080                     	ds	64
   468  0000C0                     _packet:
   469                           	opt stack 0
   470  0000C0                     	ds	32
   471                           tblptru	equ	0xFF8
   472                           postinc0	equ	0xFEE
   473                           wreg	equ	0xFE8
   474                           postdec1	equ	0xFE5
   475                           fsr1h	equ	0xFE2
   476                           fsr1l	equ	0xFE1
   477                           
   478                           	psect	bssBANK1
   479  000100                     __pbssBANK1:
   480                           	opt stack 0
   481  000100                     _testBuffer:
   482                           	opt stack 0
   483  000100                     	ds	128
   484                           tblptru	equ	0xFF8
   485                           postinc0	equ	0xFEE
   486                           wreg	equ	0xFE8
   487                           postdec1	equ	0xFE5
   488                           fsr1h	equ	0xFE2
   489                           fsr1l	equ	0xFE1
   490                           
   491                           	psect	bssBIGRAM
   492  000180                     __pbssBIGRAM:
   493                           	opt stack 0
   494  000180                     _arrDataPacket:
   495                           	opt stack 0
   496  000180                     	ds	1024
   497                           tblptru	equ	0xFF8
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1h	equ	0xFE2
   502                           fsr1l	equ	0xFE1
   503                           
   504                           	psect	cstackCOMRAM
   505  000001                     __pcstackCOMRAM:
   506                           	opt stack 0
   507  000001                     ??_isr:
   508  000001                     
   509                           ; 1 bytes @ 0x0
   510  000001                     	ds	14
   511  00000F                     ??_ADsetChannel:
   512  00000F                     ?_ADconvertAndRead:
   513                           	opt stack 0
   514  00000F                     ?___wmul:
   515                           	opt stack 0
   516  00000F                     putch@TxByte:
   517                           	opt stack 0
   518  00000F                     insertByte@ptrBuffer:
   519                           	opt stack 0
   520  00000F                     DelayMs@count:
   521                           	opt stack 0
   522  00000F                     ___wmul@multiplier:
   523                           	opt stack 0
   524                           
   525                           ; 2 bytes @ 0xE
   526  00000F                     	ds	1
   527  000010                     ADsetChannel@channel:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0xF
   531  000010                     	ds	1
   532  000011                     ??_ADconvertAndRead:
   533  000011                     DelayMs@i:
   534                           	opt stack 0
   535  000011                     insertByte@index:
   536                           	opt stack 0
   537  000011                     ___wmul@multiplicand:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x10
   541  000011                     	ds	1
   542  000012                     DelayMs@downCount:
   543                           	opt stack 0
   544                           
   545                           ; 1 bytes @ 0x11
   546  000012                     	ds	1
   547  000013                     ??_insertByte:
   548  000013                     ADconvertAndRead@ADvalue:
   549                           	opt stack 0
   550  000013                     ___wmul@product:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x12
   554  000013                     	ds	1
   555  000014                     insertByte@dataByte:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x13
   559  000014                     	ds	1
   560  000015                     ?___lwdiv:
   561                           	opt stack 0
   562  000015                     BuildPacket@subCommand:
   563                           	opt stack 0
   564  000015                     ADconvertAndRead@highByte:
   565                           	opt stack 0
   566  000015                     ___lwdiv@dividend:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x14
   570  000015                     	ds	1
   571  000016                     BuildPacket@dataLength:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x15
   575  000016                     	ds	1
   576  000017                     BuildPacket@ptrData:
   577                           	opt stack 0
   578  000017                     ___lwdiv@divisor:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x16
   582  000017                     	ds	2
   583  000019                     BuildPacket@ptrPacket:
   584                           	opt stack 0
   585  000019                     ___lwdiv@quotient:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x18
   589  000019                     	ds	2
   590  00001B                     BuildPacket@command:
   591                           	opt stack 0
   592  00001B                     ___lwdiv@counter:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x1A
   596  00001B                     	ds	1
   597  00001C                     ??_readJoySticks:
   598  00001C                     BuildPacket@i:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x1B
   602  00001C                     	ds	1
   603  00001D                     BuildPacket@packetIndex:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x1C
   607  00001D                     	ds	1
   608  00001E                     readJoySticks@ADoffset:
   609                           	opt stack 0
   610                           
   611                           ; 8 bytes @ 0x1D
   612  00001E                     	ds	8
   613  000026                     readJoySticks@ADspan:
   614                           	opt stack 0
   615                           
   616                           ; 8 bytes @ 0x25
   617  000026                     	ds	8
   618  00002E                     readJoySticks@offset:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x2D
   622  00002E                     	ds	2
   623  000030                     readJoySticks@ADrawReading:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x2F
   627  000030                     	ds	2
   628  000032                     readJoySticks@span:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x31
   632  000032                     	ds	2
   633  000034                     readJoySticks@joyStickReading:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x33
   637  000034                     	ds	2
   638  000036                     ??_main:
   639                           
   640                           ; 1 bytes @ 0x35
   641  000036                     	ds	2
   642  000038                     main@intLeftJoystickY:
   643                           	opt stack 0
   644                           
   645                           ; 2 bytes @ 0x37
   646  000038                     	ds	2
   647  00003A                     main@intLeftJoystickX:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x39
   651  00003A                     	ds	2
   652  00003C                     main@motorData:
   653                           	opt stack 0
   654                           
   655                           ; 5 bytes @ 0x3B
   656  00003C                     	ds	5
   657  000041                     main@rightMotorLSB:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x40
   661  000041                     	ds	1
   662  000042                     main@rightMotorMSB:
   663                           	opt stack 0
   664                           
   665                           ; 1 bytes @ 0x41
   666  000042                     	ds	1
   667  000043                     main@leftMotorMSB:
   668                           	opt stack 0
   669                           
   670                           ; 1 bytes @ 0x42
   671  000043                     	ds	1
   672  000044                     main@leftMotorLSB:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x43
   676  000044                     	ds	1
   677  000045                     main@intRightJoystickY:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x44
   681  000045                     	ds	2
   682  000047                     main@intRightJoystickX:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x46
   686  000047                     	ds	2
   687  000049                     main@packetLength:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x48
   691  000049                     	ds	1
   692  00004A                     main@i:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x49
   696  00004A                     	ds	1
   697  00004B                     main@LEDcounter:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x4A
   701  00004B                     	ds	1
   702  00004C                     main@rightMotor:
   703                           	opt stack 0
   704                           
   705                           ; 2 bytes @ 0x4B
   706  00004C                     	ds	2
   707  00004E                     main@leftMotor:
   708                           	opt stack 0
   709                           
   710                           ; 2 bytes @ 0x4D
   711  00004E                     	ds	2
   712  000050                     main@convert:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x4F
   716  000050                     	ds	2
   717                           tblptru	equ	0xFF8
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           postdec1	equ	0xFE5
   721                           fsr1h	equ	0xFE2
   722                           fsr1l	equ	0xFE1
   723                           
   724 ;;
   725 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   726 ;;
   727 ;; *************** function _main *****************
   728 ;; Defined at:
   729 ;;		line 74 in file "../main.c"
   730 ;; Parameters:    Size  Location     Type
   731 ;;		None
   732 ;; Auto vars:     Size  Location     Type
   733 ;;  motorData       5   59[COMRAM] unsigned char [5]
   734 ;;  convert         2   79[COMRAM] struct convertType
   735 ;;  leftMotor       2   77[COMRAM] short 
   736 ;;  rightMotor      2   75[COMRAM] short 
   737 ;;  intRightJoys    2   70[COMRAM] short 
   738 ;;  intRightJoys    2   68[COMRAM] short 
   739 ;;  intLeftJoyst    2   57[COMRAM] short 
   740 ;;  intLeftJoyst    2   55[COMRAM] short 
   741 ;;  LEDcounter      1   74[COMRAM] unsigned char 
   742 ;;  i               1   73[COMRAM] unsigned char 
   743 ;;  packetLength    1   72[COMRAM] unsigned char 
   744 ;;  leftMotorLSB    1   67[COMRAM] unsigned char 
   745 ;;  leftMotorMSB    1   66[COMRAM] unsigned char 
   746 ;;  rightMotorMS    1   65[COMRAM] unsigned char 
   747 ;;  rightMotorLS    1   64[COMRAM] unsigned char 
   748 ;; Return value:  Size  Location     Type
   749 ;;                  1    wreg      void 
   750 ;; Registers used:
   751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   757 ;;      Params:         0       0       0       0       0       0       0
   758 ;;      Locals:        26       0       0       0       0       0       0
   759 ;;      Temps:          2       0       0       0       0       0       0
   760 ;;      Totals:        28       0       0       0       0       0       0
   761 ;;Total ram usage:       28 bytes
   762 ;; Hardware stack levels required when called:    3
   763 ;; This function calls:
   764 ;;		_BuildPacket
   765 ;;		_DelayMs
   766 ;;		_init
   767 ;;		_putch
   768 ;;		_readJoySticks
   769 ;; This function is called by:
   770 ;;		Startup code after reset
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           	psect	text0
   775  0000BC                     __ptext0:
   776                           	opt stack 0
   777  0000BC                     _main:
   778                           	opt stack 28
   779                           
   780                           ;main.c: 75: short intLeftJoystickY, intLeftJoystickX, intRightJoystickY, intRightJoysti
      +                          ckX;
   781                           ;main.c: 76: short rightMotor, leftMotor;
   782                           ;main.c: 77: unsigned char rightMotorLSB, rightMotorMSB, leftMotorMSB, leftMotorLSB;
   783                           ;main.c: 78: unsigned char motorData[5];
   784                           ;main.c: 79: unsigned char packetLength, i;
   785                           ;main.c: 80: unsigned char LEDcounter = 0;
   786                           
   787                           ;incstack = 0
   788  0000BC  0E00               	movlw	0
   789  0000BE  6E4B               	movwf	main@LEDcounter,c
   790                           
   791                           ;main.c: 81: union convertType {
   792                           ;main.c: 82: unsigned char byte[2];
   793                           ;main.c: 83: int integer;
   794                           ;main.c: 84: } convert;
   795                           ;main.c: 86: init();
   796  0000C0  ECC4  F002         	call	_init	;wreg free
   797                           
   798                           ;main.c: 87: DelayMs(200);
   799  0000C4  0E00               	movlw	0
   800  0000C6  6E10               	movwf	DelayMs@count+1,c
   801  0000C8  0EC8               	movlw	200
   802  0000CA  6E0F               	movwf	DelayMs@count,c
   803  0000CC  EC68  F003         	call	_DelayMs	;wreg free
   804                           
   805                           ;main.c: 88: PORTBbits.RB0 = PORTBbits.RB1 = PORTBbits.RB2 = 1;
   806  0000D0  8481               	bsf	3969,2,c	;volatile
   807  0000D2  8281               	bsf	3969,1,c	;volatile
   808  0000D4  8081               	bsf	3969,0,c	;volatile
   809  0000D6                     l1609:
   810                           
   811                           ;main.c: 90: {
   812                           ;main.c: 91: if (Timer2flag)
   813  0000D6  505D               	movf	_Timer2flag,w,c
   814  0000D8  B4D8               	btfsc	status,2,c
   815  0000DA  D7FD               	goto	l1609
   816                           
   817                           ;main.c: 92: {
   818                           ;main.c: 93: Timer2flag = 0;
   819  0000DC  0E00               	movlw	0
   820  0000DE  6E5D               	movwf	_Timer2flag,c
   821                           
   822                           ;main.c: 94: LEDcounter++;
   823  0000E0  2A4B               	incf	main@LEDcounter,f,c
   824                           
   825                           ;main.c: 95: if (LEDcounter == 4)
   826  0000E2  0E04               	movlw	4
   827  0000E4  184B               	xorwf	main@LEDcounter,w,c
   828  0000E6  A4D8               	btfss	status,2,c
   829  0000E8  D003               	goto	l1619
   830                           
   831                           ;main.c: 96: {
   832                           ;main.c: 97: PORTBbits.RB0 = 1;
   833  0000EA  8081               	bsf	3969,0,c	;volatile
   834                           
   835                           ;main.c: 98: PORTBbits.RB1 = 0;
   836  0000EC  9281               	bcf	3969,1,c	;volatile
   837  0000EE  D006               	goto	L1
   838  0000F0                     l1619:
   839                           
   840                           ;main.c: 101: else if (LEDcounter == 8)
   841  0000F0  0E08               	movlw	8
   842  0000F2  184B               	xorwf	main@LEDcounter,w,c
   843  0000F4  A4D8               	btfss	status,2,c
   844  0000F6  D004               	goto	l1623
   845                           
   846                           ;main.c: 102: {
   847                           ;main.c: 103: PORTBbits.RB0 = 0;
   848  0000F8  9081               	bcf	3969,0,c	;volatile
   849                           
   850                           ;main.c: 104: PORTBbits.RB1 = 1;
   851  0000FA  8281               	bsf	3969,1,c	;volatile
   852  0000FC                     L1:
   853                           
   854                           ;main.c: 105: PORTBbits.RB2 = 0;
   855  0000FC  9481               	bcf	3969,2,c	;volatile
   856                           
   857                           ;main.c: 106: }
   858  0000FE  D008               	goto	l1629
   859  000100                     l1623:
   860                           
   861                           ;main.c: 107: else if (LEDcounter >= 12)
   862  000100  0E0B               	movlw	11
   863  000102  644B               	cpfsgt	main@LEDcounter,c
   864  000104  D005               	goto	l1629
   865                           
   866                           ;main.c: 108: {
   867                           ;main.c: 109: PORTBbits.RB0 = 0;
   868  000106  9081               	bcf	3969,0,c	;volatile
   869                           
   870                           ;main.c: 110: PORTBbits.RB1 = 0;
   871  000108  9281               	bcf	3969,1,c	;volatile
   872                           
   873                           ;main.c: 111: PORTBbits.RB2 = 1;
   874  00010A  8481               	bsf	3969,2,c	;volatile
   875                           
   876                           ;main.c: 112: LEDcounter = 0;
   877  00010C  0E00               	movlw	0
   878  00010E  6E4B               	movwf	main@LEDcounter,c
   879  000110                     l1629:
   880                           
   881                           ;main.c: 113: }
   882                           ;main.c: 115: readJoySticks();
   883  000110  EC47  F001         	call	_readJoySticks	;wreg free
   884                           
   885                           ;main.c: 117: intLeftJoystickY = ((short) ADresult[0]) - 127;
   886  000114  0E81               	movlw	129
   887  000116  2452               	addwf	_ADresult,w,c
   888  000118  6E38               	movwf	main@intLeftJoystickY,c
   889  00011A  0EFF               	movlw	255
   890  00011C  2053               	addwfc	_ADresult+1,w,c
   891  00011E  6E39               	movwf	main@intLeftJoystickY+1,c
   892                           
   893                           ;main.c: 118: intLeftJoystickX = ((short) ADresult[1]) - 127;
   894  000120  0E81               	movlw	129
   895  000122  2454               	addwf	_ADresult+2,w,c
   896  000124  6E3A               	movwf	main@intLeftJoystickX,c
   897  000126  0EFF               	movlw	255
   898  000128  2055               	addwfc	_ADresult+3,w,c
   899  00012A  6E3B               	movwf	main@intLeftJoystickX+1,c
   900                           
   901                           ;main.c: 119: intRightJoystickY = ((short) ADresult[2]) - 127;
   902  00012C  0E81               	movlw	129
   903  00012E  2456               	addwf	_ADresult+4,w,c
   904  000130  6E45               	movwf	main@intRightJoystickY,c
   905  000132  0EFF               	movlw	255
   906  000134  2057               	addwfc	_ADresult+5,w,c
   907  000136  6E46               	movwf	main@intRightJoystickY+1,c
   908                           
   909                           ;main.c: 120: intRightJoystickX = ((short) ADresult[3]) - 127;
   910  000138  0E81               	movlw	129
   911  00013A  2458               	addwf	_ADresult+6,w,c
   912  00013C  6E47               	movwf	main@intRightJoystickX,c
   913  00013E  0EFF               	movlw	255
   914  000140  2059               	addwfc	_ADresult+7,w,c
   915  000142  6E48               	movwf	main@intRightJoystickX+1,c
   916                           
   917                           ;main.c: 122: rightMotor = intRightJoystickY - intRightJoystickX;
   918  000144  C047  F036         	movff	main@intRightJoystickX,??_main
   919  000148  C048  F037         	movff	main@intRightJoystickX+1,??_main+1
   920  00014C  1E36               	comf	??_main,f,c
   921  00014E  1E37               	comf	??_main+1,f,c
   922  000150  4A36               	infsnz	??_main,f,c
   923  000152  2A37               	incf	??_main+1,f,c
   924  000154  5045               	movf	main@intRightJoystickY,w,c
   925  000156  2436               	addwf	??_main,w,c
   926  000158  6E4C               	movwf	main@rightMotor,c
   927  00015A  5046               	movf	main@intRightJoystickY+1,w,c
   928  00015C  2037               	addwfc	??_main+1,w,c
   929  00015E  6E4D               	movwf	main@rightMotor+1,c
   930                           
   931                           ;main.c: 123: rightMotor = rightMotor * 8;
   932  000160  C04C  F036         	movff	main@rightMotor,??_main
   933  000164  C04D  F037         	movff	main@rightMotor+1,??_main+1
   934  000168  90D8               	bcf	status,0,c
   935  00016A  3636               	rlcf	??_main,f,c
   936  00016C  3637               	rlcf	??_main+1,f,c
   937  00016E  90D8               	bcf	status,0,c
   938  000170  3636               	rlcf	??_main,f,c
   939  000172  3637               	rlcf	??_main+1,f,c
   940  000174  90D8               	bcf	status,0,c
   941  000176  3636               	rlcf	??_main,f,c
   942  000178  3637               	rlcf	??_main+1,f,c
   943  00017A  C036  F04C         	movff	??_main,main@rightMotor
   944  00017E  C037  F04D         	movff	??_main+1,main@rightMotor+1
   945                           
   946                           ;main.c: 124: if (rightMotor > 1000) rightMotor = 1000;
   947  000182  BE4D               	btfsc	main@rightMotor+1,7,c
   948  000184  D00A               	goto	l1647
   949  000186  0EE9               	movlw	233
   950  000188  5C4C               	subwf	main@rightMotor,w,c
   951  00018A  0E03               	movlw	3
   952  00018C  584D               	subwfb	main@rightMotor+1,w,c
   953  00018E  A0D8               	btfss	status,0,c
   954  000190  D004               	goto	l1647
   955  000192  0E03               	movlw	3
   956  000194  6E4D               	movwf	main@rightMotor+1,c
   957  000196  0EE8               	movlw	232
   958  000198  6E4C               	movwf	main@rightMotor,c
   959  00019A                     l1647:
   960                           
   961                           ;main.c: 125: if (rightMotor < -1000) rightMotor = -1000;
   962  00019A  AE4D               	btfss	main@rightMotor+1,7,c
   963  00019C  D00A               	goto	l1651
   964  00019E  0E18               	movlw	24
   965  0001A0  5C4C               	subwf	main@rightMotor,w,c
   966  0001A2  0EFC               	movlw	252
   967  0001A4  584D               	subwfb	main@rightMotor+1,w,c
   968  0001A6  B0D8               	btfsc	status,0,c
   969  0001A8  D004               	goto	l1651
   970  0001AA  0EFC               	movlw	252
   971  0001AC  6E4D               	movwf	main@rightMotor+1,c
   972  0001AE  0E18               	movlw	24
   973  0001B0  6E4C               	movwf	main@rightMotor,c
   974  0001B2                     l1651:
   975                           
   976                           ;main.c: 127: leftMotor = intRightJoystickY + intRightJoystickX;
   977  0001B2  5047               	movf	main@intRightJoystickX,w,c
   978  0001B4  2445               	addwf	main@intRightJoystickY,w,c
   979  0001B6  6E4E               	movwf	main@leftMotor,c
   980  0001B8  5048               	movf	main@intRightJoystickX+1,w,c
   981  0001BA  2046               	addwfc	main@intRightJoystickY+1,w,c
   982  0001BC  6E4F               	movwf	main@leftMotor+1,c
   983                           
   984                           ;main.c: 128: leftMotor = leftMotor * 8;
   985  0001BE  C04E  F036         	movff	main@leftMotor,??_main
   986  0001C2  C04F  F037         	movff	main@leftMotor+1,??_main+1
   987  0001C6  90D8               	bcf	status,0,c
   988  0001C8  3636               	rlcf	??_main,f,c
   989  0001CA  3637               	rlcf	??_main+1,f,c
   990  0001CC  90D8               	bcf	status,0,c
   991  0001CE  3636               	rlcf	??_main,f,c
   992  0001D0  3637               	rlcf	??_main+1,f,c
   993  0001D2  90D8               	bcf	status,0,c
   994  0001D4  3636               	rlcf	??_main,f,c
   995  0001D6  3637               	rlcf	??_main+1,f,c
   996  0001D8  C036  F04E         	movff	??_main,main@leftMotor
   997  0001DC  C037  F04F         	movff	??_main+1,main@leftMotor+1
   998                           
   999                           ;main.c: 129: if (leftMotor > 1000) leftMotor = 1000;
  1000  0001E0  BE4F               	btfsc	main@leftMotor+1,7,c
  1001  0001E2  D00A               	goto	l1659
  1002  0001E4  0EE9               	movlw	233
  1003  0001E6  5C4E               	subwf	main@leftMotor,w,c
  1004  0001E8  0E03               	movlw	3
  1005  0001EA  584F               	subwfb	main@leftMotor+1,w,c
  1006  0001EC  A0D8               	btfss	status,0,c
  1007  0001EE  D004               	goto	l1659
  1008  0001F0  0E03               	movlw	3
  1009  0001F2  6E4F               	movwf	main@leftMotor+1,c
  1010  0001F4  0EE8               	movlw	232
  1011  0001F6  6E4E               	movwf	main@leftMotor,c
  1012  0001F8                     l1659:
  1013                           
  1014                           ;main.c: 130: if (leftMotor < -1000) leftMotor = -1000;
  1015  0001F8  AE4F               	btfss	main@leftMotor+1,7,c
  1016  0001FA  D00A               	goto	l1663
  1017  0001FC  0E18               	movlw	24
  1018  0001FE  5C4E               	subwf	main@leftMotor,w,c
  1019  000200  0EFC               	movlw	252
  1020  000202  584F               	subwfb	main@leftMotor+1,w,c
  1021  000204  B0D8               	btfsc	status,0,c
  1022  000206  D004               	goto	l1663
  1023  000208  0EFC               	movlw	252
  1024  00020A  6E4F               	movwf	main@leftMotor+1,c
  1025  00020C  0E18               	movlw	24
  1026  00020E  6E4E               	movwf	main@leftMotor,c
  1027  000210                     l1663:
  1028                           
  1029                           ;main.c: 132: convert.integer = leftMotor;
  1030  000210  C04E  F050         	movff	main@leftMotor,main@convert
  1031  000214  C04F  F051         	movff	main@leftMotor+1,main@convert+1
  1032                           
  1033                           ;main.c: 133: leftMotorLSB = convert.byte[0];
  1034  000218  C050  F044         	movff	main@convert,main@leftMotorLSB
  1035                           
  1036                           ;main.c: 134: leftMotorMSB = convert.byte[1];
  1037  00021C  C051  F043         	movff	main@convert+1,main@leftMotorMSB
  1038                           
  1039                           ;main.c: 136: convert.integer = rightMotor;
  1040  000220  C04C  F050         	movff	main@rightMotor,main@convert
  1041  000224  C04D  F051         	movff	main@rightMotor+1,main@convert+1
  1042                           
  1043                           ;main.c: 137: rightMotorLSB = convert.byte[0];
  1044  000228  C050  F041         	movff	main@convert,main@rightMotorLSB
  1045                           
  1046                           ;main.c: 138: rightMotorMSB = convert.byte[1];
  1047  00022C  C051  F042         	movff	main@convert+1,main@rightMotorMSB
  1048                           
  1049                           ;main.c: 140: motorData[0] = rightMotorMSB;
  1050  000230  C042  F03C         	movff	main@rightMotorMSB,main@motorData
  1051                           
  1052                           ;main.c: 141: motorData[1] = rightMotorLSB;
  1053  000234  C041  F03D         	movff	main@rightMotorLSB,main@motorData+1
  1054                           
  1055                           ;main.c: 142: motorData[2] = leftMotorMSB;
  1056  000238  C043  F03E         	movff	main@leftMotorMSB,main@motorData+2
  1057                           
  1058                           ;main.c: 143: motorData[3] = leftMotorLSB;
  1059  00023C  C044  F03F         	movff	main@leftMotorLSB,main@motorData+3
  1060                           
  1061                           ;main.c: 148: packetLength = BuildPacket(0, 145, 4, motorData, packet);
  1062  000240  0E91               	movlw	145
  1063  000242  6E15               	movwf	BuildPacket@subCommand,c
  1064  000244  0E04               	movlw	4
  1065  000246  6E16               	movwf	BuildPacket@dataLength,c
  1066  000248  0E3C               	movlw	low main@motorData
  1067  00024A  6E17               	movwf	BuildPacket@ptrData,c
  1068  00024C  0E00               	movlw	high main@motorData
  1069  00024E  6E18               	movwf	BuildPacket@ptrData+1,c
  1070  000250  0EC0               	movlw	low _packet
  1071  000252  6E19               	movwf	BuildPacket@ptrPacket,c
  1072  000254  0E00               	movlw	high _packet
  1073  000256  6E1A               	movwf	BuildPacket@ptrPacket+1,c
  1074  000258  0E00               	movlw	0
  1075  00025A  ECFB  F001         	call	_BuildPacket
  1076  00025E  6E49               	movwf	main@packetLength,c
  1077                           
  1078                           ;main.c: 149: if (packetLength < 32) for (i = 0; i < packetLength; i++) putch(packet[i])
      +                          ;
  1079  000260  0E20               	movlw	32
  1080  000262  6049               	cpfslt	main@packetLength,c
  1081  000264  D738               	goto	l1609
  1082  000266  0E00               	movlw	0
  1083  000268  6E4A               	movwf	main@i,c
  1084  00026A  D00C               	goto	l1693
  1085  00026C                     l1689:
  1086  00026C  504A               	movf	main@i,w,c
  1087  00026E  0D01               	mullw	1
  1088  000270  0EC0               	movlw	low _packet
  1089  000272  24F3               	addwf	prodl,w,c
  1090  000274  6ED9               	movwf	fsr2l,c
  1091  000276  0E00               	movlw	high _packet
  1092  000278  20F4               	addwfc	prodh,w,c
  1093  00027A  6EDA               	movwf	fsr2h,c
  1094  00027C  50DF               	movf	indf2,w,c
  1095  00027E  EC9C  F003         	call	_putch
  1096  000282  2A4A               	incf	main@i,f,c
  1097  000284                     l1693:
  1098  000284  5049               	movf	main@packetLength,w,c
  1099  000286  5C4A               	subwf	main@i,w,c
  1100  000288  B0D8               	btfsc	status,0,c
  1101  00028A  D725               	goto	l1609
  1102  00028C  D7EF               	goto	l1689
  1103  00028E                     __end_of_main:
  1104                           	opt stack 0
  1105                           tblptru	equ	0xFF8
  1106                           prodh	equ	0xFF4
  1107                           prodl	equ	0xFF3
  1108                           postinc0	equ	0xFEE
  1109                           wreg	equ	0xFE8
  1110                           postdec1	equ	0xFE5
  1111                           fsr1h	equ	0xFE2
  1112                           fsr1l	equ	0xFE1
  1113                           indf2	equ	0xFDF
  1114                           fsr2h	equ	0xFDA
  1115                           fsr2l	equ	0xFD9
  1116                           status	equ	0xFD8
  1117                           
  1118 ;; *************** function _readJoySticks *****************
  1119 ;; Defined at:
  1120 ;;		line 277 in file "../main.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;		None
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  ADspan          8   37[COMRAM] const unsigned short [4]
  1125 ;;  ADoffset        8   29[COMRAM] const unsigned short [4]
  1126 ;;  joyStickRead    2   51[COMRAM] unsigned short 
  1127 ;;  span            2   49[COMRAM] unsigned short 
  1128 ;;  ADrawReading    2   47[COMRAM] short 
  1129 ;;  offset          2   45[COMRAM] unsigned short 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1139 ;;      Params:         0       0       0       0       0       0       0
  1140 ;;      Locals:        24       0       0       0       0       0       0
  1141 ;;      Temps:          2       0       0       0       0       0       0
  1142 ;;      Totals:        26       0       0       0       0       0       0
  1143 ;;Total ram usage:       26 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; Hardware stack levels required when called:    2
  1146 ;; This function calls:
  1147 ;;		_ADconvertAndRead
  1148 ;;		_ADsetChannel
  1149 ;;		___lwdiv
  1150 ;;		___wmul
  1151 ;; This function is called by:
  1152 ;;		_main
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           	psect	text1
  1157  00028E                     __ptext1:
  1158                           	opt stack 0
  1159  00028E                     _readJoySticks:
  1160                           	opt stack 28
  1161                           
  1162                           ;main.c: 278: static unsigned char ADchannel = 0;
  1163                           ;main.c: 279: const unsigned short ADoffset[] = {450, 400, 430, 400};
  1164                           
  1165                           ;incstack = 0
  1166  00028E  0EF7               	movlw	low readJoySticks@F2980
  1167  000290  6EF6               	movwf	tblptrl,c
  1168  000292                     	if	1	;There is more than 1 active tblptr byte
  1169  000292  0E7F               	movlw	high readJoySticks@F2980
  1170  000294  6EF7               	movwf	tblptrh,c
  1171  000296                     	endif
  1172  000296                     	if	0	;There are less than 3 active tblptr bytes
  1173  000296                     	endif
  1174  000296  EE20  F01E         	lfsr	2,readJoySticks@ADoffset
  1175  00029A  0E07               	movlw	7
  1176  00029C                     u770:
  1177  00029C  0009               	tblrd		*+
  1178  00029E  CFF5 FFDE          	movff	tablat,postinc2
  1179  0002A2  06E8               	decf	wreg,f,c
  1180  0002A4  E2FB               	bc	u770
  1181                           
  1182                           ;main.c: 280: const unsigned short ADspan[] = {150, 200, 200, 200};
  1183  0002A6  0EEF               	movlw	low readJoySticks@F2982
  1184  0002A8  6EF6               	movwf	tblptrl,c
  1185  0002AA                     	if	1	;There is more than 1 active tblptr byte
  1186  0002AA  0E7F               	movlw	high readJoySticks@F2982
  1187  0002AC  6EF7               	movwf	tblptrh,c
  1188  0002AE                     	endif
  1189  0002AE                     	if	0	;There are less than 3 active tblptr bytes
  1190  0002AE                     	endif
  1191  0002AE  EE20  F026         	lfsr	2,readJoySticks@ADspan
  1192  0002B2  0E07               	movlw	7
  1193  0002B4                     u780:
  1194  0002B4  0009               	tblrd		*+
  1195  0002B6  CFF5 FFDE          	movff	tablat,postinc2
  1196  0002BA  06E8               	decf	wreg,f,c
  1197  0002BC  E2FB               	bc	u780
  1198                           
  1199                           ;main.c: 281: unsigned short joyStickReading, offset, span;
  1200                           ;main.c: 282: short ADrawReading;
  1201                           ;main.c: 284: ADrawReading = ADconvertAndRead();
  1202  0002BE  EC4F  F003         	call	_ADconvertAndRead	;wreg free
  1203  0002C2  C00F  F030         	movff	?_ADconvertAndRead,readJoySticks@ADrawReading
  1204  0002C6  C010  F031         	movff	?_ADconvertAndRead+1,readJoySticks@ADrawReading+1
  1205                           
  1206                           ;main.c: 286: if (ADchannel == 0 || ADchannel == 2) joyStickReading = 1023 - ADrawReadin
      +                          g;
  1207  0002CA  505C               	movf	readJoySticks@ADchannel,w,c
  1208  0002CC  B4D8               	btfsc	status,2,c
  1209  0002CE  D004               	goto	l1517
  1210  0002D0  0E02               	movlw	2
  1211  0002D2  185C               	xorwf	readJoySticks@ADchannel,w,c
  1212  0002D4  A4D8               	btfss	status,2,c
  1213  0002D6  D00F               	goto	l136
  1214  0002D8                     l1517:
  1215  0002D8  C030  F01C         	movff	readJoySticks@ADrawReading,??_readJoySticks
  1216  0002DC  C031  F01D         	movff	readJoySticks@ADrawReading+1,??_readJoySticks+1
  1217  0002E0  1E1C               	comf	??_readJoySticks,f,c
  1218  0002E2  1E1D               	comf	??_readJoySticks+1,f,c
  1219  0002E4  4A1C               	infsnz	??_readJoySticks,f,c
  1220  0002E6  2A1D               	incf	??_readJoySticks+1,f,c
  1221  0002E8  0EFF               	movlw	255
  1222  0002EA  241C               	addwf	??_readJoySticks,w,c
  1223  0002EC  6E34               	movwf	readJoySticks@joyStickReading,c
  1224  0002EE  0E03               	movlw	3
  1225  0002F0  201D               	addwfc	??_readJoySticks+1,w,c
  1226  0002F2  6E35               	movwf	readJoySticks@joyStickReading+1,c
  1227  0002F4  D004               	goto	l1519
  1228  0002F6                     l136:
  1229                           
  1230                           ;main.c: 287: else joyStickReading = ADrawReading;
  1231  0002F6  C030  F034         	movff	readJoySticks@ADrawReading,readJoySticks@joyStickReading
  1232  0002FA  C031  F035         	movff	readJoySticks@ADrawReading+1,readJoySticks@joyStickReading+1
  1233  0002FE                     l1519:
  1234                           
  1235                           ;main.c: 289: offset = ADoffset[ADchannel];
  1236  0002FE  505C               	movf	readJoySticks@ADchannel,w,c
  1237  000300  0D02               	mullw	2
  1238  000302  0E1E               	movlw	low readJoySticks@ADoffset
  1239  000304  24F3               	addwf	prodl,w,c
  1240  000306  6ED9               	movwf	fsr2l,c
  1241  000308  0E00               	movlw	high readJoySticks@ADoffset
  1242  00030A  20F4               	addwfc	prodh,w,c
  1243  00030C  6EDA               	movwf	fsr2h,c
  1244  00030E  CFDE F02E          	movff	postinc2,readJoySticks@offset
  1245  000312  CFDD F02F          	movff	postdec2,readJoySticks@offset+1
  1246                           
  1247                           ;main.c: 290: span = ADspan[ADchannel];
  1248  000316  505C               	movf	readJoySticks@ADchannel,w,c
  1249  000318  0D02               	mullw	2
  1250  00031A  0E26               	movlw	low readJoySticks@ADspan
  1251  00031C  24F3               	addwf	prodl,w,c
  1252  00031E  6ED9               	movwf	fsr2l,c
  1253  000320  0E00               	movlw	high readJoySticks@ADspan
  1254  000322  20F4               	addwfc	prodh,w,c
  1255  000324  6EDA               	movwf	fsr2h,c
  1256  000326  CFDE F032          	movff	postinc2,readJoySticks@span
  1257  00032A  CFDD F033          	movff	postdec2,readJoySticks@span+1
  1258                           
  1259                           ;main.c: 291: if (joyStickReading < offset) joyStickReading = 0;
  1260  00032E  502E               	movf	readJoySticks@offset,w,c
  1261  000330  5C34               	subwf	readJoySticks@joyStickReading,w,c
  1262  000332  502F               	movf	readJoySticks@offset+1,w,c
  1263  000334  5835               	subwfb	readJoySticks@joyStickReading+1,w,c
  1264  000336  B0D8               	btfsc	status,0,c
  1265  000338  D005               	goto	l1525
  1266  00033A  0E00               	movlw	0
  1267  00033C  6E35               	movwf	readJoySticks@joyStickReading+1,c
  1268  00033E  0E00               	movlw	0
  1269  000340  6E34               	movwf	readJoySticks@joyStickReading,c
  1270  000342  D00E               	goto	l141
  1271  000344                     l1525:
  1272                           
  1273                           ;main.c: 292: else joyStickReading = joyStickReading - offset;
  1274  000344  C02E  F01C         	movff	readJoySticks@offset,??_readJoySticks
  1275  000348  C02F  F01D         	movff	readJoySticks@offset+1,??_readJoySticks+1
  1276  00034C  1E1C               	comf	??_readJoySticks,f,c
  1277  00034E  1E1D               	comf	??_readJoySticks+1,f,c
  1278  000350  4A1C               	infsnz	??_readJoySticks,f,c
  1279  000352  2A1D               	incf	??_readJoySticks+1,f,c
  1280  000354  5034               	movf	readJoySticks@joyStickReading,w,c
  1281  000356  241C               	addwf	??_readJoySticks,w,c
  1282  000358  6E34               	movwf	readJoySticks@joyStickReading,c
  1283  00035A  5035               	movf	readJoySticks@joyStickReading+1,w,c
  1284  00035C  201D               	addwfc	??_readJoySticks+1,w,c
  1285  00035E  6E35               	movwf	readJoySticks@joyStickReading+1,c
  1286  000360                     l141:
  1287                           
  1288                           ;main.c: 293: if (joyStickReading > span) joyStickReading = span;
  1289  000360  5034               	movf	readJoySticks@joyStickReading,w,c
  1290  000362  5C32               	subwf	readJoySticks@span,w,c
  1291  000364  5035               	movf	readJoySticks@joyStickReading+1,w,c
  1292  000366  5833               	subwfb	readJoySticks@span+1,w,c
  1293  000368  B0D8               	btfsc	status,0,c
  1294  00036A  D004               	goto	l1529
  1295  00036C  C032  F034         	movff	readJoySticks@span,readJoySticks@joyStickReading
  1296  000370  C033  F035         	movff	readJoySticks@span+1,readJoySticks@joyStickReading+1
  1297  000374                     l1529:
  1298                           
  1299                           ;main.c: 295: ADresult[ADchannel] = (joyStickReading * 255) / span;
  1300  000374  C034  F00F         	movff	readJoySticks@joyStickReading,___wmul@multiplier
  1301  000378  C035  F010         	movff	readJoySticks@joyStickReading+1,___wmul@multiplier+1
  1302  00037C  0E00               	movlw	0
  1303  00037E  6E12               	movwf	___wmul@multiplicand+1,c
  1304  000380  6811               	setf	___wmul@multiplicand,c
  1305  000382  EC7F  F003         	call	___wmul	;wreg free
  1306  000386  C00F  F015         	movff	?___wmul,___lwdiv@dividend
  1307  00038A  C010  F016         	movff	?___wmul+1,___lwdiv@dividend+1
  1308  00038E  C032  F017         	movff	readJoySticks@span,___lwdiv@divisor
  1309  000392  C033  F018         	movff	readJoySticks@span+1,___lwdiv@divisor+1
  1310  000396  EC03  F003         	call	___lwdiv	;wreg free
  1311  00039A  505C               	movf	readJoySticks@ADchannel,w,c
  1312  00039C  0D02               	mullw	2
  1313  00039E  0E52               	movlw	low _ADresult
  1314  0003A0  24F3               	addwf	prodl,w,c
  1315  0003A2  6ED9               	movwf	fsr2l,c
  1316  0003A4  0E00               	movlw	high _ADresult
  1317  0003A6  20F4               	addwfc	prodh,w,c
  1318  0003A8  6EDA               	movwf	fsr2h,c
  1319  0003AA  C015  FFDE         	movff	?___lwdiv,postinc2
  1320  0003AE  C016  FFDD         	movff	?___lwdiv+1,postdec2
  1321                           
  1322                           ;main.c: 296: if (ADresult[ADchannel] > 255) ADresult[ADchannel] = 255;
  1323  0003B2  505C               	movf	readJoySticks@ADchannel,w,c
  1324  0003B4  0D02               	mullw	2
  1325  0003B6  0E52               	movlw	low _ADresult
  1326  0003B8  24F3               	addwf	prodl,w,c
  1327  0003BA  6ED9               	movwf	fsr2l,c
  1328  0003BC  0E00               	movlw	high _ADresult
  1329  0003BE  20F4               	addwfc	prodh,w,c
  1330  0003C0  6EDA               	movwf	fsr2h,c
  1331  0003C2  52DE               	movf	postinc2,f,c
  1332  0003C4  04DE               	decf	postinc2,w,c
  1333  0003C6  A0D8               	btfss	status,0,c
  1334  0003C8  D00C               	goto	l1535
  1335  0003CA  505C               	movf	readJoySticks@ADchannel,w,c
  1336  0003CC  0D02               	mullw	2
  1337  0003CE  0E52               	movlw	low _ADresult
  1338  0003D0  24F3               	addwf	prodl,w,c
  1339  0003D2  6ED9               	movwf	fsr2l,c
  1340  0003D4  0E00               	movlw	high _ADresult
  1341  0003D6  20F4               	addwfc	prodh,w,c
  1342  0003D8  6EDA               	movwf	fsr2h,c
  1343  0003DA  0EFF               	movlw	255
  1344  0003DC  6EDE               	movwf	postinc2,c
  1345  0003DE  0E00               	movlw	0
  1346  0003E0  6EDD               	movwf	postdec2,c
  1347  0003E2                     l1535:
  1348                           
  1349                           ;main.c: 298: ADchannel++;
  1350  0003E2  2A5C               	incf	readJoySticks@ADchannel,f,c
  1351                           
  1352                           ;main.c: 299: if (ADchannel >= 4) ADchannel = 0;
  1353  0003E4  0E03               	movlw	3
  1354  0003E6  645C               	cpfsgt	readJoySticks@ADchannel,c
  1355  0003E8  D002               	goto	l1541
  1356  0003EA  0E00               	movlw	0
  1357  0003EC  6E5C               	movwf	readJoySticks@ADchannel,c
  1358  0003EE                     l1541:
  1359                           
  1360                           ;main.c: 300: ADsetChannel(ADchannel);
  1361  0003EE  505C               	movf	readJoySticks@ADchannel,w,c
  1362  0003F0  EC92  F003         	call	_ADsetChannel
  1363  0003F4  0012               	return		;funcret
  1364  0003F6                     __end_of_readJoySticks:
  1365                           	opt stack 0
  1366                           tblptru	equ	0xFF8
  1367                           tblptrh	equ	0xFF7
  1368                           tblptrl	equ	0xFF6
  1369                           tablat	equ	0xFF5
  1370                           prodh	equ	0xFF4
  1371                           prodl	equ	0xFF3
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1h	equ	0xFE2
  1376                           fsr1l	equ	0xFE1
  1377                           indf2	equ	0xFDF
  1378                           postinc2	equ	0xFDE
  1379                           postdec2	equ	0xFDD
  1380                           fsr2h	equ	0xFDA
  1381                           fsr2l	equ	0xFD9
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function ___wmul *****************
  1385 ;; Defined at:
  1386 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  multiplier      2   14[COMRAM] unsigned int 
  1389 ;;  multiplicand    2   16[COMRAM] unsigned int 
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  product         2   18[COMRAM] unsigned int 
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  2   14[COMRAM] unsigned int 
  1394 ;; Registers used:
  1395 ;;		wreg, status,2, status,0, prodl, prodh
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1401 ;;      Params:         4       0       0       0       0       0       0
  1402 ;;      Locals:         2       0       0       0       0       0       0
  1403 ;;      Temps:          0       0       0       0       0       0       0
  1404 ;;      Totals:         6       0       0       0       0       0       0
  1405 ;;Total ram usage:        6 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    1
  1408 ;; This function calls:
  1409 ;;		Nothing
  1410 ;; This function is called by:
  1411 ;;		_readJoySticks
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text2
  1416  0006FE                     __ptext2:
  1417                           	opt stack 0
  1418  0006FE                     ___wmul:
  1419                           	opt stack 28
  1420                           
  1421                           ;incstack = 0
  1422  0006FE  500F               	movf	___wmul@multiplier,w,c
  1423  000700  0211               	mulwf	___wmul@multiplicand,c
  1424  000702  CFF3 F013          	movff	prodl,___wmul@product
  1425  000706  CFF4 F014          	movff	prodh,___wmul@product+1
  1426  00070A  500F               	movf	___wmul@multiplier,w,c
  1427  00070C  0212               	mulwf	___wmul@multiplicand+1,c
  1428  00070E  50F3               	movf	prodl,w,c
  1429  000710  2614               	addwf	___wmul@product+1,f,c
  1430  000712  5010               	movf	___wmul@multiplier+1,w,c
  1431  000714  0211               	mulwf	___wmul@multiplicand,c
  1432  000716  50F3               	movf	prodl,w,c
  1433  000718  2614               	addwf	___wmul@product+1,f,c
  1434  00071A  C013  F00F         	movff	___wmul@product,?___wmul
  1435  00071E  C014  F010         	movff	___wmul@product+1,?___wmul+1
  1436  000722  0012               	return	
  1437  000724                     __end_of___wmul:
  1438                           	opt stack 0
  1439                           tblptru	equ	0xFF8
  1440                           tblptrh	equ	0xFF7
  1441                           tblptrl	equ	0xFF6
  1442                           tablat	equ	0xFF5
  1443                           prodh	equ	0xFF4
  1444                           prodl	equ	0xFF3
  1445                           postinc0	equ	0xFEE
  1446                           wreg	equ	0xFE8
  1447                           postdec1	equ	0xFE5
  1448                           fsr1h	equ	0xFE2
  1449                           fsr1l	equ	0xFE1
  1450                           indf2	equ	0xFDF
  1451                           postinc2	equ	0xFDE
  1452                           postdec2	equ	0xFDD
  1453                           fsr2h	equ	0xFDA
  1454                           fsr2l	equ	0xFD9
  1455                           status	equ	0xFD8
  1456                           
  1457 ;; *************** function ___lwdiv *****************
  1458 ;; Defined at:
  1459 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  dividend        2   20[COMRAM] unsigned int 
  1462 ;;  divisor         2   22[COMRAM] unsigned int 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  quotient        2   24[COMRAM] unsigned int 
  1465 ;;  counter         1   26[COMRAM] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  2   20[COMRAM] unsigned int 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2, status,0
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1475 ;;      Params:         4       0       0       0       0       0       0
  1476 ;;      Locals:         3       0       0       0       0       0       0
  1477 ;;      Temps:          0       0       0       0       0       0       0
  1478 ;;      Totals:         7       0       0       0       0       0       0
  1479 ;;Total ram usage:        7 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    1
  1482 ;; This function calls:
  1483 ;;		Nothing
  1484 ;; This function is called by:
  1485 ;;		_readJoySticks
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text3
  1490  000606                     __ptext3:
  1491                           	opt stack 0
  1492  000606                     ___lwdiv:
  1493                           	opt stack 28
  1494                           
  1495                           ;incstack = 0
  1496  000606  0E00               	movlw	0
  1497  000608  6E1A               	movwf	___lwdiv@quotient+1,c
  1498  00060A  0E00               	movlw	0
  1499  00060C  6E19               	movwf	___lwdiv@quotient,c
  1500  00060E  5017               	movf	___lwdiv@divisor,w,c
  1501  000610  1018               	iorwf	___lwdiv@divisor+1,w,c
  1502  000612  B4D8               	btfsc	status,2,c
  1503  000614  D01C               	goto	l636
  1504  000616  0E01               	movlw	1
  1505  000618  6E1B               	movwf	___lwdiv@counter,c
  1506  00061A  D004               	goto	l1397
  1507  00061C                     l1395:
  1508  00061C  90D8               	bcf	status,0,c
  1509  00061E  3617               	rlcf	___lwdiv@divisor,f,c
  1510  000620  3618               	rlcf	___lwdiv@divisor+1,f,c
  1511  000622  2A1B               	incf	___lwdiv@counter,f,c
  1512  000624                     l1397:
  1513  000624  AE18               	btfss	___lwdiv@divisor+1,7,c
  1514  000626  D7FA               	goto	l1395
  1515  000628                     l1399:
  1516  000628  90D8               	bcf	status,0,c
  1517  00062A  3619               	rlcf	___lwdiv@quotient,f,c
  1518  00062C  361A               	rlcf	___lwdiv@quotient+1,f,c
  1519  00062E  5017               	movf	___lwdiv@divisor,w,c
  1520  000630  5C15               	subwf	___lwdiv@dividend,w,c
  1521  000632  5018               	movf	___lwdiv@divisor+1,w,c
  1522  000634  5816               	subwfb	___lwdiv@dividend+1,w,c
  1523  000636  A0D8               	btfss	status,0,c
  1524  000638  D005               	goto	l1407
  1525  00063A  5017               	movf	___lwdiv@divisor,w,c
  1526  00063C  5E15               	subwf	___lwdiv@dividend,f,c
  1527  00063E  5018               	movf	___lwdiv@divisor+1,w,c
  1528  000640  5A16               	subwfb	___lwdiv@dividend+1,f,c
  1529  000642  8019               	bsf	___lwdiv@quotient,0,c
  1530  000644                     l1407:
  1531  000644  90D8               	bcf	status,0,c
  1532  000646  3218               	rrcf	___lwdiv@divisor+1,f,c
  1533  000648  3217               	rrcf	___lwdiv@divisor,f,c
  1534  00064A  2E1B               	decfsz	___lwdiv@counter,f,c
  1535  00064C  D7ED               	goto	l1399
  1536  00064E                     l636:
  1537  00064E  C019  F015         	movff	___lwdiv@quotient,?___lwdiv
  1538  000652  C01A  F016         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1539  000656  0012               	return		;funcret
  1540  000658                     __end_of___lwdiv:
  1541                           	opt stack 0
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           prodh	equ	0xFF4
  1547                           prodl	equ	0xFF3
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           postdec1	equ	0xFE5
  1551                           fsr1h	equ	0xFE2
  1552                           fsr1l	equ	0xFE1
  1553                           indf2	equ	0xFDF
  1554                           postinc2	equ	0xFDE
  1555                           postdec2	equ	0xFDD
  1556                           fsr2h	equ	0xFDA
  1557                           fsr2l	equ	0xFD9
  1558                           status	equ	0xFD8
  1559                           
  1560 ;; *************** function _ADsetChannel *****************
  1561 ;; Defined at:
  1562 ;;		line 262 in file "../main.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  channel         1    wreg     unsigned char 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  channel         1   15[COMRAM] unsigned char 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1576 ;;      Params:         0       0       0       0       0       0       0
  1577 ;;      Locals:         1       0       0       0       0       0       0
  1578 ;;      Temps:          1       0       0       0       0       0       0
  1579 ;;      Totals:         2       0       0       0       0       0       0
  1580 ;;Total ram usage:        2 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    1
  1583 ;; This function calls:
  1584 ;;		Nothing
  1585 ;; This function is called by:
  1586 ;;		_readJoySticks
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text4
  1591  000724                     __ptext4:
  1592                           	opt stack 0
  1593  000724                     _ADsetChannel:
  1594                           	opt stack 28
  1595                           
  1596                           ;incstack = 0
  1597                           ;ADsetChannel@channel stored from wreg
  1598  000724  6E10               	movwf	ADsetChannel@channel,c
  1599                           
  1600                           ;main.c: 263: ADCON0 = (channel << 2) + 0x01;
  1601  000726  C010  F00F         	movff	ADsetChannel@channel,??_ADsetChannel
  1602  00072A  90D8               	bcf	status,0,c
  1603  00072C  360F               	rlcf	??_ADsetChannel,f,c
  1604  00072E  90D8               	bcf	status,0,c
  1605  000730  360F               	rlcf	??_ADsetChannel,f,c
  1606  000732  280F               	incf	??_ADsetChannel,w,c
  1607  000734  6EC2               	movwf	4034,c	;volatile
  1608  000736  0012               	return		;funcret
  1609  000738                     __end_of_ADsetChannel:
  1610                           	opt stack 0
  1611                           tblptru	equ	0xFF8
  1612                           tblptrh	equ	0xFF7
  1613                           tblptrl	equ	0xFF6
  1614                           tablat	equ	0xFF5
  1615                           prodh	equ	0xFF4
  1616                           prodl	equ	0xFF3
  1617                           postinc0	equ	0xFEE
  1618                           wreg	equ	0xFE8
  1619                           postdec1	equ	0xFE5
  1620                           fsr1h	equ	0xFE2
  1621                           fsr1l	equ	0xFE1
  1622                           indf2	equ	0xFDF
  1623                           postinc2	equ	0xFDE
  1624                           postdec2	equ	0xFDD
  1625                           fsr2h	equ	0xFDA
  1626                           fsr2l	equ	0xFD9
  1627                           status	equ	0xFD8
  1628                           
  1629 ;; *************** function _ADconvertAndRead *****************
  1630 ;; Defined at:
  1631 ;;		line 266 in file "../main.c"
  1632 ;; Parameters:    Size  Location     Type
  1633 ;;		None
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  highByte        2   20[COMRAM] unsigned short 
  1636 ;;  ADvalue         2   18[COMRAM] short 
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  2   14[COMRAM] short 
  1639 ;; Registers used:
  1640 ;;		wreg, status,2, status,0
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1646 ;;      Params:         2       0       0       0       0       0       0
  1647 ;;      Locals:         4       0       0       0       0       0       0
  1648 ;;      Temps:          2       0       0       0       0       0       0
  1649 ;;      Totals:         8       0       0       0       0       0       0
  1650 ;;Total ram usage:        8 bytes
  1651 ;; Hardware stack levels used:    1
  1652 ;; Hardware stack levels required when called:    1
  1653 ;; This function calls:
  1654 ;;		Nothing
  1655 ;; This function is called by:
  1656 ;;		_readJoySticks
  1657 ;; This function uses a non-reentrant model
  1658 ;;
  1659                           
  1660                           	psect	text5
  1661  00069E                     __ptext5:
  1662                           	opt stack 0
  1663  00069E                     _ADconvertAndRead:
  1664                           	opt stack 28
  1665                           
  1666                           ;main.c: 267: unsigned short highByte;
  1667                           ;main.c: 268: short ADvalue;
  1668                           ;main.c: 269: ADCON0bits.GO_DONE = 1;
  1669                           
  1670                           ;incstack = 0
  1671  00069E  82C2               	bsf	4034,1,c	;volatile
  1672  0006A0                     l124:
  1673  0006A0  B2C2               	btfsc	4034,1,c	;volatile
  1674  0006A2  D7FE               	goto	l124
  1675                           
  1676                           ;main.c: 271: highByte = (unsigned short) ADRESH;
  1677  0006A4  CFC4 F015          	movff	4036,ADconvertAndRead@highByte	;volatile
  1678  0006A8  6A16               	clrf	ADconvertAndRead@highByte+1,c
  1679                           
  1680                           ;main.c: 272: highByte = (highByte << 8) & 0b001100000000;
  1681  0006AA  5015               	movf	ADconvertAndRead@highByte,w,c
  1682  0006AC  6E12               	movwf	(??_ADconvertAndRead+1)& (0+255),c
  1683  0006AE  6A11               	clrf	??_ADconvertAndRead& (0+255),c
  1684  0006B0  0E00               	movlw	0
  1685  0006B2  1411               	andwf	??_ADconvertAndRead,w,c
  1686  0006B4  6E15               	movwf	ADconvertAndRead@highByte,c
  1687  0006B6  0E03               	movlw	3
  1688  0006B8  1412               	andwf	??_ADconvertAndRead+1,w,c
  1689  0006BA  6E16               	movwf	ADconvertAndRead@highByte+1,c
  1690                           
  1691                           ;main.c: 273: ADvalue = (short) (highByte | ADRESL);
  1692  0006BC  5015               	movf	ADconvertAndRead@highByte,w,c
  1693  0006BE  10C3               	iorwf	4035,w,c	;volatile
  1694  0006C0  6E13               	movwf	ADconvertAndRead@ADvalue,c
  1695  0006C2  5016               	movf	ADconvertAndRead@highByte+1,w,c
  1696  0006C4  6E14               	movwf	ADconvertAndRead@ADvalue+1,c
  1697                           
  1698                           ;main.c: 274: return (ADvalue);
  1699  0006C6  C013  F00F         	movff	ADconvertAndRead@ADvalue,?_ADconvertAndRead
  1700  0006CA  C014  F010         	movff	ADconvertAndRead@ADvalue+1,?_ADconvertAndRead+1
  1701  0006CE  0012               	return	
  1702  0006D0                     __end_of_ADconvertAndRead:
  1703                           	opt stack 0
  1704                           tblptru	equ	0xFF8
  1705                           tblptrh	equ	0xFF7
  1706                           tblptrl	equ	0xFF6
  1707                           tablat	equ	0xFF5
  1708                           prodh	equ	0xFF4
  1709                           prodl	equ	0xFF3
  1710                           postinc0	equ	0xFEE
  1711                           wreg	equ	0xFE8
  1712                           postdec1	equ	0xFE5
  1713                           fsr1h	equ	0xFE2
  1714                           fsr1l	equ	0xFE1
  1715                           indf2	equ	0xFDF
  1716                           postinc2	equ	0xFDE
  1717                           postdec2	equ	0xFDD
  1718                           fsr2h	equ	0xFDA
  1719                           fsr2l	equ	0xFD9
  1720                           status	equ	0xFD8
  1721                           
  1722 ;; *************** function _putch *****************
  1723 ;; Defined at:
  1724 ;;		line 254 in file "../main.c"
  1725 ;; Parameters:    Size  Location     Type
  1726 ;;  TxByte          1    wreg     unsigned char 
  1727 ;; Auto vars:     Size  Location     Type
  1728 ;;  TxByte          1   14[COMRAM] unsigned char 
  1729 ;; Return value:  Size  Location     Type
  1730 ;;                  1    wreg      void 
  1731 ;; Registers used:
  1732 ;;		wreg
  1733 ;; Tracked objects:
  1734 ;;		On entry : 0/0
  1735 ;;		On exit  : 0/0
  1736 ;;		Unchanged: 0/0
  1737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1738 ;;      Params:         0       0       0       0       0       0       0
  1739 ;;      Locals:         1       0       0       0       0       0       0
  1740 ;;      Temps:          0       0       0       0       0       0       0
  1741 ;;      Totals:         1       0       0       0       0       0       0
  1742 ;;Total ram usage:        1 bytes
  1743 ;; Hardware stack levels used:    1
  1744 ;; Hardware stack levels required when called:    1
  1745 ;; This function calls:
  1746 ;;		Nothing
  1747 ;; This function is called by:
  1748 ;;		_main
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text6
  1753  000738                     __ptext6:
  1754                           	opt stack 0
  1755  000738                     _putch:
  1756                           	opt stack 29
  1757                           
  1758                           ;incstack = 0
  1759                           ;putch@TxByte stored from wreg
  1760  000738  6E0F               	movwf	putch@TxByte,c
  1761  00073A                     l115:
  1762  00073A  A89E               	btfss	3998,4,c	;volatile
  1763  00073C  D7FE               	goto	l115
  1764                           
  1765                           ;main.c: 256: TXREG = TxByte;
  1766  00073E  C00F  FFAD         	movff	putch@TxByte,4013	;volatile
  1767  000742  0012               	return	
  1768  000744                     __end_of_putch:
  1769                           	opt stack 0
  1770                           tblptru	equ	0xFF8
  1771                           tblptrh	equ	0xFF7
  1772                           tblptrl	equ	0xFF6
  1773                           tablat	equ	0xFF5
  1774                           prodh	equ	0xFF4
  1775                           prodl	equ	0xFF3
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           postdec1	equ	0xFE5
  1779                           fsr1h	equ	0xFE2
  1780                           fsr1l	equ	0xFE1
  1781                           indf2	equ	0xFDF
  1782                           postinc2	equ	0xFDE
  1783                           postdec2	equ	0xFDD
  1784                           fsr2h	equ	0xFDA
  1785                           fsr2l	equ	0xFD9
  1786                           status	equ	0xFD8
  1787                           
  1788 ;; *************** function _init *****************
  1789 ;; Defined at:
  1790 ;;		line 154 in file "../main.c"
  1791 ;; Parameters:    Size  Location     Type
  1792 ;;		None
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;		None
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  1    wreg      void 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1804 ;;      Params:         0       0       0       0       0       0       0
  1805 ;;      Locals:         0       0       0       0       0       0       0
  1806 ;;      Temps:          0       0       0       0       0       0       0
  1807 ;;      Totals:         0       0       0       0       0       0       0
  1808 ;;Total ram usage:        0 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    1
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_main
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text7
  1819  000588                     __ptext7:
  1820                           	opt stack 0
  1821  000588                     _init:
  1822                           	opt stack 29
  1823                           
  1824                           ;main.c: 155: INTCONbits.GIE = 0;
  1825                           
  1826                           ;incstack = 0
  1827  000588  9EF2               	bcf	intcon,7,c	;volatile
  1828                           
  1829                           ;main.c: 158: ADCON0 = 0b00000000;
  1830  00058A  0E00               	movlw	0
  1831  00058C  6EC2               	movwf	4034,c	;volatile
  1832                           
  1833                           ;main.c: 161: ADCON1bits.VCFG0 = 0;
  1834  00058E  98C1               	bcf	4033,4,c	;volatile
  1835                           
  1836                           ;main.c: 162: ADCON1bits.VCFG1 = 0;
  1837  000590  9AC1               	bcf	4033,5,c	;volatile
  1838                           
  1839                           ;main.c: 163: ADCON1bits.PCFG3 = 1;
  1840  000592  86C1               	bsf	4033,3,c	;volatile
  1841                           
  1842                           ;main.c: 164: ADCON1bits.PCFG2 = 0;
  1843  000594  94C1               	bcf	4033,2,c	;volatile
  1844                           
  1845                           ;main.c: 165: ADCON1bits.PCFG1 = 1;
  1846  000596  82C1               	bsf	4033,1,c	;volatile
  1847                           
  1848                           ;main.c: 166: ADCON1bits.PCFG0 = 1;
  1849  000598  80C1               	bsf	4033,0,c	;volatile
  1850                           
  1851                           ;main.c: 168: ADCON2 = 0;
  1852  00059A  0E00               	movlw	0
  1853  00059C  6EC0               	movwf	4032,c	;volatile
  1854                           
  1855                           ;main.c: 169: ADCON2bits.ADFM = 1;
  1856  00059E  8EC0               	bsf	4032,7,c	;volatile
  1857                           
  1858                           ;main.c: 171: ADCON2bits.ACQT2 = 1;
  1859  0005A0  8AC0               	bsf	4032,5,c	;volatile
  1860                           
  1861                           ;main.c: 172: ADCON2bits.ACQT1 = 1;
  1862  0005A2  88C0               	bsf	4032,4,c	;volatile
  1863                           
  1864                           ;main.c: 173: ADCON2bits.ACQT0 = 1;
  1865  0005A4  86C0               	bsf	4032,3,c	;volatile
  1866                           
  1867                           ;main.c: 175: ADCON2bits.ADCS2 = 1;
  1868  0005A6  84C0               	bsf	4032,2,c	;volatile
  1869                           
  1870                           ;main.c: 176: ADCON2bits.ADCS1 = 1;
  1871  0005A8  82C0               	bsf	4032,1,c	;volatile
  1872                           
  1873                           ;main.c: 177: ADCON2bits.ADCS0 = 1;
  1874  0005AA  80C0               	bsf	4032,0,c	;volatile
  1875                           
  1876                           ;main.c: 178: TRISA = 0b11011111;
  1877  0005AC  0EDF               	movlw	223
  1878  0005AE  6E92               	movwf	3986,c	;volatile
  1879                           
  1880                           ;main.c: 179: PORTAbits.RA5 = 1;
  1881  0005B0  8A80               	bsf	3968,5,c	;volatile
  1882                           
  1883                           ;main.c: 182: TRISB = 0b11111000;
  1884  0005B2  0EF8               	movlw	248
  1885  0005B4  6E93               	movwf	3987,c	;volatile
  1886                           
  1887                           ;main.c: 183: INTCON2bits.RBPU = 0;
  1888  0005B6  9EF1               	bcf	intcon2,7,c	;volatile
  1889                           
  1890                           ;main.c: 184: TRISC = 0b10111111;
  1891  0005B8  0EBF               	movlw	191
  1892  0005BA  6E94               	movwf	3988,c	;volatile
  1893                           
  1894                           ;main.c: 187: TXSTAbits.BRGH = 1;
  1895  0005BC  84AC               	bsf	4012,2,c	;volatile
  1896                           
  1897                           ;main.c: 188: SPBRG = 19;
  1898  0005BE  0E13               	movlw	19
  1899  0005C0  6EAF               	movwf	4015,c	;volatile
  1900                           
  1901                           ;main.c: 189: TXSTAbits.SYNC = 0;
  1902  0005C2  98AC               	bcf	4012,4,c	;volatile
  1903                           
  1904                           ;main.c: 190: RCSTAbits.SPEN = 1;
  1905  0005C4  8EAB               	bsf	4011,7,c	;volatile
  1906                           
  1907                           ;main.c: 191: RCSTAbits.CREN = 1;
  1908  0005C6  88AB               	bsf	4011,4,c	;volatile
  1909                           
  1910                           ;main.c: 192: RCSTAbits.SREN = 0;
  1911  0005C8  9AAB               	bcf	4011,5,c	;volatile
  1912                           
  1913                           ;main.c: 193: PIE1bits.TXIE = 0;
  1914  0005CA  989D               	bcf	3997,4,c	;volatile
  1915                           
  1916                           ;main.c: 194: PIE1bits.RCIE = 0;
  1917  0005CC  9A9D               	bcf	3997,5,c	;volatile
  1918                           
  1919                           ;main.c: 195: TXSTAbits.TX9 = 0;
  1920  0005CE  9CAC               	bcf	4012,6,c	;volatile
  1921                           
  1922                           ;main.c: 196: RCSTAbits.RX9 = 0;
  1923  0005D0  9CAB               	bcf	4011,6,c	;volatile
  1924                           
  1925                           ;main.c: 197: TXSTAbits.TXEN = 1;
  1926  0005D2  8AAC               	bsf	4012,5,c	;volatile
  1927                           
  1928                           ;main.c: 198: BAUDCONbits.TXCKP = 0;
  1929  0005D4  98B8               	bcf	4024,4,c	;volatile
  1930                           
  1931                           ;main.c: 199: BAUDCONbits.RXDTP = 0;
  1932  0005D6  9AB8               	bcf	4024,5,c	;volatile
  1933                           
  1934                           ;main.c: 202: PR2 = 72;
  1935  0005D8  0E48               	movlw	72
  1936  0005DA  6ECB               	movwf	4043,c	;volatile
  1937                           
  1938                           ;main.c: 203: T2CON = 0x00;
  1939  0005DC  0E00               	movlw	0
  1940  0005DE  6ECA               	movwf	4042,c	;volatile
  1941                           
  1942                           ;main.c: 204: T2CONbits.T2CKPS1 = 0;
  1943  0005E0  92CA               	bcf	4042,1,c	;volatile
  1944                           
  1945                           ;main.c: 205: T2CONbits.T2CKPS0 = 1;
  1946  0005E2  80CA               	bsf	4042,0,c	;volatile
  1947                           
  1948                           ;main.c: 206: T2CONbits.T2OUTPS3 = 1;
  1949  0005E4  8CCA               	bsf	4042,6,c	;volatile
  1950                           
  1951                           ;main.c: 207: T2CONbits.T2OUTPS2 = 1;
  1952  0005E6  8ACA               	bsf	4042,5,c	;volatile
  1953                           
  1954                           ;main.c: 208: T2CONbits.T2OUTPS1 = 1;
  1955  0005E8  88CA               	bsf	4042,4,c	;volatile
  1956                           
  1957                           ;main.c: 209: T2CONbits.T2OUTPS0 = 1;
  1958  0005EA  86CA               	bsf	4042,3,c	;volatile
  1959                           
  1960                           ;main.c: 210: T2CONbits.TMR2ON = 1;
  1961  0005EC  84CA               	bsf	4042,2,c	;volatile
  1962                           
  1963                           ;main.c: 213: INTCON = 0x00;
  1964  0005EE  0E00               	movlw	0
  1965  0005F0  6EF2               	movwf	intcon,c	;volatile
  1966                           
  1967                           ;main.c: 214: INTCONbits.INT0IE = 0;
  1968  0005F2  98F2               	bcf	intcon,4,c	;volatile
  1969                           
  1970                           ;main.c: 215: INTCONbits.RBIE = 0;
  1971  0005F4  96F2               	bcf	intcon,3,c	;volatile
  1972                           
  1973                           ;main.c: 216: PIE1bits.TMR2IE = 1;
  1974  0005F6  829D               	bsf	3997,1,c	;volatile
  1975                           
  1976                           ;main.c: 217: INTCONbits.PEIE = 1;
  1977  0005F8  8CF2               	bsf	intcon,6,c	;volatile
  1978                           
  1979                           ;main.c: 219: INTCON2 = 0x00;
  1980  0005FA  0E00               	movlw	0
  1981  0005FC  6EF1               	movwf	intcon2,c	;volatile
  1982                           
  1983                           ;main.c: 220: INTCON2bits.RBPU = 0;
  1984  0005FE  9EF1               	bcf	intcon2,7,c	;volatile
  1985                           
  1986                           ;main.c: 221: INTCON2bits.INTEDG0 = 0;
  1987  000600  9CF1               	bcf	intcon2,6,c	;volatile
  1988                           
  1989                           ;main.c: 222: INTCONbits.GIE = 1;
  1990  000602  8EF2               	bsf	intcon,7,c	;volatile
  1991  000604  0012               	return		;funcret
  1992  000606                     __end_of_init:
  1993                           	opt stack 0
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           prodh	equ	0xFF4
  1999                           prodl	equ	0xFF3
  2000                           intcon	equ	0xFF2
  2001                           intcon2	equ	0xFF1
  2002                           postinc0	equ	0xFEE
  2003                           wreg	equ	0xFE8
  2004                           postdec1	equ	0xFE5
  2005                           fsr1h	equ	0xFE2
  2006                           fsr1l	equ	0xFE1
  2007                           indf2	equ	0xFDF
  2008                           postinc2	equ	0xFDE
  2009                           postdec2	equ	0xFDD
  2010                           fsr2h	equ	0xFDA
  2011                           fsr2l	equ	0xFD9
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _DelayMs *****************
  2015 ;; Defined at:
  2016 ;;		line 13 in file "../delay.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  count           2   14[COMRAM] unsigned short 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  downCount       1   17[COMRAM] unsigned char 
  2021 ;;  i               1   16[COMRAM] unsigned char 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  1    wreg      void 
  2024 ;; Registers used:
  2025 ;;		wreg, status,2, status,0
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2031 ;;      Params:         2       0       0       0       0       0       0
  2032 ;;      Locals:         2       0       0       0       0       0       0
  2033 ;;      Temps:          0       0       0       0       0       0       0
  2034 ;;      Totals:         4       0       0       0       0       0       0
  2035 ;;Total ram usage:        4 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    1
  2038 ;; This function calls:
  2039 ;;		Nothing
  2040 ;; This function is called by:
  2041 ;;		_main
  2042 ;; This function uses a non-reentrant model
  2043 ;;
  2044                           
  2045                           	psect	text8
  2046  0006D0                     __ptext8:
  2047                           	opt stack 0
  2048  0006D0                     _DelayMs:
  2049                           	opt stack 29
  2050                           
  2051                           ;delay.c: 14: unsigned char i;
  2052                           ;delay.c: 15: while (count--) {
  2053                           
  2054                           ;incstack = 0
  2055  0006D0  D00D               	goto	l1507
  2056  0006D2                     l1499:
  2057                           
  2058                           ;delay.c: 16: i=100;
  2059  0006D2  0E64               	movlw	100
  2060  0006D4  6E11               	movwf	DelayMs@i,c
  2061                           
  2062                           ;delay.c: 17: while(i--) {
  2063  0006D6  D006               	goto	l1505
  2064  0006D8                     l1501:
  2065                           
  2066                           ;delay.c: 18: { unsigned char downCount; downCount = 4; while(downCount--);};
  2067  0006D8  0E04               	movlw	4
  2068  0006DA  6E12               	movwf	DelayMs@downCount,c
  2069  0006DC                     l1503:
  2070  0006DC  0612               	decf	DelayMs@downCount,f,c
  2071  0006DE  2812               	incf	DelayMs@downCount,w,c
  2072  0006E0  A4D8               	btfss	status,2,c
  2073  0006E2  D7FC               	goto	l1503
  2074  0006E4                     l1505:
  2075  0006E4  0611               	decf	DelayMs@i,f,c
  2076  0006E6  2811               	incf	DelayMs@i,w,c
  2077  0006E8  A4D8               	btfss	status,2,c
  2078  0006EA  D7F6               	goto	l1501
  2079  0006EC                     l1507:
  2080  0006EC  060F               	decf	DelayMs@count,f,c
  2081  0006EE  A0D8               	btfss	status,0,c
  2082  0006F0  0610               	decf	DelayMs@count+1,f,c
  2083  0006F2  280F               	incf	DelayMs@count,w,c
  2084  0006F4  E1EE               	bnz	l1499
  2085  0006F6  2810               	incf	DelayMs@count+1,w,c
  2086  0006F8  B4D8               	btfsc	status,2,c
  2087  0006FA  0012               	return	
  2088  0006FC  D7EA               	goto	l1499
  2089  0006FE                     __end_of_DelayMs:
  2090                           	opt stack 0
  2091                           tblptru	equ	0xFF8
  2092                           tblptrh	equ	0xFF7
  2093                           tblptrl	equ	0xFF6
  2094                           tablat	equ	0xFF5
  2095                           prodh	equ	0xFF4
  2096                           prodl	equ	0xFF3
  2097                           intcon	equ	0xFF2
  2098                           intcon2	equ	0xFF1
  2099                           postinc0	equ	0xFEE
  2100                           wreg	equ	0xFE8
  2101                           postdec1	equ	0xFE5
  2102                           fsr1h	equ	0xFE2
  2103                           fsr1l	equ	0xFE1
  2104                           indf2	equ	0xFDF
  2105                           postinc2	equ	0xFDE
  2106                           postdec2	equ	0xFDD
  2107                           fsr2h	equ	0xFDA
  2108                           fsr2l	equ	0xFD9
  2109                           status	equ	0xFD8
  2110                           
  2111 ;; *************** function _BuildPacket *****************
  2112 ;; Defined at:
  2113 ;;		line 317 in file "../main.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;  command         1    wreg     unsigned char 
  2116 ;;  subCommand      1   20[COMRAM] unsigned char 
  2117 ;;  dataLength      1   21[COMRAM] unsigned char 
  2118 ;;  ptrData         2   22[COMRAM] PTR unsigned char 
  2119 ;;		 -> main@motorData(5), 
  2120 ;;  ptrPacket       2   24[COMRAM] PTR unsigned char 
  2121 ;;		 -> packet(32), 
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;  command         1   26[COMRAM] unsigned char 
  2124 ;;  packetIndex     1   28[COMRAM] unsigned char 
  2125 ;;  i               1   27[COMRAM] unsigned char 
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      unsigned char 
  2128 ;; Registers used:
  2129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2135 ;;      Params:         6       0       0       0       0       0       0
  2136 ;;      Locals:         3       0       0       0       0       0       0
  2137 ;;      Temps:          0       0       0       0       0       0       0
  2138 ;;      Totals:         9       0       0       0       0       0       0
  2139 ;;Total ram usage:        9 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:    2
  2142 ;; This function calls:
  2143 ;;		_insertByte
  2144 ;; This function is called by:
  2145 ;;		_main
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text9
  2150  0003F6                     __ptext9:
  2151                           	opt stack 0
  2152  0003F6                     _BuildPacket:
  2153                           	opt stack 28
  2154                           
  2155                           ;incstack = 0
  2156                           ;BuildPacket@command stored from wreg
  2157  0003F6  6E1B               	movwf	BuildPacket@command,c
  2158                           
  2159                           ;main.c: 319: unsigned char packetIndex = 0, i;
  2160  0003F8  0E00               	movlw	0
  2161  0003FA  6E1D               	movwf	BuildPacket@packetIndex,c
  2162                           
  2163                           ;main.c: 321: if (dataLength <= 32) {
  2164  0003FC  0E21               	movlw	33
  2165  0003FE  6016               	cpfslt	BuildPacket@dataLength,c
  2166  000400  D068               	goto	l1591
  2167                           
  2168                           ;main.c: 322: ptrPacket[packetIndex++] = 36;
  2169  000402  501D               	movf	BuildPacket@packetIndex,w,c
  2170  000404  0D01               	mullw	1
  2171  000406  50F3               	movf	prodl,w,c
  2172  000408  2419               	addwf	BuildPacket@ptrPacket,w,c
  2173  00040A  6ED9               	movwf	fsr2l,c
  2174  00040C  50F4               	movf	prodh,w,c
  2175  00040E  201A               	addwfc	BuildPacket@ptrPacket+1,w,c
  2176  000410  6EDA               	movwf	fsr2h,c
  2177  000412  0E24               	movlw	36
  2178  000414  6EDF               	movwf	indf2,c
  2179  000416  2A1D               	incf	BuildPacket@packetIndex,f,c
  2180                           
  2181                           ;main.c: 324: if (!insertByte(command, ptrPacket, &packetIndex)) return(0);
  2182  000418  C019  F00F         	movff	BuildPacket@ptrPacket,insertByte@ptrBuffer
  2183  00041C  C01A  F010         	movff	BuildPacket@ptrPacket+1,insertByte@ptrBuffer+1
  2184  000420  0E1D               	movlw	low BuildPacket@packetIndex
  2185  000422  6E11               	movwf	insertByte@index,c
  2186  000424  0E00               	movlw	high BuildPacket@packetIndex
  2187  000426  6E12               	movwf	insertByte@index+1,c
  2188  000428  501B               	movf	BuildPacket@command,w,c
  2189  00042A  EC6B  F002         	call	_insertByte
  2190  00042E  0900               	iorlw	0
  2191  000430  A4D8               	btfss	status,2,c
  2192  000432  D002               	goto	l1557
  2193  000434  0E00               	movlw	0
  2194  000436  0012               	return	
  2195  000438                     l1557:
  2196                           
  2197                           ;main.c: 325: if (!insertByte(subCommand, ptrPacket, &packetIndex)) return(0);
  2198  000438  C019  F00F         	movff	BuildPacket@ptrPacket,insertByte@ptrBuffer
  2199  00043C  C01A  F010         	movff	BuildPacket@ptrPacket+1,insertByte@ptrBuffer+1
  2200  000440  0E1D               	movlw	low BuildPacket@packetIndex
  2201  000442  6E11               	movwf	insertByte@index,c
  2202  000444  0E00               	movlw	high BuildPacket@packetIndex
  2203  000446  6E12               	movwf	insertByte@index+1,c
  2204  000448  5015               	movf	BuildPacket@subCommand,w,c
  2205  00044A  EC6B  F002         	call	_insertByte
  2206  00044E  0900               	iorlw	0
  2207  000450  A4D8               	btfss	status,2,c
  2208  000452  D002               	goto	l1563
  2209  000454  0E00               	movlw	0
  2210  000456  0012               	return	
  2211  000458                     l1563:
  2212                           
  2213                           ;main.c: 326: if (!insertByte(dataLength, ptrPacket, &packetIndex)) return(0);
  2214  000458  C019  F00F         	movff	BuildPacket@ptrPacket,insertByte@ptrBuffer
  2215  00045C  C01A  F010         	movff	BuildPacket@ptrPacket+1,insertByte@ptrBuffer+1
  2216  000460  0E1D               	movlw	low BuildPacket@packetIndex
  2217  000462  6E11               	movwf	insertByte@index,c
  2218  000464  0E00               	movlw	high BuildPacket@packetIndex
  2219  000466  6E12               	movwf	insertByte@index+1,c
  2220  000468  5016               	movf	BuildPacket@dataLength,w,c
  2221  00046A  EC6B  F002         	call	_insertByte
  2222  00046E  0900               	iorlw	0
  2223  000470  A4D8               	btfss	status,2,c
  2224  000472  D002               	goto	l1569
  2225  000474  0E00               	movlw	0
  2226  000476  0012               	return	
  2227  000478                     l1569:
  2228                           
  2229                           ;main.c: 328: for (i = 0; i < dataLength; i++){
  2230  000478  0E00               	movlw	0
  2231  00047A  6E1C               	movwf	BuildPacket@i,c
  2232  00047C  D019               	goto	l1579
  2233  00047E                     l1571:
  2234                           
  2235                           ;main.c: 329: if (!insertByte(ptrData[i], ptrPacket, &packetIndex)) return(0);
  2236  00047E  C019  F00F         	movff	BuildPacket@ptrPacket,insertByte@ptrBuffer
  2237  000482  C01A  F010         	movff	BuildPacket@ptrPacket+1,insertByte@ptrBuffer+1
  2238  000486  0E1D               	movlw	low BuildPacket@packetIndex
  2239  000488  6E11               	movwf	insertByte@index,c
  2240  00048A  0E00               	movlw	high BuildPacket@packetIndex
  2241  00048C  6E12               	movwf	insertByte@index+1,c
  2242  00048E  501C               	movf	BuildPacket@i,w,c
  2243  000490  0D01               	mullw	1
  2244  000492  50F3               	movf	prodl,w,c
  2245  000494  2417               	addwf	BuildPacket@ptrData,w,c
  2246  000496  6ED9               	movwf	fsr2l,c
  2247  000498  50F4               	movf	prodh,w,c
  2248  00049A  2018               	addwfc	BuildPacket@ptrData+1,w,c
  2249  00049C  6EDA               	movwf	fsr2h,c
  2250  00049E  50DF               	movf	indf2,w,c
  2251  0004A0  EC6B  F002         	call	_insertByte
  2252  0004A4  0900               	iorlw	0
  2253  0004A6  A4D8               	btfss	status,2,c
  2254  0004A8  D002               	goto	l1577
  2255  0004AA  0E00               	movlw	0
  2256  0004AC  0012               	return	
  2257  0004AE                     l1577:
  2258  0004AE  2A1C               	incf	BuildPacket@i,f,c
  2259  0004B0                     l1579:
  2260  0004B0  5016               	movf	BuildPacket@dataLength,w,c
  2261  0004B2  5C1C               	subwf	BuildPacket@i,w,c
  2262  0004B4  A0D8               	btfss	status,0,c
  2263  0004B6  D7E3               	goto	l1571
  2264                           
  2265                           ;main.c: 330: }
  2266                           ;main.c: 331: ptrPacket[packetIndex++] = 13;
  2267  0004B8  501D               	movf	BuildPacket@packetIndex,w,c
  2268  0004BA  0D01               	mullw	1
  2269  0004BC  50F3               	movf	prodl,w,c
  2270  0004BE  2419               	addwf	BuildPacket@ptrPacket,w,c
  2271  0004C0  6ED9               	movwf	fsr2l,c
  2272  0004C2  50F4               	movf	prodh,w,c
  2273  0004C4  201A               	addwfc	BuildPacket@ptrPacket+1,w,c
  2274  0004C6  6EDA               	movwf	fsr2h,c
  2275  0004C8  0E0D               	movlw	13
  2276  0004CA  6EDF               	movwf	indf2,c
  2277  0004CC  2A1D               	incf	BuildPacket@packetIndex,f,c
  2278                           
  2279                           ;main.c: 333: return (packetIndex);
  2280  0004CE  501D               	movf	BuildPacket@packetIndex,w,c
  2281                           
  2282                           ;main.c: 334: } else return (0);
  2283  0004D0  0012               	return	
  2284  0004D2                     l1591:
  2285  0004D2  0E00               	movlw	0
  2286  0004D4  0012               	return	
  2287  0004D6                     __end_of_BuildPacket:
  2288                           	opt stack 0
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           prodh	equ	0xFF4
  2294                           prodl	equ	0xFF3
  2295                           intcon	equ	0xFF2
  2296                           intcon2	equ	0xFF1
  2297                           postinc0	equ	0xFEE
  2298                           wreg	equ	0xFE8
  2299                           postdec1	equ	0xFE5
  2300                           fsr1h	equ	0xFE2
  2301                           fsr1l	equ	0xFE1
  2302                           indf2	equ	0xFDF
  2303                           postinc2	equ	0xFDE
  2304                           postdec2	equ	0xFDD
  2305                           fsr2h	equ	0xFDA
  2306                           fsr2l	equ	0xFD9
  2307                           status	equ	0xFD8
  2308                           
  2309 ;; *************** function _insertByte *****************
  2310 ;; Defined at:
  2311 ;;		line 304 in file "../main.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;  dataByte        1    wreg     unsigned char 
  2314 ;;  ptrBuffer       2   14[COMRAM] PTR unsigned char 
  2315 ;;		 -> packet(32), 
  2316 ;;  index           2   16[COMRAM] PTR unsigned char 
  2317 ;;		 -> BuildPacket@packetIndex(1), 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;  dataByte        1   19[COMRAM] unsigned char 
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  1    wreg      unsigned char 
  2322 ;; Registers used:
  2323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2329 ;;      Params:         4       0       0       0       0       0       0
  2330 ;;      Locals:         1       0       0       0       0       0       0
  2331 ;;      Temps:          1       0       0       0       0       0       0
  2332 ;;      Totals:         6       0       0       0       0       0       0
  2333 ;;Total ram usage:        6 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:    1
  2336 ;; This function calls:
  2337 ;;		Nothing
  2338 ;; This function is called by:
  2339 ;;		_BuildPacket
  2340 ;; This function uses a non-reentrant model
  2341 ;;
  2342                           
  2343                           	psect	text10
  2344  0004D6                     __ptext10:
  2345                           	opt stack 0
  2346  0004D6                     _insertByte:
  2347                           	opt stack 28
  2348                           
  2349                           ;incstack = 0
  2350                           ;insertByte@dataByte stored from wreg
  2351  0004D6  6E14               	movwf	insertByte@dataByte,c
  2352                           
  2353                           ;main.c: 306: if (*index >= 32) return (0);
  2354  0004D8  C011  FFD9         	movff	insertByte@index,fsr2l
  2355  0004DC  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2356  0004E0  0E1F               	movlw	31
  2357  0004E2  64DF               	cpfsgt	indf2,c
  2358  0004E4  D002               	goto	l1359
  2359  0004E6  0E00               	movlw	0
  2360  0004E8  0012               	return	
  2361  0004EA                     l1359:
  2362                           
  2363                           ;main.c: 307: if (dataByte == 36 || dataByte == 16 || dataByte == 13) {
  2364  0004EA  0E24               	movlw	36
  2365  0004EC  1814               	xorwf	insertByte@dataByte,w,c
  2366  0004EE  B4D8               	btfsc	status,2,c
  2367  0004F0  D008               	goto	l1365
  2368  0004F2  0E10               	movlw	16
  2369  0004F4  1814               	xorwf	insertByte@dataByte,w,c
  2370  0004F6  B4D8               	btfsc	status,2,c
  2371  0004F8  D004               	goto	l1365
  2372  0004FA  0E0D               	movlw	13
  2373  0004FC  1814               	xorwf	insertByte@dataByte,w,c
  2374  0004FE  A4D8               	btfss	status,2,c
  2375  000500  D01C               	goto	l1369
  2376  000502                     l1365:
  2377                           
  2378                           ;main.c: 308: ptrBuffer[*index] = 16;
  2379  000502  C011  FFD9         	movff	insertByte@index,fsr2l
  2380  000506  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2381  00050A  50DF               	movf	indf2,w,c
  2382  00050C  6E13               	movwf	??_insertByte& (0+255),c
  2383  00050E  5013               	movf	??_insertByte,w,c
  2384  000510  0D01               	mullw	1
  2385  000512  50F3               	movf	prodl,w,c
  2386  000514  240F               	addwf	insertByte@ptrBuffer,w,c
  2387  000516  6ED9               	movwf	fsr2l,c
  2388  000518  50F4               	movf	prodh,w,c
  2389  00051A  2010               	addwfc	insertByte@ptrBuffer+1,w,c
  2390  00051C  6EDA               	movwf	fsr2h,c
  2391  00051E  0E10               	movlw	16
  2392  000520  6EDF               	movwf	indf2,c
  2393                           
  2394                           ;main.c: 309: *index = *index + 1;
  2395  000522  C011  FFD9         	movff	insertByte@index,fsr2l
  2396  000526  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2397  00052A  50DF               	movf	indf2,w,c
  2398  00052C  6E13               	movwf	??_insertByte& (0+255),c
  2399  00052E  2813               	incf	??_insertByte,w,c
  2400  000530  C011  FFD9         	movff	insertByte@index,fsr2l
  2401  000534  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2402  000538  6EDF               	movwf	indf2,c
  2403  00053A                     l1369:
  2404                           
  2405                           ;main.c: 310: }
  2406                           ;main.c: 311: if (*index >= 32) return (0);
  2407  00053A  C011  FFD9         	movff	insertByte@index,fsr2l
  2408  00053E  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2409  000542  0E1F               	movlw	31
  2410  000544  64DF               	cpfsgt	indf2,c
  2411  000546  D002               	goto	l1375
  2412  000548  0E00               	movlw	0
  2413  00054A  0012               	return	
  2414  00054C                     l1375:
  2415                           
  2416                           ;main.c: 312: ptrBuffer[*index] = dataByte;
  2417  00054C  C011  FFD9         	movff	insertByte@index,fsr2l
  2418  000550  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2419  000554  50DF               	movf	indf2,w,c
  2420  000556  6E13               	movwf	??_insertByte& (0+255),c
  2421  000558  5013               	movf	??_insertByte,w,c
  2422  00055A  0D01               	mullw	1
  2423  00055C  50F3               	movf	prodl,w,c
  2424  00055E  240F               	addwf	insertByte@ptrBuffer,w,c
  2425  000560  6ED9               	movwf	fsr2l,c
  2426  000562  50F4               	movf	prodh,w,c
  2427  000564  2010               	addwfc	insertByte@ptrBuffer+1,w,c
  2428  000566  6EDA               	movwf	fsr2h,c
  2429  000568  C014  FFDF         	movff	insertByte@dataByte,indf2
  2430                           
  2431                           ;main.c: 313: *index = *index + 1;
  2432  00056C  C011  FFD9         	movff	insertByte@index,fsr2l
  2433  000570  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2434  000574  50DF               	movf	indf2,w,c
  2435  000576  6E13               	movwf	??_insertByte& (0+255),c
  2436  000578  2813               	incf	??_insertByte,w,c
  2437  00057A  C011  FFD9         	movff	insertByte@index,fsr2l
  2438  00057E  C012  FFDA         	movff	insertByte@index+1,fsr2h
  2439  000582  6EDF               	movwf	indf2,c
  2440                           
  2441                           ;main.c: 314: return (!0);
  2442  000584  0E01               	movlw	1
  2443  000586  0012               	return	
  2444  000588                     __end_of_insertByte:
  2445                           	opt stack 0
  2446                           tblptru	equ	0xFF8
  2447                           tblptrh	equ	0xFF7
  2448                           tblptrl	equ	0xFF6
  2449                           tablat	equ	0xFF5
  2450                           prodh	equ	0xFF4
  2451                           prodl	equ	0xFF3
  2452                           intcon	equ	0xFF2
  2453                           intcon2	equ	0xFF1
  2454                           postinc0	equ	0xFEE
  2455                           wreg	equ	0xFE8
  2456                           postdec1	equ	0xFE5
  2457                           fsr1h	equ	0xFE2
  2458                           fsr1l	equ	0xFE1
  2459                           indf2	equ	0xFDF
  2460                           postinc2	equ	0xFDE
  2461                           postdec2	equ	0xFDD
  2462                           fsr2h	equ	0xFDA
  2463                           fsr2l	equ	0xFD9
  2464                           status	equ	0xFD8
  2465                           
  2466 ;; *************** function _isr *****************
  2467 ;; Defined at:
  2468 ;;		line 227 in file "../main.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;		None
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;		None
  2473 ;; Return value:  Size  Location     Type
  2474 ;;                  1    wreg      void 
  2475 ;; Registers used:
  2476 ;;		wreg, status,2, status,0
  2477 ;; Tracked objects:
  2478 ;;		On entry : 0/0
  2479 ;;		On exit  : 0/0
  2480 ;;		Unchanged: 0/0
  2481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2482 ;;      Params:         0       0       0       0       0       0       0
  2483 ;;      Locals:         0       0       0       0       0       0       0
  2484 ;;      Temps:         14       0       0       0       0       0       0
  2485 ;;      Totals:        14       0       0       0       0       0       0
  2486 ;;Total ram usage:       14 bytes
  2487 ;; Hardware stack levels used:    1
  2488 ;; This function calls:
  2489 ;;		Nothing
  2490 ;; This function is called by:
  2491 ;;		Interrupt level 2
  2492 ;; This function uses a non-reentrant model
  2493 ;;
  2494                           
  2495                           	psect	intcode
  2496  000008                     __pintcode:
  2497                           	opt stack 0
  2498  000008                     _isr:
  2499                           	opt stack 28
  2500                           
  2501                           ;incstack = 0
  2502  000008  8260               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2503  00000A  CFFA F001          	movff	pclath,??_isr
  2504  00000E  CFFB F002          	movff	pclatu,??_isr+1
  2505  000012  CFE9 F003          	movff	fsr0l,??_isr+2
  2506  000016  CFEA F004          	movff	fsr0h,??_isr+3
  2507  00001A  CFE1 F005          	movff	fsr1l,??_isr+4
  2508  00001E  CFE2 F006          	movff	fsr1h,??_isr+5
  2509  000022  CFD9 F007          	movff	fsr2l,??_isr+6
  2510  000026  CFDA F008          	movff	fsr2h,??_isr+7
  2511  00002A  CFF3 F009          	movff	prodl,??_isr+8
  2512  00002E  CFF4 F00A          	movff	prodh,??_isr+9
  2513  000032  CFF6 F00B          	movff	tblptrl,??_isr+10
  2514  000036  CFF7 F00C          	movff	tblptrh,??_isr+11
  2515  00003A  CFF8 F00D          	movff	tblptru,??_isr+12
  2516  00003E  CFF5 F00E          	movff	tablat,??_isr+13
  2517                           
  2518                           ;main.c: 228: static int Timer2Counter = 0;
  2519                           ;main.c: 230: if (INTCONbits.INT0IF)
  2520  000042  A2F2               	btfss	intcon,1,c	;volatile
  2521  000044  D003               	goto	i2l1233
  2522                           
  2523                           ;main.c: 231: {
  2524                           ;main.c: 232: INTCONbits.INT0IF = 0;
  2525  000046  92F2               	bcf	intcon,1,c	;volatile
  2526                           
  2527                           ;main.c: 233: pushFlag = !0;
  2528  000048  0E01               	movlw	1
  2529  00004A  6E5E               	movwf	_pushFlag,c
  2530  00004C                     i2l1233:
  2531                           
  2532                           ;main.c: 234: }
  2533                           ;main.c: 236: if (INTCONbits.RBIF)
  2534  00004C  A0F2               	btfss	intcon,0,c	;volatile
  2535  00004E  D003               	goto	i2l109
  2536                           
  2537                           ;main.c: 237: {
  2538                           ;main.c: 238: PORTBreg = PORTB;
  2539  000050  CF81 F05F          	movff	3969,_PORTBreg	;volatile
  2540                           
  2541                           ;main.c: 239: INTCONbits.RBIF = 0;
  2542  000054  90F2               	bcf	intcon,0,c	;volatile
  2543  000056                     i2l109:
  2544                           
  2545                           ;main.c: 240: }
  2546                           ;main.c: 242: if (TMR2IF)
  2547  000056  A29E               	btfss	3998,1,c	;volatile
  2548  000058  D011               	goto	i2l112
  2549                           
  2550                           ;main.c: 243: {
  2551                           ;main.c: 244: TMR2IF = 0;
  2552  00005A  929E               	bcf	3998,1,c	;volatile
  2553                           
  2554                           ;main.c: 245: Timer2Counter++;
  2555  00005C  4A5A               	infsnz	isr@Timer2Counter,f,c
  2556  00005E  2A5B               	incf	isr@Timer2Counter+1,f,c
  2557                           
  2558                           ;main.c: 246: if (Timer2Counter >= 100)
  2559  000060  BE5B               	btfsc	isr@Timer2Counter+1,7,c
  2560  000062  D00C               	goto	i2l112
  2561  000064  505B               	movf	isr@Timer2Counter+1,w,c
  2562  000066  E104               	bnz	i2u44_40
  2563  000068  0E64               	movlw	100
  2564  00006A  5C5A               	subwf	isr@Timer2Counter,w,c
  2565  00006C  A0D8               	btfss	status,0,c
  2566  00006E  D006               	goto	i2l112
  2567  000070                     i2u44_40:
  2568                           
  2569                           ;main.c: 247: {
  2570                           ;main.c: 248: Timer2Counter = 0;
  2571  000070  0E00               	movlw	0
  2572  000072  6E5B               	movwf	isr@Timer2Counter+1,c
  2573  000074  0E00               	movlw	0
  2574  000076  6E5A               	movwf	isr@Timer2Counter,c
  2575                           
  2576                           ;main.c: 249: Timer2flag = !0;
  2577  000078  0E01               	movlw	1
  2578  00007A  6E5D               	movwf	_Timer2flag,c
  2579  00007C                     i2l112:
  2580  00007C  C00E  FFF5         	movff	??_isr+13,tablat
  2581  000080  C00D  FFF8         	movff	??_isr+12,tblptru
  2582  000084  C00C  FFF7         	movff	??_isr+11,tblptrh
  2583  000088  C00B  FFF6         	movff	??_isr+10,tblptrl
  2584  00008C  C00A  FFF4         	movff	??_isr+9,prodh
  2585  000090  C009  FFF3         	movff	??_isr+8,prodl
  2586  000094  C008  FFDA         	movff	??_isr+7,fsr2h
  2587  000098  C007  FFD9         	movff	??_isr+6,fsr2l
  2588  00009C  C006  FFE2         	movff	??_isr+5,fsr1h
  2589  0000A0  C005  FFE1         	movff	??_isr+4,fsr1l
  2590  0000A4  C004  FFEA         	movff	??_isr+3,fsr0h
  2591  0000A8  C003  FFE9         	movff	??_isr+2,fsr0l
  2592  0000AC  C002  FFFB         	movff	??_isr+1,pclatu
  2593  0000B0  C001  FFFA         	movff	??_isr,pclath
  2594  0000B4  9260               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2595  0000B6  0011               	retfie		f
  2596  0000B8                     __end_of_isr:
  2597                           	opt stack 0
  2598                           pclatu	equ	0xFFB
  2599                           pclath	equ	0xFFA
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           intcon2	equ	0xFF1
  2608                           postinc0	equ	0xFEE
  2609                           fsr0h	equ	0xFEA
  2610                           fsr0l	equ	0xFE9
  2611                           wreg	equ	0xFE8
  2612                           postdec1	equ	0xFE5
  2613                           fsr1h	equ	0xFE2
  2614                           fsr1l	equ	0xFE1
  2615                           indf2	equ	0xFDF
  2616                           postinc2	equ	0xFDE
  2617                           postdec2	equ	0xFDD
  2618                           fsr2h	equ	0xFDA
  2619                           fsr2l	equ	0xFD9
  2620                           status	equ	0xFD8
  2621                           pclatu	equ	0xFFB
  2622                           pclath	equ	0xFFA
  2623                           tblptru	equ	0xFF8
  2624                           tblptrh	equ	0xFF7
  2625                           tblptrl	equ	0xFF6
  2626                           tablat	equ	0xFF5
  2627                           prodh	equ	0xFF4
  2628                           prodl	equ	0xFF3
  2629                           intcon	equ	0xFF2
  2630                           intcon2	equ	0xFF1
  2631                           postinc0	equ	0xFEE
  2632                           fsr0h	equ	0xFEA
  2633                           fsr0l	equ	0xFE9
  2634                           wreg	equ	0xFE8
  2635                           postdec1	equ	0xFE5
  2636                           fsr1h	equ	0xFE2
  2637                           fsr1l	equ	0xFE1
  2638                           indf2	equ	0xFDF
  2639                           postinc2	equ	0xFDE
  2640                           postdec2	equ	0xFDD
  2641                           fsr2h	equ	0xFDA
  2642                           fsr2l	equ	0xFD9
  2643                           status	equ	0xFD8
  2644                           
  2645                           	psect	rparam
  2646  0000                     pclatu	equ	0xFFB
  2647                           pclath	equ	0xFFA
  2648                           tblptru	equ	0xFF8
  2649                           tblptrh	equ	0xFF7
  2650                           tblptrl	equ	0xFF6
  2651                           tablat	equ	0xFF5
  2652                           prodh	equ	0xFF4
  2653                           prodl	equ	0xFF3
  2654                           intcon	equ	0xFF2
  2655                           intcon2	equ	0xFF1
  2656                           postinc0	equ	0xFEE
  2657                           fsr0h	equ	0xFEA
  2658                           fsr0l	equ	0xFE9
  2659                           wreg	equ	0xFE8
  2660                           postdec1	equ	0xFE5
  2661                           fsr1h	equ	0xFE2
  2662                           fsr1l	equ	0xFE1
  2663                           indf2	equ	0xFDF
  2664                           postinc2	equ	0xFDE
  2665                           postdec2	equ	0xFDD
  2666                           fsr2h	equ	0xFDA
  2667                           fsr2l	equ	0xFD9
  2668                           status	equ	0xFD8
  2669                           
  2670                           	psect	temp
  2671  000060                     btemp:
  2672                           	opt stack 0
  2673  000060                     	ds	1
  2674  0000                     int$flags	set	btemp
  2675                           pclatu	equ	0xFFB
  2676                           pclath	equ	0xFFA
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           prodh	equ	0xFF4
  2682                           prodl	equ	0xFF3
  2683                           intcon	equ	0xFF2
  2684                           intcon2	equ	0xFF1
  2685                           postinc0	equ	0xFEE
  2686                           fsr0h	equ	0xFEA
  2687                           fsr0l	equ	0xFE9
  2688                           wreg	equ	0xFE8
  2689                           postdec1	equ	0xFE5
  2690                           fsr1h	equ	0xFE2
  2691                           fsr1l	equ	0xFE1
  2692                           indf2	equ	0xFDF
  2693                           postinc2	equ	0xFDE
  2694                           postdec2	equ	0xFDD
  2695                           fsr2h	equ	0xFDA
  2696                           fsr2l	equ	0xFD9
  2697                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    528
    Data        0
    BSS         1262
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     81      95
    BANK0           128      0      96
    BANK1           256      0     128
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    BuildPacket@ptrData	PTR unsigned char  size(2) Largest target is 5
		 -> main@motorData(COMRAM[5]), 

    BuildPacket@ptrPacket	PTR unsigned char  size(2) Largest target is 32
		 -> packet(BANK0[32]), 

    insertByte@ptrBuffer	PTR unsigned char  size(2) Largest target is 32
		 -> packet(BANK0[32]), 

    insertByte@index	PTR unsigned char  size(2) Largest target is 1
		 -> BuildPacket@packetIndex(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_readJoySticks
    _readJoySticks->___lwdiv
    ___lwdiv->___wmul
    _BuildPacket->_insertByte

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0    3389
                                             53 COMRAM    28    28      0
                        _BuildPacket
                            _DelayMs
                               _init
                              _putch
                      _readJoySticks
 ---------------------------------------------------------------------------------
 (1) _readJoySticks                                       26    26      0     966
                                             27 COMRAM    26    26      0
                   _ADconvertAndRead
                       _ADsetChannel
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     287
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                             20 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADsetChannel                                         2     2      0      22
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ADconvertAndRead                                     8     6      2      69
                                             14 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      22
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayMs                                              4     2      2     132
                                             14 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _BuildPacket                                          9     3      6    1553
                                             20 COMRAM     9     3      6
                         _insertByte
 ---------------------------------------------------------------------------------
 (2) _insertByte                                           6     2      4     820
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BuildPacket
     _insertByte
   _DelayMs
   _init
   _putch
   _readJoySticks
     _ADconvertAndRead
     _ADsetChannel
     ___lwdiv
       ___wmul (ARG)
     ___wmul

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     400      17       66.7%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      80       7       50.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      60       5       75.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     51      5F       1       75.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     13F      15        0.0%
DATA                 0      0     53F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Apr 06 11:48:51 2018

         ___wmul@multiplicand 0011                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$HS 000000  
                         l115 073A                           l124 06A0                           l141 0360  
                         l136 02F6                           l636 064E                           _PR2 000FCB  
                         u770 029C                           u780 02B4                           _isr 0008  
                         prod 000FF3                           wreg 000FE8         readJoySticks@ADoffset 001E  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                          l1501 06D8  
                        l1503 06DC                          l1407 0644                          l1505 06E4  
                        l1507 06EC                          l1365 0502                          l1541 03EE  
                        l1525 0344                          l1517 02D8                          l1375 054C  
                        l1359 04EA                          l1535 03E2                          l1519 02FE  
                        l1623 0100                          l1369 053A                          l1529 0374  
                        l1609 00D6                          l1571 047E                          l1563 0458  
                        l1395 061C                          l1651 01B2                          l1619 00F0  
                        l1557 0438                          l1397 0624                          l1629 0110  
                        l1591 04D2                          l1399 0628                          l1663 0210  
                        l1647 019A                          l1577 04AE                          l1569 0478  
                        l1579 04B0                          l1499 06D2                          l1659 01F8  
                        l1693 0284                          l1689 026C                          ?_isr 0001  
                 main@convert 0050                  __CFG_PWRT$ON 000000                          _main 00BC  
                        _init 0588                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr2h 000FDA                          fsr0l 000FE9                          indf2 000FDF  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0060  
      readJoySticks@ADchannel 005C                          prodh 000FF4                          prodl 000FF3  
                        start 00B8                 __CFG_IESO$OFF 000000               __end_of_DelayMs 06FE  
               __CFG_MCLRE$ON 000000         BuildPacket@subCommand 0015                  ___param_bank 000000  
                       ??_isr 0001           __end_of_BuildPacket 04D6                         ?_main 0001  
                       ?_init 0001                         _T2CON 000FCA                __CFG_DEBUG$OFF 000000  
             __end_of___lwdiv 0658                         i2l112 007C                         i2l109 0056  
                       _SPBRG 000FAF                         _PORTB 000F81                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TXREG 000FAD  
              __CFG_FCMEN$OFF 000000                         _putch 0738                         main@i 004A  
              __CFG_BOREN$OFF 000000                         pclath 000FFA                         tablat 000FF5  
                       status 000FD8            BuildPacket@command 001B  readJoySticks@joyStickReading 0034  
          BuildPacket@ptrData 0017               __initialization 0658                  __end_of_main 028E  
                __end_of_init 0606     readJoySticks@ADrawReading 0030                 ?_ADsetChannel 0001  
                      ??_main 0036                        ??_init 000F                 __activetblptr 000002  
      __size_of_readJoySticks 0168                        _ADCON0 000FC2                        _ADCON2 000FC0  
                      _ADRESH 000FC4                        _ADRESL 000FC3                        ?_putch 0001  
               main@leftMotor 004E                        i2l1233 004C                        _INTCON 000FF2  
                   ??_DelayMs 0011      __end_of_ADconvertAndRead 06D0                        _TMR2IF 007CF1  
                 _BuildPacket 03F6                __CFG_XINST$OFF 000000                    _Timer2flag 005D  
              ??_ADsetChannel 000F                        ___wmul 06FE                     ??___lwdiv 0019  
                      _packet 00C0                        clear_0 0660                        clear_1 0672  
                      clear_2 067E                        clear_3 068A          main@intLeftJoystickX 003A  
        main@intLeftJoystickY 0038                 main@motorData 003C                  __mediumconst 7DEE  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                  __accesstop 0080       __end_of__initialization 0690               __CFG_PBADEN$OFF 000000  
               ___rparam_used 000001                __pcstackCOMRAM 0001                 _readJoySticks 028E  
               __end_of_putch 0744                       ??_putch 000F              isr@Timer2Counter 005A  
                  __pbssBANK0 0080                    __pbssBANK1 0100            insertByte@dataByte 0014  
              ?_readJoySticks 0001                       ?___wmul 000F                       _INTCON2 000FF1  
                     i2u44_40 0070          __end_of_ADsetChannel 0738             main@rightMotorLSB 0041  
           main@rightMotorMSB 0042                       _DelayMs 06D0             __end_of_crc_tab16 7FEF  
                     __Hparam 0000                       __Lparam 0000               __size_of___wmul 0026  
                     ___lwdiv 0606               __CFG_STVREN$OFF 000000              main@leftMotorLSB 0044  
            main@leftMotorMSB 0043                       __pcinit 0658                       __ramtop 0600  
             insertByte@index 0011                       __ptext0 00BC                       __ptext1 028E  
                     __ptext2 06FE                       __ptext3 0606                       __ptext4 0724  
                     __ptext5 069E                       __ptext6 0738                       __ptext7 0588  
                     __ptext8 06D0                       __ptext9 03F6                main@rightMotor 004C  
                   _T2CONbits 000FCA                  __size_of_isr 00B0                    _insertByte 04D6  
        end_of_initialization 0690                 __Lmediumconst 7DEE             ?_ADconvertAndRead 000F  
            main@packetLength 0049               ??_readJoySticks 001C            ??_ADconvertAndRead 0011  
                ?_BuildPacket 0015                     _RCSTAbits 000FAB                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
                  _testBuffer 0100                     _PORTAbits 000F80                     _PORTBbits 000F81  
         ADsetChannel@channel 0010                     _TXSTAbits 000FAC         main@intRightJoystickX 0047  
       main@intRightJoystickY 0045          BuildPacket@ptrPacket 0019                __end_of___wmul 0724  
                 _BAUDCONbits 000FB8                  DelayMs@count 000F                   ?_insertByte 000F  
                 putch@TxByte 000F         __size_of_ADsetChannel 0014           start_initialization 0658  
                 __end_of_isr 00B8    __end_ofreadJoySticks@F2980 7FFF    __end_ofreadJoySticks@F2982 7FF7  
    ADconvertAndRead@highByte 0015                      ??___wmul 0013                  _ADsetChannel 0724  
            __CFG_LPT1OSC$OFF 000000                   __pbssBIGRAM 0180                   __pbssCOMRAM 0052  
                    ?_DelayMs 000F                 _arrDataPacket 0180              ___lwdiv@dividend 0015  
         __size_of_insertByte 00B2             __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  
               __pmediumconst 7DEE          __size_of_BuildPacket 00E0                     _crc_tab16 7DEF  
                    ?___lwdiv 0015              ___lwdiv@quotient 0019                __size_of_putch 000C  
         insertByte@ptrBuffer 000F                ___wmul@product 0013                      DelayMs@i 0011  
                    _PIE1bits 000F9D                      _ADresult 0052                      _PIR1bits 000F9E  
                    _PORTBreg 005F       ADconvertAndRead@ADvalue 0013     __size_of_ADconvertAndRead 0032  
                  _ADCON0bits 000FC2                    _ADCON1bits 000FC1                    _ADCON2bits 000FC0  
           ___wmul@multiplier 000F           readJoySticks@ADspan 0026                   _INTCON2bits 000FF1  
            __size_of_DelayMs 002E           readJoySticks@offset 002E                      __Hrparam 0000  
       __end_of_readJoySticks 03F6                      __Lrparam 0000              __size_of___lwdiv 0052  
                ??_insertByte 0013               ___lwdiv@divisor 0017               ___lwdiv@counter 001B  
                    __ptext10 04D6                 __size_of_main 01D2                 __size_of_init 007E  
          __end_of_insertByte 0588            readJoySticks@F2980 7FF7            readJoySticks@F2982 7FEF  
                    int$flags 0060                      _pushFlag 005E                main@LEDcounter 004B  
                  _INTCONbits 000FF2         BuildPacket@dataLength 0016                      intlevel2 0000  
                BuildPacket@i 001C                 _commandBuffer 0080              DelayMs@downCount 0012  
           readJoySticks@span 0032              _ADconvertAndRead 069E        BuildPacket@packetIndex 001D  
               ??_BuildPacket 001B  
